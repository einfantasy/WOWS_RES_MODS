############################
#
#	IF YOU ARE READING THIS, UNDER ANY CIRCUMSTANCES,
#	- DO NOT MODIFY THIS MODIFICATION FURTHER.
#	- DO NOT USE OR IMPORT A SUBSET OF THIS MODIFICATION INTO ANOTHER MODIFICATION.
#	- DO NOT EDIT OR CREATE ANOTHER MODIFICATION TO ACCOMMODATE THE FUNCTIONALITIES THIS MODIFICATION PROVIDES.
#
#	THIS MODIFICATION MUST BE DISTRIBUTED AND USED AS IT IS.
#
#	!!!!! A VIOLATION WILL RESULT IN YOUR AND USER'S ACCOUNT SANCTIONS !!!!!
#
#	THESE ARE MANDATORY CONDITIONS THAT MUST BE MET IN ORDER TO FOLLOW THE REQUESTS FROM WG
#
#	YOU HAVE BEEN WARNED.
#

# Index 16: None means no RPF is visible.
# It could happen when the submarine is at maximum depth and he is the only remaining enemy

(def constant TT_MINIMAP_INSTALLED "true")

(def constant TMap_RPF_INVALID_DIRECTION "-1")
(def constant TMap_RPF_DIRECTION_MESSAGES [
	'RPF: N~NNE',
	'RPF: NNE~NE',
	'RPF: NE~ENE',
	'RPF: ENE~E',
	'RPF: E~ESE',
	'RPF: ESE~SE',
	'RPF: SE~SSE',
	'RPF: SSE~S',
	'RPF: S~SSW',
	'RPF: SSW~SW',
	'RPF: SW~WSW',
	'RPF: WSW~W',
	'RPF: W~WNW',
	'RPF: WNW~NW',
	'RPF: NW~NNW',
	'RPF: NNW~N',
	'RPF: None',
])

(def constant TMap_RPF_SECTOR_WIDTH_DEG "360 / 16")
(def constant TMap_RPF_SECTOR_WIDTH_RAD "gradToRad(TMap_RPF_SECTOR_WIDTH_DEG)")

(def constant TMap_RPF_SECTOR_HALF_WIDTH_DEG "TMap_RPF_SECTOR_WIDTH_DEG / 2")
(def constant TMap_RPF_SECTOR_HALF_WIDTH_RAD "gradToRad(TMap_RPF_SECTOR_HALF_WIDTH_DEG)")

(def constant TMap_RPF_MESSAGE_COOLDOWN_DURATION "45")
(def constant TMap_RPF_MESSAGE_COOLDOWN_MAX_COUNT "3")

(def constant TMap_COMPONENT_KEY_CONSUMABLE_RANGES "'modTTaroMinimapConsumableRanges'")
(def constant TMap_COMPONENT_KEY_RADIO_LOCATION "'modTTaroMinimapRadioLocation'")

# battle\minimap\markers\base_marker.unbound
(def constant TMap_RANGE_COLORS {
    'IDS_TT_TITLE_MAIN_ARMAMENT_RANGE'      : "0xbbbbbb",
    'IDS_TT_TITLE_SEA_DETECTION_RANGE'      : "0x6ee1f7",
    'IDS_TT_TITLE_AIR_DETECTION_RANGE'      : "0x6ee1d8",
    'IDS_TT_TITLE_AA_RANGE'                 : "0xf0a522",
    'IDS_TT_TITLE_SECONDARY_RANGE'          : "0xa9c272",
    'IDS_TT_TITLE_SURFACE_CONSUMABLE_RANGE' : "0xccff",
    'MARKERS'                               : "0xcccccc",
    'BLACK'                                 : "0x0",
    '0'                                     : "0xff0000",
    '1'                                     : "0xff3100",
    '2'                                     : "0xff6200",
    '3'                                     : "0xff9400",
    '4'                                     : "0xffc500",
    '5'                                     : "0xfff600",
    '6'                                     : "0xd5ff00",
    '7'                                     : "0xa4ff00",
    '8'                                     : "0x73ff00",
    '9'                                     : "0x41ff00",
    '10'                                    : "0x10ff00",
    '11'                                    : "0xff20",
    '12'                                    : "0xff52",
    '13'                                    : "0xff83",
    '14'                                    : "0xffb4",
    '15'                                    : "0xffe6",
    '16'                                    : "0xe6ff",
    '17'                                    : "0xb4ff",
    '18'                                    : "0x83ff",
    '19'                                    : "0x52ff",
    '20'                                    : "0x20ff",
    '21'                                    : "0x1000ff",
    '22'                                    : "0x4100ff",
    '23'                                    : "0x7300ff",
    '24'                                    : "0xa400ff",
    '25'                                    : "0xd500ff",
    '26'                                    : "0xff00f6",
    '27'                                    : "0xff00c5",
    '28'                                    : "0xff0094",
    '29'                                    : "0xff0062",
    '30'                                    : "0xff0031",
    '31'                                    : "0xff0000",

    ALL: ['IDS_TT_TITLE_MAIN_ARMAMENT_RANGE', 'IDS_TT_TITLE_SEA_DETECTION_RANGE', 'IDS_TT_TITLE_AIR_DETECTION_RANGE', 'IDS_TT_TITLE_AA_RANGE', 'IDS_TT_TITLE_SECONDARY_RANGE', 'IDS_TT_TITLE_SURFACE_CONSUMABLE_RANGE', 'MARKERS', 'BLACK', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'],
})

# battle\minimap\markers\capture_point_marker.unbound
(def constant TMap_CAPTURE_POINTS_SETTINGS
	{
		NEUTRAL: {
			STROKE_COLOR: 0xFFFFFF,
			STROKE_WIDTH: 1,
			COLORS: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF],
			ALPHAS: [0.18, 0.13, 0.08],
			RATIOS: [0, 128, 255]
		},
		ALLY: {
			STROKE_COLOR: 0x4CE8AA,
			STROKE_WIDTH: 1,
			COLORS: [0x4CE8AA, 0x4CE8AA, 0x4CE8AA],
			ALPHAS: [0.39, 0.26, 0.21],
			RATIOS: [0, 128, 255]
		},
		ENEMY: {
			STROKE_COLOR: 0xFF3300,
			STROKE_WIDTH: 1,
			COLORS: [0xFF3300, 0xFF3300, 0xFF3300],
			ALPHAS: [0.39, 0.26, 0.21],
			RATIOS: [0, 128, 255]
		},
		CONTESTED: {
			STROKE_COLOR: 0xFFCC33,
			STROKE_WIDTH: 2,
		},
	}
)

(def constant TMap_RPF_KEYS {
	IDS_QUICK_COMMANDS	: 'CMD_QUICK_COMMANDS_WINDOW',
	IDS_HELP			: 'CMD_HELP',
	IDS_FOGHORN			: 'CMD_FOGHORN',

	ALL					: ['IDS_QUICK_COMMANDS', 'IDS_HELP', 'IDS_FOGHORN', 'IDS_IS_TURNED_OFF'],
})

(def constant TMap_DISPLAY_MODES {
	DISABLE: 0,
	ENABLE: 1,
	ADAPTIVE: 2,
})

(def constant TMap_OUTLINE_TYPES {
	DISABLE		: 0,
	DOT			: 1,
	DASH		: 2,
	SOLID		: 3,
})

(def constant TMap_GRADIENT_MASKS [
	{water: 'static_background.png',			island: 'static_background.png'},				# None
	{water: 'gradient_background_0_water.png',	island: 'gradient_background_0_island.png'},	# 0 deg
	{water: 'gradient_background_45_water.png',	island: 'gradient_background_45_island.png'},	# 45 deg
])

(def constant TMap_AIM_POSITION_ELEMENTS [
	'TMap_AimPositionDefault',
	'TMap_AimPositionCross1',
	'TMap_AimPositionCross2',
])

# battle\minimap\markers\base_marker.unbound
(def constant TMap_MINIMAP_MARKERS_SETTINGS [
	{markerRenderer: 'TMap_MapShipMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.avatar
	{markerRenderer: 'TMap_MapBuildingMarker',			disableUpdatePos: false, rotateBack: true,	hideOnDeath: false}, # CC.Building
	{markerRenderer: 'TMap_MapCapturePointMarker',		disableUpdatePos: false, rotateBack: true,	hideOnDeath: false}, # CC.capturePoint
	{markerRenderer: 'TMap_MapEpicenterMarker',			disableUpdatePos: false, rotateBack: true,	hideOnDeath: false}, # CC.epicenter
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.navpoint
	{markerRenderer: 'TMap_MapScenarioObjectMarker',	disableUpdatePos: false, rotateBack: true,	hideOnDeath: false}, # CC.scenarioObject	
	{markerRenderer: 'TMap_MapSquadronMarker',			disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.squadron
	{markerRenderer: 'TMap_MapTorpedoMarker',			disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.torpedo
	{markerRenderer: 'TMap_MapCameraMarker',			disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.camera
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.popupDamageGroup
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.payload
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.resource
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.keyObject
	{markerRenderer: 'TMap_MapAimPositionMarker',		disableUpdatePos: true , rotateBack: false,	hideOnDeath: false}, # CC.aimPosition
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.scenarioTag
	{markerRenderer: 'TMap_MapInteractiveZoneMarker',	disableUpdatePos: false, rotateBack: true,	hideOnDeath: false}, # CC.interactiveZone
	{markerRenderer: 'TMap_MapWardFightersMarker',		disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.ward
	{markerRenderer: 'TMap_MapNavpointMarker',			disableUpdatePos: true , rotateBack: false,	hideOnDeath: false}, # CC.minimapPath
	{markerRenderer: 'TMap_MapPathMarker',				disableUpdatePos: true , rotateBack: false,	hideOnDeath: false}, # CC.minimapBezierPath
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.mine
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.submarineSearchPoint
	{markerRenderer: 'TMap_MapHydrophoneZoneMarker',	disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.submarineHydrophoneZone
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.waveHit
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.depthCharge
	{markerRenderer: 'MapStubMarker',					disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.airSupportCharge
	{markerRenderer: 'TMap_MapAttentionMarker',			disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.minimapAttentionPoint
	{markerRenderer: 'TMap_MapMinefieldMarker',			disableUpdatePos: false, rotateBack: false,	hideOnDeath: false}, # CC.minefield
])

# battle\minimap\markers\base_marker.unbound
(def constant TMap_MINIMAP_RANGES_SETTINGS "{
	artilleryMaxDist:				{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'MAIN_ARMAMENT',	optionName: 'shootMGRangeEnabled' },
	phaser_laserMaxDist:			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'MAIN_ARMAMENT',	optionName: 'shootPhaserLaserRangeEnabled' },
	torpedoMaxDist:					{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'TORPEDO',		optionName: 'shootTARangeEnabled' },
	pulsePhaserMaxDist:				{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'MAIN_ARMAMENT',	optionName: 'shootPulsePhaserRangeEnabled' },
	ionicPhaserMaxDist:				{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'MAIN_ARMAMENT',	optionName: 'shootIonicPhaserRangeEnabled' },
	torpedoPhotonMaxDist:			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'TORPEDO',		optionName: 'shootTorpedoPhotonRangeEnabled' },
	pingerMaxDist:					{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 ,	prefName: 'MAIN_ARMAMENT',	optionName: 'shootPingerRangeEnabled' },
	visibilityRange:				{ color: 0x6EE1F7, boldText: false, dashLength: 11, drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 11 ,	prefName: 'VISIBILITY_SEA',	optionName: 'visibilityRangeEnabled' },
	visibilityRangeAlt:				{ color: 0x6EE1F7, boldText: false, dashLength: 11, drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 11 ,	prefName: 'VISIBILITY_SEA',	optionName: 'visibilityRangeEnabled' },
	visibilityPlaneRange:			{ color: 0x6EE1D8, boldText: false, dashLength: 13, drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 27 ,	prefName: 'VISIBILITY_AIR',	optionName: 'visibilityPlaneRangeEnabled' },
	visibilityPlaneRangeAlt:		{ color: 0x6EE1D8, boldText: false, dashLength: 13, drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 27 , 	prefName: 'VISIBILITY_AIR',	optionName: 'visibilityPlaneRangeEnabled' },
	aaRangeMax:						{ color: 0xF0A522, boldText: false, dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'ANTIAIR',		optionName: 'aaRangeMaxEnabled' },
	atbaMaxDist:					{ color: 0xA9C272, boldText: false, dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'SECONDARY',		optionName: 'atbaRangeEnabled' },
	rlsShipRange:					{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: true , forceEnabled: false, lineThickness: 1.5, spacing: 15.5 , prefName: 'RADAR_SELF',		optionName: 'rlsRangeEnabled' },
	sonarShipRange:					{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: true , forceEnabled: false, lineThickness: 2  , spacing: 21 , 	prefName: 'HYDRO_SELF',		optionName: 'sonarRangeEnabled' },
	hydrophoneRange:				{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: true , forceEnabled: false, lineThickness: 2.5, spacing: 17.5 , prefName: 'HYDROPHONE_SELF',optionName: 'hydrophoneRangeEnabled' },
	submarineLocatorRange:			{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: true , forceEnabled: false, lineThickness: 2.5, spacing: 17.5 , prefName: 'SUBRADAR_SELF',	optionName: 'submarineLocatorRangeEnabled' },
	visDistance:					{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: false, forceEnabled: true , lineThickness: 1  , spacing: 0 , 	prefName: '',				optionName: '' },
	visibilityAfterPingByShipRange:	{ color: 0x00BBFF, boldText: false, dashLength: 16, drawDotted: false, forceEnabled: true , lineThickness: 1  , spacing: 40 , 	prefName: '',				optionName: 'visibilityAfterPingByShipRangeEnabled' },
	charge_laserMaxDist:			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'MAIN_ARMAMENT',	optionName: 'shootChargeLaserRangeEnabled' },
	impulse_laserMaxDist:			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'MAIN_ARMAMENT',	optionName: 'shootImpulseLaserRangeEnabled' },
	axis_laserMaxDist:				{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'MAIN_ARMAMENT',	optionName: 'shootAxisLaserRangeEnabled' },
	wavesMaxDist:					{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'MAIN_ARMAMENT',	optionName: 'shootWaveGunRangeEnabled' },
	air_supportMaxDist: 			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 , 	prefName: 'AIRSUPPORT',		optionName: 'shootAirSupportRangeEnabled' }
}")

(def constant TMap_CONCEALMENT_SKILL_ID {
	'AirCarrier': 45,
	#'Auxiliary': null,
	'Battleship': 12,
	'Cruiser': 12,
	'Destroyer': 12,
	#'Submarine': null
})
(def constant TMap_ATBA_SKILL_ID {
	'AirCarrier': 41,
	#'Auxiliary': null,
	'Battleship': 40,
	'Cruiser': 30,
	#'Destroyer': null,
	#'Submarine': null
})

(def css $TMap_NearbyRadarBoldText ()
	(extends $TextDefaultBoldNM)
	(extends $FontColorDefault)
)

(def css $TMap_NearbyRadarSmallText ()
	(extends $TextDefault13NM)
	(extends $FontColorDefault)
	(extends $FontEnableReadability)
)

(def css $TMap_MarkerText()
	(extends $Bold)
	(extends $FontColorWhite)
	(extends $TextMouseDisable)
	(extends $FontEnableReadability)
	(marginTextTop = -5px)
	(marginTextBottom = -5px)
)

# $FontDropShadowFilter <- $FontFamilyDefaultBold <- $TextDefaultBold9NM
(def macro TMap_MARKER_TEXT_DROPSHADOW()
	(filters 
		(dropShadow 
			(bind distance "isAlive ? 1 : 0")
			(angle = 45)
			(bind color "isAlive ? 0x000000 : relationColor")
			(alpha = 1)
			(blurX = 2.0)
			(blurY = 2.0)
			(bind strength "isAlive ? 0.5 : 0.8")
			(quality = 1)
		)
	)
)

# `altVision:bool` must exist!
# Loads `_varName:bool` into scope
(def macro TMap_GET_DISPLAY_MODE (_varName:expression, _prefValue:expression)
	(var name="_varName" type=bool value="_prefValue == TMap_DISPLAY_MODES.ADAPTIVE ? altVision : _prefValue")
)

# Custom
(def macro TMap_GET_ALT_VISION ()
	(var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)")
	(var altVision:bool = "cameraComponent ? cameraComponent.altVision : false" (event "cameraComponent.evAltVisionChanged"))
)

# Custom
(def macro TMap_GET_SCALE_RATIO()
	(var _isLoading:bool = false)
	(macro TT_GET_PREF_BOOL _varName="'isScaleExtended'" _pref="TMap_PREFS.EXTEND_SCALE")
	(var minimapSizeIndexComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.minimapSizeIndex).minimapOption")
	(var scaleIndex:number = "minimapSizeIndexComponent.value" (event "minimapSizeIndexComponent.evValueChanged"))
	(var baseMapScale:number = "scaleIndex < LIST_MAP_SCALES.length ? LIST_MAP_SCALES[scaleIndex] : LIST_MAP_SCALES[LIST_MAP_SCALES.length - 1] + SCALE_STEP * (scaleIndex - LIST_MAP_SCALES.length + 1)")
	(var mapScale:number = "baseMapScale * (1 + isScaleExtended)")
	(var loadingMinimapScale:number = "1.84") 
	(var scaleRatio:number = "MINIMAP_ASSETS_SIZE * (_isLoading ? loadingMinimapScale : mapScale)")
)

# Custom
(def macro TMap_GET_RGB(_hexValue:expression)
	(var red:number = "(_hexValue & 0x00FF0000) >> 16")
	(var green:number = "(_hexValue & 0x0000FF00) >> 8")
	(var blue:number = "_hexValue & 0x000000FF")
)

# battle\minimap\markers\base_marker.unbound
(def macro TMap_RANGE_CIRCLE ()
	(block
		(macro BIND_FAIR_SCALE "rangeRadius")
		(block
			(controller $Sector
				(bind arc "360")
				(bind radius "MINIMAP_ASSETS_SIZE")
				(bind innerRadius "innerRadius")
				(bind lineThickness "lineThickness")
				(bind lineAlpha "lineAlpha")
				(bind lineColor "color")
				(bind colors "[color]")
				(bind alphas "[alphaMultiplier * 0.35]")
				(bind ratios "[1.0]")
				(bind dashLength "dashLength")
				(bind spacing "spacing")
				(bind drawDotted "drawDotted")
			)
		)
	)
)

# battle\minimap\minimap.unbound
(def macro TMap_MINIMAP_SCOPE ()
	(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")

	(var minimapSizeIndexComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.minimapSizeIndex).minimapOption")
	(macro TT_GET_PREF_BOOL _varName="'isScaleExtended'" _pref="TMap_PREFS.EXTEND_SCALE")
	(var scaleIndex:number = "minimapSizeIndexComponent.value" (event "minimapSizeIndexComponent.evValueChanged"))
	(var baseMapScale:number = "scaleIndex < LIST_MAP_SCALES.length ? LIST_MAP_SCALES[scaleIndex] : LIST_MAP_SCALES[LIST_MAP_SCALES.length - 1] + SCALE_STEP * (scaleIndex - LIST_MAP_SCALES.length + 1)")
	(var mapScale:number = "baseMapScale * (1 + isScaleExtended)")
	(var itemScale:number = "scaleIndex < LIST_ICON_SCALES.length ? LIST_ICON_SCALES[scaleIndex] : LIST_ICON_SCALES[LIST_MAP_SCALES.length - 1]")
	(var loadingMinimapScale:number = "1.84") 
	(var scaleRatio:number = "MINIMAP_ASSETS_SIZE * (_isLoading ? loadingMinimapScale : mapScale)")

	(var waterAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.waterAlpha).minimapOption")
	(var waterAlpha:number = "waterAlphaComponent.value * 0.01" (event "waterAlphaComponent.evValueChanged"))

	(var mapBorderScale:number = "minimapEntity.mapBorder.ratio")
	(var mapBorderMarginX:number = "- scaleRatio * minimapEntity.mapBorder.relativeMargin.x")
	(var mapBorderMarginY:number = "- scaleRatio * minimapEntity.mapBorder.relativeMargin.y")

	(event evMouseOverMap)
	(event evMouseOutMap)
	(event evMouseMoveMap)
	(event evMouseDownMap)
)

# Custom
(def element TMap_RadioLocationChat (_userPrefsNum:gfx=null) layout=false
	(scope
		# Event
		(event evSendMessage)
		(event evStartCoolDown)
		(event evEndCoolDown)

		# RPF
		(var rpfComponent:gfx = "$datahub.getSingleComponent(CC.nearestEnemyIndication)")
		(var isRPFVisible:bool = "rpfComponent ? rpfComponent.showNearestEnemy : false" (event "rpfComponent.evShowNearestEnemyChanged"))
		(var yawToNearestEnemy:number = "rpfComponent ? rpfComponent.yawToNearestEnemy : 0" (event "rpfComponent.evYawToNearestEnemyChanged"))

		# PlayerAvatar
		(var playerAvatarComponent:gfx = "$datahub.getSingleComponent(CC.playerAvatar)")
		(var isAlive:bool = "playerAvatarComponent ? playerAvatarComponent.isAlive : false" (event "playerAvatarComponent.evIsAliveChanged"))

		# Chat
		(var chatComponent:gfx = "$datahub.getSingleComponent(CC.battleChatAndLog)")
		(var currentChannelId:number = "chatComponent.currentChannelId" (event "chatComponent.evChannelChanged"))
		(var isDivisionChat:bool = "currentChannelId == SC.Channel.BATTLE_CHAT_CHANNEL_TYPE.DIVISION")
		(var isTeamChat:bool = "currentChannelId == SC.Channel.BATTLE_CHAT_CHANNEL_TYPE.TEAM")
		(var isAllyChat:bool = "isTeamChat || isDivisionChat")

		# RPF Message
		(var rpfMessageIndex:number = "isRPFVisible ? round((yawToNearestEnemy - TMap_RPF_SECTOR_HALF_WIDTH_RAD) / TMap_RPF_SECTOR_WIDTH_RAD)
													: 16"
		)
		(var rpfMessage:str = "rpfMessageIndex < TMap_RPF_DIRECTION_MESSAGES.length ? TMap_RPF_DIRECTION_MESSAGES[rpfMessageIndex] : ''")
		(var prevRpfMessage:str = '' watch=false)
		(bind prevRpfMessage "rpfMessage" watch=false init=false (event "evSendMessage"))
		(var isRPFChanged:bool = "rpfMessage != prevRpfMessage")

		# Cooldown
		(var battleInfoComponent:gfx = "$datahub.getSingleComponent(CC.battleInfo)")
		(var battleType:str = "battleInfoComponent.battleType")
		(var isClanBattle:bool = "battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE")
		(var isTrainingBattle:bool = "battleType == SC.Common.BATTLE_TYPES.TRAINING_BATTLE")
		(var isAntiSpamEnabled:bool = "!(isClanBattle || isTrainingBattle || isDivisionChat)")

		(var coolDownCount:number = "0" watch=false)
		(bind coolDownCount "coolDownCount + 1" watch=false init=false (event "evStartCoolDown")) # evStartCoolDown will trigger only when (isTeamChat == true)
		(bind coolDownCount "coolDownCount - 1" watch=false init=false (event "evEndCoolDown"))
		(var isOnCoolDown:bool = "isAntiSpamEnabled ? coolDownCount + 1 > TMap_RPF_MESSAGE_COOLDOWN_MAX_COUNT : false")

		# Key Bind
		(macro TT_GET_PREF_NUMBER _varName="'rpfKeyIndex'" _pref="TMap_PREFS.RPF_KEYBIND")

		(var keyDesc:str = "rpfKeyIndex < TMap_RPF_KEYS.ALL.length ? TMap_RPF_KEYS.ALL[rpfKeyIndex] : TMap_RPF_KEYS.ALL[0]")
		(var keyName:str = "keyDesc in TMap_RPF_KEYS ? TMap_RPF_KEYS[keyDesc] : ''")

		(var commandWatcher:gfx = "$datahub.getPrimWatcher(CC.commandMappingCommandName, keyName)")
		(var commandEntity:gfx = "commandWatcher.entity" (event "commandWatcher.event"))
		(var commandComponent:gfx = "commandEntity && commandEntity.commandMappingCommand ? commandEntity.commandMappingCommand : null")

		# Availability
		(var canSendChat:bool = "isAllyChat && !isOnCoolDown && isRPFChanged && isAlive")
	)
	(visible = false)

	(dispatch evSendMessage args={} watch=false init=false (bind enabled "canSendChat") (event "commandComponent.evCall"))
	(dispatch evStartCoolDown args="{}" watch=false init=false (bind enabled "isTeamChat") (event "evSendMessage"))
	(dispatch evEndCoolDown	args="{}" delay="TMap_RPF_MESSAGE_COOLDOWN_DURATION" watch=false init=false (event "evStartCoolDown"))

	(bindcall externalCall 'inputMapping.onAction' "['battleChat.outgoingMessage', {'message': rpfMessage}]" watch=false init=false (event "evSendMessage"))
)

# battle\minimap\minimap.unbound
(def element BattleMinimapUb2() layout=true dispatch_size_change=true
	# TODO: make the height adjustable with prefs
	(scope
		(macro TT_GET_USERPREF)
		(macro TMap_GET_SCALE_RATIO)
	)
	(style
		(bind height "scaleRatio")
		(bind width "scaleRatio")
	)
	(controller $Instance
		(renderer = 'TMap_BattleMinimap')
		(bind enabled "_isLoading")
		(exprs
			(scope
				(bind _isLoading "_isLoading")
			)
		)
	)
)

# battle\death_log.unbound
(def element DeathLogContainer() layout=true dispatch_size_change=true
	(style
		(align = "right|bottom")
		(height = "22*3")
		(width = "400")
	)
)

# battle\death_log.unbound
(def element TMap_DeathLogContainer(_userPrefsNum:gfx=null) layout=true dispatch_size_change=true
	(scope
		(var feedbackCollection:gfx = "$datahub.getCollection(CC.feedbackComponent)")
		(var feedbackEntity:gfx = "feedbackCollection.items[0]")
	)

	(name = 'DeathLogContainer')

	(style
		(align = "right|bottom")
		(height = "22*3")
		(width = "400")
		(marginBottom = "MS")
		(marginRight = "MS")
	)

	(block
		(style
			(align = "right")
		)
		(controller $FxInstance renderer='DeathLogMessage' lifetime="DEATH_LOG_MESSAGE_LIFETIME"
			(args _eventData = "$event[1]")
			(bindcall create (event "feedbackEntity.feedbackComponent.evDeathLog"))
		)
	)
)

# Custom
(def element TTaroMinimap () layout=true dispatch_size_change=true
	(scope
        (macro STAGE_SIZE)
        (var defaultPos:dict = "{'positionX': stageWidth - XS, 'positionY': stageHeight - XS}")
        (macro DRAGGABLE_GET_DROP_POSITION _elementName="'TTaroMinimap'" _defaultPosition="defaultPos")

		(macro TT_GET_USERPREF)
		
		(macro TMap_GET_SCALE_RATIO)
        
		(var mouseComponent:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouseComponent.active" (event "mouseComponent.evActiveChanged"))

		(macro TT_GET_PREF_BOOL _varName="'isNerbyRadarVisible'"	_pref="TMap_PREFS.NEARBY_RADAR_RANGE")
		(macro TT_GET_PREF_BOOL _varName="'isDragDropDisabled'"	_pref="TMap_PREFS.DISABLE_DRAG_DROP")
		(macro TT_GET_PREF_BOOL _varName="'isBlurEnabled'"		_pref="TMap_PREFS.USE_BLUR")
	)

	(bindcall externalCall 'inputMapping.onAction' "['createParamsForAllShipsInBattle', {}]" on='addedToStage')

    (style
        (bind width "stageWidth")
        (bind height "stageHeight")
    )

	(controller $Instance renderer='DeclareBlurLayer'
		(bind enabled "isBlurEnabled")
		(exprs
			(style
				(zindex = "ZIndex.BACKGROUND")
				(hitTest = false)
			)
		)
	)

	(controller $Instance renderer='TMap_NearbyRadarsWarning'
		(bind enabled "isNerbyRadarVisible")
		(args _userPrefsNum="_userPrefsNum")
	)
    
    (block
        (block
			(style
				(position = "absolute")
				(bind bottom "scaleRatio - 2") # Offset to make it look natural
				(bind right "scaleRatio - 2")
				(flow = "Flow.HORIZONTAL")
			)

			# Draggable
			(block
				(controller $Instance renderer='ModDraggableElement'
					(bind enabled "!isDragDropDisabled")
					(args
						_elementName="'TTaroMinimap'"
						_defaultPosition="defaultPos"
						_screenBoundsOffset="{right: scaleRatio+XS-2, bottom: scaleRatio+XS-2}"
					)
				)
				(block
					(style
						(hitTest = false)
						(height = "32px - 5px") # There is 5px margin in the image
						(width = "32px - 5px")
						(alpha = 0.3)
						(margin = 1px)
						(backgroundImage = 'url:../cursors/move_hand.dds')
					)
					(controller $Animation
						(bindcall play
							to	="{alpha: 0.3}"
							duration=0.15
							killAll=true
							(bind enabled "!isMouseActive")
							(bind trigger "isMouseActive")
						)
						(bindcall play
							to	="{alpha: 1.0}"
							duration=0.15
							killAll=true
							(bind enabled "isMouseActive")
							(bind trigger "isMouseActive")
						)
					)
				)
				(style
					(bind alpha "isDragDropDisabled ? 0 : 1")
				)
			)

			# Config
			(element TT_ConfigButtonElement _modIndex = "15" _tooltipPosition="borderNoTrack"
				(style
					(bind left "isDragDropDisabled ? 0px : -30px")
				)
			)
		)
        (style
            (position = "absolute")
            (bind top "dragPosY")
            (bind left "dragPosX")
			# Set the transform origin to the right bottom
			(pivotX = 100%)
			(pivotY = 100%)

			(align = "right")
        )

        # Map / Kill Logs / RPF Chat Controller
		(element TMap_DeathLogContainer _userPrefsNum="_userPrefsNum")
		(element TMap_BattleMinimap _userPrefsNum="_userPrefsNum")
		
		(element TMap_RadioLocationChat _userPrefsNum="_userPrefsNum")
    )
)

# Custom
(def element TMap_NearbyRadarsWarning (_userPrefsNum:gfx=null) layout=true
	(scope
		(var collection:gfx = "$datahub.getCollection(CC.avatar)")
		(var enemyCollection:gfx = "collection ? collection.getChildByPath('team.enemy') : null" (event "collection.evChildAdded") (event "collection.evChildRemoved"))
		(var enemyItems:array = "enemyCollection ? enemyCollection.items : null" (event "enemyCollection.evAdded") (event "enemyCollection.evRemoved"))
		(var itemsLength:number = "enemyItems ? enemyItems.length : 0")

		#
		(var playerEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var selfHealthComponent:gfx = "playerEntity && playerEntity.hasComponent(CC.health) ? playerEntity.health : null" (event "playerEntity.evAdded"))
		(var isVisible:bool = "selfHealthComponent ? selfHealthComponent.isAlive : false" (event "selfHealthComponent.evIsAliveChanged"))

		# Ranges
		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, TMap_COMPONENT_KEY_CONSUMABLE_RANGES)")
		(var dataEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))
		(var dataComponent:gfx = "dataEntity ? dataEntity.mods_DataComponent : null")
		(var consumableData:dict = "dataComponent ? dataComponent.data : {}" (event "dataComponent.evDataChanged"))

		# tr
		(macro TT_GET_LANGUAGE_INDEX)
		(macro TT_GET_TRANSLATION _varName="'titleText'" _key="'IDS_TT_NEARBY_RADARS'")
		(macro TT_GET_TRANSLATION _varName="'noRadarText'" _key="'IDS_TT_NO_NEARBY_RADARS'")

		# Events for tracking element count
		(event evEnterRadarRange)
		(event evLeaveRadarRange)
		(var elementsCount:number = 0 watch=false)
		(bind elementsCount "elementsCount + 1" watch=false init=false (event "evEnterRadarRange"))
		(bind elementsCount "elementsCount - 1" watch=false init=false (event "evLeaveRadarRange"))

		# DD
		(macro STAGE_SIZE)
		(macro TMap_GET_SCALE_RATIO)
		(macro TT_GET_PREF_BOOL _varName="'isDragDropDisabled'"	_pref="TMap_PREFS.DISABLE_DRAG_DROP")
		(var defaultPos:dict = "{'positionX': stageWidth-scaleRatio-XS-170px, 'positionY': stageHeight - scaleRatio - XS}")
        (macro DRAGGABLE_GET_DROP_POSITION _elementName="'TTaroMinimapRadarWarning'" _defaultPosition="defaultPos")

		# Config
		(macro TT_GET_PREF_NUMBER _varName="'backgroundAlpha'"	_pref="TMap_PREFS.NEARBY_RADAR_ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'scale'"			_pref="TMap_PREFS.NEARBY_RADAR_SCALE")

		(event evHideInfotip)
		(event evOnButtonClicked)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(event evItemChooserOpened)
		(event evItemChooserClosed)
		(var isChooserOpen:bool = "false" watch=false)
		(bind isChooserOpen "true" watch=false init=false (event "evItemChooserOpened"))
		(bind isChooserOpen "false" watch=false init=false (event "evItemChooserClosed"))
	)

	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	(bind visible "isVisible")

	(block

		(style
			(position = "absolute")
			(bind top "dragPosY")
			(bind left "dragPosX")
			(width = 150px)
		)
		
		(block
			(style
				(width = 100%)
				(align = "middle|center")
				(bind scaleX "scale")
				(bind scaleY "scale")
			)

			(controller $Instance renderer='ModDraggableElement'
				(bind enabled "!isDragDropDisabled")
				(args
					_elementName="'TTaroMinimapRadarWarning'"
					_defaultPosition="defaultPos"
				)
			)

			(block
				(style
					(hitTest = false)
					(width = 100%)
					(align = "middle|center")
				)
				# BG
				(block
					(class $FullsizeAbsolute)
					(style
						(bind alpha "backgroundAlpha")
					)
					(block
						(class $FullsizeAbsolute)
						(style (backgroundImage = "'url:../service_kit/panel_backgrounds/hint_panel_high_contrast.png'") (scale9grid = 3))
					)
					(block
						(class $FullsizeAbsolute)
						(style (backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png') (scale9grid = 2) (alpha = 0.1))
					)
				)

				# Title
				(tf
					(class $TextDefaultBold17NM)
					(class $TextColorHUDWarningPC)
					(bind text "titleText")
					(style
						(marginTop = "10px + 2px")
					)
				)

				# Content
				(block
					(style
						(width = 100%)
						(marginBottom = "8px + 5px")
					)
					(block
						(style
							(width = 100%)
						)
						(controller $Repeat renderer='TMap_NearbyRadarItem' count = "itemsLength"
							(args _entities="enemyItems" _consumableData="consumableData" _userPrefsNum="_userPrefsNum")
							(bindcall removeChildAt "$event[1]" (event "enemyCollection.evRemoved"))
							(bindcall addChildAt "$event[1]" (event "enemyCollection.evAdded"))
						)
						(bind visible "elementsCount > 0")
					)
					(block
						(style
							(vgap = 8px)
							(align = "middle|center")
							(width = 100%)
							(marginTop = 8px)
						)
						(element HorizontalDividerTwoPx)

						(tf
							(class $TMap_NearbyRadarBoldText)
							(bind text "noRadarText")
						)
						
						(bind visible "elementsCount == 0")
					)
				)
			)
		)

		# Cfg
		(element ButtonSettingsSmall
			(bind visible "isMouseActive")
			(style
				(position = "absolute")
				(left = "-25px")
				(hitTest = true)
				(alpha = 0.7)
			)
			(controller $Tooltip
				(renderer='TMap_CustomPrefsInfotip')
				(args
					_prefs			= "[TMap_PREFS.NEARBY_RADAR_SCALE, TMap_PREFS.NEARBY_RADAR_ALPHA, TMap_PREFS.DISABLE_DRAG_DROP]"
					_isEnabled		= true
					_userPrefsNum	= "_userPrefsNum"
				)
				(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOnButtonClicked"))
				(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} (event "evHideInfotip"))
				(dispatch evHideInfotip args="{}" on='evClickOutside' (bind enabled "!isChooserOpen"))

				(priority=1)
				(align="left|middle")
				(position="border")
				(offset=[0, 0])
				(screenBoundsOffset={left:5, top:5, right:5, bottom:5})
			)
		)
	)
)

# Custom
(def element TMap_NearbyRadarItem (_entities:array, _consumableData:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		# Entity
		(var _markerEntity:gfx = "_entities[$index]" watch=false)
		
		# Radar Range
		(var avatarId:str = "_markerEntity.avatar ? toString(_markerEntity.avatar.id) : ''")
		
		(var consumableRanges:dict = "avatarId in _consumableData ? _consumableData[avatarId] : {}")
		(var radarRange:number = "'radar' in consumableRanges ? consumableRanges.radar.world : 0")

		(var isRadarShip:bool = "radarRange > 0")
	)

	(bind visible "isRadarShip")

	(style
		(hitTest = false)
		(width = 100%)
	)

	(controller $Instance renderer='TMap_NearbyRadar'
		(bind enabled "isRadarShip")
		(args _markerEntity="_markerEntity" _radarRange="radarRange" _userPrefsNum="_userPrefsNum")
	)

)

# Custom
(def element TMap_NearbyRadar(_markerEntity:gfx, _radarRange:number, _userPrefsNum:gfx=null) layout=true
	(scope
		# Events for parent
		(event evEnterRadarRange)
		(event evLeaveRadarRange)
		(event evUpdateDistance)

		# Timer
		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")

		# Map Size
		(var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var mapSize:number = "cameraComponent.visibilityRange / cameraComponent.visibilityRangePerc" watch=false)

		# Own Ship
		# Existence of mapPosition component is NOT guaranteed
		(var playerEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var ownShipMapPosComponent:gfx = "playerEntity.hasComponent(CC.mapPosition) ? playerEntity.mapPosition : null" (event "playerEntity.evAdded"))
		(var ownPosX:number = "ownShipMapPosComponent ? ownShipMapPosComponent.position.x : -1" watch=false (event "evUpdateDistance"))
		(var ownPosY:number = "ownShipMapPosComponent ? ownShipMapPosComponent.position.y : -1" watch=false (event "evUpdateDistance"))

		# Radar Range
		(var warnRange:number = "_radarRange + 2")

		# Alive
		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))

		# Ship Position
		# Existence of mapPosition component is NOT guaranteed because I'm iterating over CC.avatar
		(var shipPosComponent:gfx = "_markerEntity.hasComponent(CC.mapPosition) ? _markerEntity.mapPosition : null" (event "_markerEntity.evAdded"))
		(var shipPosX:number = "shipPosComponent ? shipPosComponent.position.x : -1" watch=false (event "evUpdateDistance"))
		(var shipPosY:number = "shipPosComponent ? shipPosComponent.position.y : -1" watch=false (event "evUpdateDistance"))

		# Calc
		(var isValidPos:bool = "ownShipMapPosComponent && shipPosComponent")
		(var posDiffX:number = "(ownPosX - shipPosX) * mapSize")
		(var posDiffY:number = "(ownPosY - shipPosY) * mapSize")

		(var distanceToShip:number = " sqrt( pow(posDiffX, 2) + pow(posDiffY, 2) ) " watch=false (event "evUpdateDistance"))
		# Use this instead of Distance Component
		# in order to avoid the situation where distance to ship becomes "incorrect" while using planes.

		(var isNearby:bool = "isValidPos && (distanceToShip < warnRange) && isAlive")
		(var isInRange:bool = "isValidPos && (_radarRange >= distanceToShip) && isAlive")

		# Shipdata
		(var shipEntity:gfx = "_markerEntity.avatar ? _markerEntity.avatar.ship.ref.ship : null")
		(var shipName:gfx = "shipEntity ? shipEntity.nameUpper : ''")
		(var subType:str = "shipEntity ? shipEntity.subtype : ''")
		(var shipType:str = "toLower(subType)")
		(var iconPath:str = "'icon_white_' + shipType")

		# Warning Color
		(var textRed:number = "isInRange ? 1 : 1" watch=false)
		(var textGreen:number = "isInRange ? 0.3 : 0.8" watch=false)
		(var textBlue:number = "isInRange ? 0.16 : 0.4" watch=false)
		(controller $Animation
			(bindcall play duration=0.25 to="{textRed:1,textGreen:0.3, textBlue:0.16}" watch=false init=false (bind enabled "isInRange"))
			(bindcall play duration=0.25 to="{textRed:1,textGreen:0.8,textBlue:0.4}" watch=false init=false (bind enabled "!isInRange"))
		)

		# Alpha Animation
		(var animatedAlpha:number = "isNearby ? 1.0 : 0" watch=false)
		(var animatedScale:number = "isNearby ? 1.0 : 0" watch=false)
		(controller $Animation
			(bindcall play
				from	 = "{animatedAlpha: 0, animatedScale: 2}"
				to		 = "{animatedAlpha: 1, animatedScale: 1}"
				easing	 = "Easing.quad_in"
				duration = "0.4"
				action	 = "killAll"
				watch	 = false
				(bind enabled "isNearby")
				(bind trigger "isNearby")
			)
			(bindcall play
				from	 = "{animatedAlpha: 1, animatedScale: 1}"
				to		 = "{animatedAlpha: 0, animatedScale: 2}"
				easing	 = "Easing.quad_out"
				duration = "0.4"
				action	 = "killAll"
				watch	 = false
				(bind enabled "!isNearby")
				(bind trigger "isNearby")
			)
		)
	)

	(dispatch evUpdateDistance args="{}" watch=false init=false (bind enabled "isAlive && isValidPos") (event "timer.evInfrequent"))

	(dispatch evEnterRadarRange args="{}" dir="EventDirection.UP" watch=false init=false on='addedToStage' (bind enabled "isNearby")  (bind trigger "isNearby"))
	(dispatch evLeaveRadarRange args="{}" dir="EventDirection.UP" watch=false init=false delay=0.4 (bind enabled "!isNearby") (bind trigger "isNearby"))

	(style
		(hitTest = false)
		(bind alpha "animatedAlpha")
		(bind visualScaleX "animatedScale")
		(bind visualScaleY "animatedScale")
		(pivotX = 50%)
		(pivotY = 50%)
		(width = 100%)
		(marginTop = 8px)
	)

	(bind visible "animatedAlpha > 0")

	(element HorizontalDividerTwoPx)

	(block
		(style
			(align = "middle|center")
			(marginTop = 8px)
			(width = 100%)
			(vgap = 5px)
		)
		
		# Ship Name
		(hblock
			(style
				(width = 100%)
				(align = "middle|center")
			)
			(block
				(style
					(bind backgroundImage "'url:../battle_hud/markers/ship/' + iconPath + '.png'")
					(width = "SHIP_ICON_SIZE.WIDTH")
					(height = "SHIP_ICON_SIZE.HEIGHT")
					(marginTop = "-S")
					(marginBottom = "-S")
					(marginLeft = "-XS")
					(scaleX = -1)
					(pivotX = 50%)
				)
			)
			(tf
				(class $TMap_NearbyRadarBoldText)
				(bind text "shipName")
				(style
					(maxWidth = 100%)
					(elideMode = true)
				)
			)
			(bind colorTransform "{redMultiplier:textRed,greenMultiplier:textGreen,blueMultiplier:textBlue}")
		)

		# Icon/Range
		(hblock
			(style
				(hgap = 5px)
				(align = "bottom|center")
			)
			
			(tf
				(class $TMap_NearbyRadarBoldText)
				(style
					(width = 30px)
					(textAlign = "right")
				)
				(bind text "formatFloatingPoint(_radarRange, 1)")
			)
			(tf
				(class $TMap_NearbyRadarSmallText)
				(text = "tr('IDS_KILOMETER')")
			)

			(tf
				(class $TMap_NearbyRadarSmallText)
				(style
					(width = 30px)
					(textAlign = "right")
				)
				(bind text "'(' + formatFloatingPoint(distanceToShip, 1)")
			)
			(tf
				(class $TMap_NearbyRadarSmallText)
				(text = "tr('IDS_KILOMETER') + ')'")
			)
		)
	)
)

# battle\minimap\minimap.unbound BattleMinimapUb2
(def element TMap_BattleMinimap(_userPrefsNum:gfx=null)
	(scope
		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		
		(var followVehicle:bool = "minimapEntity.minimap.followVehicle" (event "minimapEntity.minimap.evFollowVehicleChanged"))

		(var mouseComponent:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouseComponent.active" (event "mouseComponent.evActiveChanged"))

		(var minimapSizeIndexComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.minimapSizeIndex).minimapOption")
		(var scaleIndex:number = "minimapSizeIndexComponent.value" (event "minimapSizeIndexComponent.evValueChanged"))
		(var mapScale:number = "scaleIndex < LIST_MAP_SCALES.length ? LIST_MAP_SCALES[scaleIndex] : LIST_MAP_SCALES[LIST_MAP_SCALES.length - 1] + SCALE_STEP * (scaleIndex - LIST_MAP_SCALES.length + 1)")

		(event evMouseOverMap)
		(event evMouseOutMap)
		(event evMouseMoveMap)
		(event evMouseDownMap)

		(var mouseOverMap:bool = "$event.isOver" watch=false init=false (event "evMouseOverMap") (event "evMouseOutMap"))
		(var worldX:number = "$event.localX / $event.scaleRatio" watch=false init=false (event "evMouseMoveMap") (event "evMouseOverMap"))
		(var worldY:number = "$event.localY / $event.scaleRatio" watch=false init=false (event "evMouseMoveMap") (event "evMouseOverMap"))

		(var _isLoading:bool = false)
	)
	
	(bindcall externalCall 'direct.action' "['minimap.setMouseOver', [false]]" watch=false init=false (bind enabled "!isMouseActive"))
	(bindcall externalCall 'direct.action' "['minimap.setMouseOver', [mouseOverMap ? mouseOverMap && isMouseActive : false]]" watch=false init=false (bind trigger "mouseOverMap"))
	(bindcall externalCall 'direct.action' "['minimap.moveOnMinimap', [worldX, worldY]]" (event "evMouseMoveMap"))
	(bindcall externalCall 'direct.action' "['minimap.moveOnMinimap', [worldX, worldY]]" (event "evMouseOverMap"))
	(bindcall externalCall 'direct.action' "['minimap.moveOnMinimap', [-1, -1]]" (event "evMouseOutMap"))

	(controller $Instance
		# Mod
		(bind renderer "followVehicle	? 'MaskedMinimap'
										: 'TMap_FullMinimap'")
		(args
			_isLoading="_isLoading"
			_userPrefsNum="_userPrefsNum"
		)
		#
	)
	
	(dispatch evSwitchOptionsPanel args="{isVisible: false}" dir="EventDirection.DOWN" (event "evMouseDownMap") (bind trigger "mapScale"))

	(element TMap_MinimapOptionsButton
		(bind visible "!_isLoading")
		(style (position = "absolute") (right = "20px") (top = "-22px"))
	)
)

# battle/minimap/minimap.unbound
(def element TMap_FullMinimap (_isLoading:bool = false, _userPrefsNum:gfx = null) layout=true dispatch_size_change=true
	(scope
		(macro TMap_MINIMAP_SCOPE)
		(var angleToRotate:number = "minimapEntity.minimap.rotationAngleDeg" (event "minimapEntity.minimap.evRotationAngleDegChanged"))
		(var rotationAngle:number = "minimapEntity.minimap.rotationAngleDeg" watch=false)
		(controller $Animation
			(bindcall play  duration=0.3
							easing="Easing.line"
							from="{ rotationAngle: minimapEntity.minimap.rotationStartDeg }"
							to="{ rotationAngle: minimapEntity.minimap.rotationAngleDeg }"
							watch=false
							(event "minimapEntity.minimap.evRotationAngleDegChanged")
			)
		)
		(var coordsVisible:bool = "rotationAngle == angleToRotate")
	)

	(style
		(bind width "scaleRatio")
		(bind height "scaleRatio")
		(bind hitTest "!_isLoading")
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(bind top "scaleRatio / 2") 
			(bind left "scaleRatio / 2")
			(bind rotation "rotationAngle")
		)
		
		(block
			(class $FullsizeAbsolute)
			(style
				(bind top "-scaleRatio / 2")
				(bind left "-scaleRatio / 2")
			)
			
			(element TMap_MinimapBG _scaleRatio="scaleRatio" _mapScale="mapScale" _mapBorderScale="mapBorderScale" _mapBorderMarginX="mapBorderMarginX" _mapBorderMarginY="mapBorderMarginY" _isLoading="_isLoading" _userPrefsNum="_userPrefsNum"
				(scope
					(bind scaleRatio "scaleRatio")
					(bind mapScale "mapScale")
					(bind mapBorderScale "mapBorderScale")
					(bind mapBorderMarginX "mapBorderMarginX")
					(bind mapBorderMarginY "mapBorderMarginY")
				)
				(macro MASK)
			)

			(block
				(class $FullsizeAbsolute)
				(macro MASK)
				(style (hitTest = false))
				(element TMap_MinimapMarkersContainer
					_mapScale="mapScale"
					_itemScale="itemScale"
					_scaleRatio="scaleRatio"
					_markerSettingsMap="TMap_MINIMAP_MARKERS_SETTINGS"
					_isLoading="_isLoading"
					_userPrefsNum="_userPrefsNum"
				)
			)

			(block
				(class $FullsizeAbsolute)
				(style (backgroundColor = 0x01000000))

				(macro MINIMAP_CLICK_MASK_EVENTS "scaleRatio")
			)
		)
	)

	(element TMap_MinimapCoordLabels _scaleRatio="scaleRatio" _angleToRotate="angleToRotate" _mapScale="mapScale" _userPrefsNum="_userPrefsNum"
		(bind visible "coordsVisible")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapCoordLabels (_scaleRatio:number, _angleToRotate:number, _mapScale:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var coordMargin:number = "-4 - (_mapScale < 2 ? _mapScale : 2) * 3")

		(var letters:array = "[ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J' ]")
		(var digits:array = "[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]")

		(var currentVertical:array = "  _angleToRotate == 0 || _angleToRotate == 360	? letters :
										_angleToRotate == 90							? digits :
										abs(_angleToRotate) == 180						? letters.reversed
																						: digits.reversed")

		(var currentHorizontal:array = "_angleToRotate == 0 || _angleToRotate == 360	? digits :
										_angleToRotate == 90							? letters.reversed :
										abs(_angleToRotate) == 180						? digits.reversed
																						: letters")
	)

	(class $FullsizeAbsolute)

	(block
		(style (position = "absolute") (bind left "coordMargin"))
		(controller $Repeat renderer='TMap_MinimapCoordsLabel'
			(bind count "currentVertical.length")
			(args _height="_scaleRatio / 10" _value="currentVertical[$index]" _userPrefsNum="_userPrefsNum")
		)
	)

	(hblock
		(style (position = "absolute") (bind top "coordMargin"))
		(controller $Repeat renderer='TMap_MinimapCoordsLabel'
			(bind count "currentHorizontal.length")
			(args _width="_scaleRatio / 10" _value="currentHorizontal[$index]" _userPrefsNum="_userPrefsNum")
		)
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapCoordsLabel (_width:number=0, _height:number=0, _value:str='', _userPrefsNum:gfx=null) layout=true
	(style
		(bind width "_width")
		(bind height "_height")
		(align = "center|middle")
	)
	(tf
		(class $TextMinimapCoordsLabel)
		(bind text "_value")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapBG (_scaleRatio:number, _mapScale:number, _mapBorderScale:number, _mapBorderMarginX:number, _mapBorderMarginY:number, _showGrid:bool = true, _isLoading:bool = false, _userPrefsNum:gfx = null) layout=true
	(scope
		(var scaleRatio:number = "_scaleRatio")
		(var mapScale:number = "_mapScale")
		(var mapBorderScale:number = "_mapBorderScale")
		(var mapBorderMarginX:number = "_mapBorderMarginX")
		(var mapBorderMarginY:number = "_mapBorderMarginY")

		(var battleDataEntityCollection:gfx = "$datahub.getCollection(CC.battleData)")
		(var battleDataEntity:gfx = "battleDataEntityCollection.items[0]")
		(var mapEntity:gfx = "$datahub.getPrimaryEntity(CC.mapInfo, battleDataEntity.battleInfo.mapId)")

		(var waterAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.waterAlpha).minimapOption")
		(var waterAlpha:number = "_isLoading ? 1 : waterAlphaComponent.value * 0.01" (event "waterAlphaComponent.evValueChanged"))

		(var minimapComponent:gfx = "$datahub.getSingleComponent(CC.minimap)")

		# Mod
		(macro TT_GET_PREF_BOOL	_varName="'isBlurEnabled'"		_pref="TMap_PREFS.USE_BLUR")
		(macro TT_GET_PREF_NUMBER _varName="'blurIntensity'"		_pref="TMap_PREFS.BLUR_INTENSITY")

		(macro TT_GET_PREF_NUMBER _varName="'gradientType'"		_pref="TMap_PREFS.GRADIENT_BACKGROUND_MODE")
		(var gradientIndex:number = "gradientType < TMap_GRADIENT_MASKS.length ? gradientType : 0")
		(var gradientMasks:dict = "TMap_GRADIENT_MASKS[gradientIndex]")
		(var gradientPathBase:str = 'url:../ttaro_minimap/map_background/')
		(var gradientIslandMask:str = "gradientPathBase + gradientMasks.island")
		(var gradientWaterMask:str = "gradientPathBase + gradientMasks.water")
		#
	)

	(class $FullsizeAbsolute)

	# Mod
	(controller $Instance renderer='TMap_BackgroundBlur'
		(bind enabled "isBlurEnabled")
		(args _blurIntensity="blurIntensity")
		(exprs
			(style
				(zindex = "ZIndex.BACKGROUND")
				(hitTest = false)
			)
		)
	)
	#

	# Mod
	(block
		(bind alpha "waterAlpha")
		(style
			(backgroundSize = "fill")
			(bind backgroundImage "'url:' + mapEntity.mapInfo.minimapWaterPath")
			(position = "absolute")
			(bind width "scaleRatio") 
			(bind height "scaleRatio") 
		)
		(blendMode = 'layer')
		(block
			(style
				(backgroundSize = "fill")
				(bind backgroundImage "gradientWaterMask")
				(width = 100%)
				(height = 100%)
			)
			(blendMode = 'alpha')
		)(tf)
		#
		# This textfield fixes all the bug with blendMode = layer
		# Without this marverous savior, the target images (sea and terrain) will RANDOMLY dissapear, completely messing up the alpha blend.
		# How random? It depends on the computer or OS or GPU memory or whatever cursed cause, and the reproducibility is not high.
		# (block) doesn't work, unlike (tf). It could be related to Sprite/Style/Layout system, could be not.
		# Praise Flash and Action Script 3, and let us pray...
		#
		#       /\  
		#      /**\  
		#     /****\    /\  
		#    /      \  /**\   In this house...
		#   /  []  []\/****\  We build UI with Action Script...
		#  /_________/      \ 
		#   |  _  _  |  []  | 
		#   | | || | |      |  
		#   | | || | |  []  |  
		#   | | || | |      |  
		#   | | || | |______|  
		#   |_|_||_|_|______| 
		#
	)
	#

	(block
		(style
			(position = "absolute")
		)
		(controller $Instance renderer='DrawBoundRect' 
			(args x = "-2" y = "-2" width = "scaleRatio + 2" height = "scaleRatio + 2" color = "0x525869" filled="false" line="2" alpha="1")
			(bindcall recreate (bind trigger "scaleRatio"))
			(bind enabled "!_showGrid")
		)
	)

	# Mod
	(block
		(class $FullsizeAbsolute)
		(style
			(backgroundSize = "cover")
			(bind backgroundImage "'url:' + mapEntity.mapInfo.minimapPath")
			(bind width "scaleRatio * mapBorderScale")
			(bind height "scaleRatio * mapBorderScale")
			(bind left "mapBorderMarginX * mapBorderScale")
			(bind top "mapBorderMarginY * mapBorderScale")
		)
		(blendMode = 'layer')
		(block
			(style
				(backgroundSize = "fill")
				(bind backgroundImage "gradientIslandMask")
				(width = 100%)
				(height = 100%)
			)
			(blendMode = 'alpha')
		)(tf)
	)
	#

	# Mod
	(controller $Repeat renderer='TMap_MinimapGridVertical' count=10
		(args _scaleRatio = "scaleRatio" _userPrefsNum="_userPrefsNum")
		(bind enabled "_showGrid")
	)
	(controller $Repeat renderer='TMap_MinimapGridHorizontal' count=10
		(args _scaleRatio = "scaleRatio" _userPrefsNum="_userPrefsNum")
		(bind enabled "_showGrid")
	)
	
	(controller $FxInstance renderer='TMap_MinimapRectAttention' lifetime="LONG_ATTENTION_DURATION"
		(bindcall create (event "minimapComponent.evRectAttention"))
		(args _scaleRatio = "scaleRatio" row="$event[1]" column="$event[2]" idPlayer="$event[3]" _userPrefsNum="_userPrefsNum")
	)

	
	(controller $FxInstance renderer='TMap_MinimapRectAttentionOld' lifetime="LONG_ATTENTION_DURATION"
		(bindcall create (event "minimapComponent.evRectAttentionOld"))
		(args _scaleRatio = "scaleRatio" row="$event[1]" column="$event[2]" idPlayer="$event[3]" _userPrefsNum="_userPrefsNum")
		(exprs
			(macro BIND_FAIR_SCALE "mapScale")
		)
	)

	 
	(controller $FxInstance renderer='TMap_MinimapPointAttention' lifetime="SHORT_ATTENTION_DURATION"
		(bindcall create (event "minimapComponent.evPointAttention"))
		(args _scaleRatio = "scaleRatio" worldX="$event[1]" worldY="$event[2]" type="$event[3]" anim="$event[4]" _userPrefsNum="_userPrefsNum")
		(exprs
			(macro BIND_FAIR_SCALE "mapScale")
		)
	)
	#
)

# Custom
(def element TMap_BackgroundBlur(_blurIntensity:number = 0.3)
	(class $FullsizeAbsolute)
	(mc mc_blurmap_medium
		(class $FullsizeAbsolute)
		(rendererString = blurMeBaby)
		(controller $Animation
			(bindcall play  duration="0.0001"
							to	 = "{ blurIntensity: _blurIntensity }"
							watch=false
							init=true
							(bind trigger "_blurIntensity")
			)
		)
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapMarkersContainer (_mapScale:number, _itemScale:number, _scaleRatio:number, _markerSettingsMap:array, _isLoading:bool = false, _userPrefsNum:gfx = null) layout=true
	(scope
		(var markersCollection:gfx = "$datahub.getCollection(CC.minimapMarker)")
		(var availableMarkers:gfx = "markersCollection.getChildByPath('available')")
	)

	(class $FullsizeAbsolute)

	# Mod
	(element SM_MapSmokeMarkersContainer "_mapScale" "_itemScale" "_scaleRatio")
	#

	(controller $Repeat renderer='TMap_MapMarkerItem'
		(bind count "availableMarkers.items.length" watch=false (event "availableMarkers.evAdded"))
		(bindcall removeChildAt "$event[1]" (event "availableMarkers.evRemoved"))
		(args "availableMarkers" "_mapScale" "_itemScale" "_scaleRatio" "_markerSettingsMap" "_isLoading" _userPrefsNum="_userPrefsNum")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapRectAttention (_scaleRatio:number, row:number, column: number, idPlayer:number, _userPrefsNum:gfx=null) layout=true
	(controller $Animation
		(play
			duration = 0.9
			keyframes="[
				{percent:0, to:{alpha:0}},
				{percent:50, to:{alpha:0.2}, easing:Easing.line},
				{percent:100, to:{alpha:0}, easing:Easing.line}
			]"
			repeatCount = 4
		)
	)
	
	(style
		(position = "absolute")
		(bind top "(_scaleRatio * 0.1 * row) + 0.5")
		(bind left "(_scaleRatio * 0.1 * column) + 0.5")
		
		(backgroundColor = 0xFF00fff6)
		(bind width "1 * _scaleRatio * 0.1")
		(bind height "1 * _scaleRatio * 0.1")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapRectAttentionOld (_scaleRatio:number, row:number, column: number, idPlayer:number, _userPrefsNum:gfx = null) layout=true
	(scope
		(var scaleRatio:number = "_scaleRatio")
	)
	(style
		(position = "absolute")
		(bind top "scaleRatio * 0.1 * (row + 0.5)")
		(bind left "scaleRatio * 0.1 * (column + 0.5)")
		(bind backgroundImage "'symbol:minimap_rect_attention'")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapGridVertical (_scaleRatio:number=0, _userPrefsNum:gfx=null) layout=true
	(style 
		(position = "absolute")
		(width = "1px")
		(height = "100%")
		(backgroundColor = "0x10ffffff")
		(bind left "_scaleRatio * 0.1 * ( $index )")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapGridHorizontal (_scaleRatio:number=0, _userPrefsNum:gfx=null) layout=true
	(style 
		(position = "absolute")
		(width = "100%")
		(height = "1px")
		(backgroundColor = "0x10ffffff")
		(bind top "_scaleRatio * 0.1 * ( $index )")
	)
)

# battle/minimap/minimap.unbound
(def element TMap_MinimapPointAttention (_scaleRatio:number, worldX:number, worldY: number, type:number, anim:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var customRad:number = "14")
		(var customAlpha:number = "0")
		(var isReversed:bool = "anim == SC.Battle.MINIMAP_ATTENTION_APPEARANCE.SENDER")
		(var pointColor:number = "	type == SC.Battle.MINIMAP_ATTENTION_VALUE.COMMON			? 0xFFFFFFFF :
									type == SC.Battle.MINIMAP_ATTENTION_VALUE.COMMON_ALLY		? C_ALLY :
									type == SC.Battle.MINIMAP_ATTENTION_VALUE.COMMON_ENEMY		? C_ENEMY :
									type == SC.Battle.MINIMAP_ATTENTION_VALUE.SPOTTED			? C_ATTENTION
																								: 0xFFFFFFFF")
		(controller $Animation
			(play
				duration = "POINT_ATTENTION_ANIM_DURATION"
				to = { customRad: 5, customAlpha: 1}
				from = { customRad: 16, customAlpha: 0}
				delay = 0
				easing = "Easing.line"
				repeatCount = 1
				reverse = "isReversed"
			)
		)
	)

	(style
		(position = "absolute")
		(bind alpha "customAlpha")
		(bind top "_scaleRatio * worldY")
		(bind left "_scaleRatio * worldX")
	)

	(controller $Sector
		(bind arc "360")
		(bind radius "customRad")
		(bind innerRadius "0")
		(bind colors "[pointColor, pointColor, pointColor]")
		(bind alphas "[0, 0.5, 0]")
		(bind ratios "[175, 215, 255]")
	)
)

# battle/minimap/markers/base_marker.unbound
(def element TMap_MapMarkerItem (_collection:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _markerSettingsMap:array = "TMap_MINIMAP_MARKERS_SETTINGS", _isLoading:bool = false, _userPrefsNum:gfx = null) layout=true
	(scope
		(event evMarkerUpdate)

		(var markerScale:number = "_itemScale / _mapScale")
		(var markerSettingsMap:array = "_markerSettingsMap")

		(var _markerEntity:gfx = "_collection.items[$index]" watch=false)
		
		(macro GET_MARKER_ENTITY_COMPONENT 'minimapMarker')
		(macro GET_MARKER_ENTITY_COMPONENT 'mapPosition')

		(var posX:number = "mapPositionComponent ? _scaleRatio * mapPositionComponent.position.x : 0" init=false watch=false (event "evMarkerUpdate"))
		(var posY:number = "mapPositionComponent ? _scaleRatio * mapPositionComponent.position.y : 0" init=false watch=false (event "evMarkerUpdate"))

		(var posZ:number = "minimapMarkerComponent ? minimapMarkerComponent.zindex : 0" (event "minimapMarkerComponent.evZindexChanged"))

		(var type:number = "_markerEntity && _markerEntity.entityType ? _markerEntity.entityType.value : -1" (event "_markerEntity.evAdded") (event "_markerEntity.evRemoved"))
		(var markerSettings:dict = "type != -1 ? markerSettingsMap[type] : STUB_MINIMAP_MARKER_SETTINGS")
		(var markerUpdatePos:bool = "!(markerSettings.disableUpdatePos)")
		(var rotateBack:bool = "markerSettings.rotateBack")

		(var target:gfx = "_markerEntity.target" (event "_markerEntity.evAdded") (event "_markerEntity.evRemoved"))
		(var targetFlags:number = "target ? target.flags : 0" (event "target.evChanged") (event "target.evFlagsChanged"))
		(var isTargetLocked:bool = "(targetFlags & LOCKABLE_WEAPONS) > 0")

		(var mapVisible:bool = "_markerEntity.visibility ? _markerEntity.visibility.mapVisible : false" (event "_markerEntity.visibility.evChanged"))

		(var minimapComponent:gfx = "$datahub.getSingleComponent(CC.minimap)")
		(var angleToRotate:number = "minimapComponent.rotationAngleDeg" (event "minimapComponent.evRotationAngleDegChanged"))

		(var scenarioTag:gfx = "_markerEntity.scenarioTag" (event "_markerEntity.evAdded") (event "_markerEntity.evRemoved"))

		(var avatarEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isAlive:bool = "avatarEntity.health && avatarEntity.health.isAlive" (event "avatarEntity.health.evIsAliveChanged"))
		(var hideOnDeath:bool = "markerSettings.hideOnDeath")
	)

	(dispatch evMarkerUpdate args={} (event "evEnterFrame") (bind enabled "markerUpdatePos"))

	(style
		(position = "absolute")
		(bind left "posX")
		(bind top "posY")
		(bind zindex "posZ")
		(bind rotation "-angleToRotate" (bind enabled "rotateBack"))
	)

	(macro BIND_FAIR_SCALE "markerUpdatePos ? _mapScale : 1")

	# Mod
	(block
		(controller $Instance (renderer = 'TMap_MapMarkerScenarioTag')
			(bind enabled "scenarioTag != null")
			(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			(exprs
				(macro BIND_FAIR_SCALE "markerScale")
			)
		)
	)

	
	(block
		(style (position = "absolute"))
		(controller $FxInstance renderer='TMap_MapMarkerItemQCAnim' lifetime="QUICK_COMMAND_ANIM_LIFETIME"
			(bindcall create (event "_markerEntity.quickCommand.evPlay"))
			(args _type="$event[1]" _userPrefsNum="_userPrefsNum")
		)
	)
	(bind visible "isAlive" (bind enabled "hideOnDeath"))
	
	(block
		(controller $Instance (bind renderer "markerSettings.markerRenderer")
			(args _markerEntity="_markerEntity" _mapScale="_mapScale" _itemScale="_itemScale" _scaleRatio="_scaleRatio" _userPrefsNum="_userPrefsNum")
			(exprs
				(scope
					(bind _isLoading "_isLoading")
				)
			)
		)
	)

	(block
		(style (position = "absolute"))
		(controller $Instance (renderer = 'TMap_MapMarkerItemAimTargetLock')
			(args _userPrefsNum="_userPrefsNum")
			(bind enabled "isTargetLocked && mapVisible")
			(exprs
				(macro BIND_FAIR_SCALE "markerScale")
			)
		)
	)
	#
)

# battle\minimap\markers\scenario_marker.unbound
(def element TMap_MapMarkerScenarioTag (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(var ownerHealth:gfx = "_markerEntity.health")
		
		(var isAlive:bool = "ownerHealth ? _markerEntity.health.isAlive : true" (event "_markerEntity.health.evIsAliveChanged"))

		(macro GET_SCENARIO_OBJECT_VIEW "_markerEntity.scenarioTag" "_markerEntity")
		(var circleSettings:dict = "SCENARIO_TAGS_CIRCLE_COLORS[type]")

		(event evShow)
	)
	(dispatch evShow on=addedToStage)

	(bind visible "isAlive")
	(bind alpha "circleSettings.alpha")
	(style (position = "absolute"))

	(block
		(controller $Sector
			(bind arc "360")
			(bind color "circleSettings.color")
			(bind radius "12")
		)

		(controller $Animation		
			(bindcall  play
				duration=0.3
				from={alpha: 0, scaleX: 0, scaleY: 0}
				to={alpha: 1, scaleX: 1, scaleY: 1}
				easing="Easing.quint_in"
				(event "evShow")
			)
		)	
	)
)

# battle\minimap\markers\base_marker.unbound
(def element TMap_MapMarkerItemQCAnim (_type:str, _userPrefsNum:gfx=null) layout=true
	(scope
		(var lifetime:number = "_type == 'Submarine_Ping_CMD' ? SUBMARINE_PING_ANIM_LIFETIME : QUICK_COMMAND_ANIM_LIFETIME")
	)
	(style 
		(position = "absolute")
		(bind backgroundImage "isIn(_type, ['Target_CMD', 'Submarine_Ping_CMD']) ? 'symbol:TargetMinimap' : 'symbol:SenderMinimap'")
	)

	(controller $Animation
		(play
			duration=0.15
			from={alpha: 0}
			to={alpha: 1}
			easing="Easing.quint_in"
		)

		(play
			duration=0.15
			delay="lifetime-0.15"
			from={alpha: 1}
			to={alpha: 0}
			easing="Easing.quint_out"
		)
	)
)

# battle\minimap\markers\base_marker.unbound
(def element TMap_MapMarkerItemAimTargetLock (_userPrefsNum:gfx=null) layout=true
	(style (position = "absolute"))
	(bind alpha 0.5)

	(block
		(style
			(position = "absolute")
			(bind backgroundImage "'symbol:minimap_target_lock'")
		)
				
		(controller $Animation
			(play 
				duration=0.2
				from={scaleX:2, scaleY:2, alpha:0}
				to={scaleX: 1, scaleY: 1, alpha:1}
			)
		)
	)
)

# battle\minimap\markers\ship_marker.unbound
(def element TMap_MapShipMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var isPlayerAvatar:bool = "_markerEntity.hasComponent(CC.playerAvatar)")
		(var isAlive:bool = "_markerEntity.health ? _markerEntity.health.isAlive : false" (event "_markerEntity.health.evIsAliveChanged"))

		(var target:gfx = "_markerEntity.target" (event "_markerEntity.evAdded") (event "_markerEntity.evRemoved"))
		(var targetFlags:number = "target ? target.flags : 0" (event "target.evChanged"))
		(var isTargetLocked:bool = "(targetFlags & LOCKABLE_WEAPONS) > 0")

		(var mapVisible:bool = "_markerEntity.visibility ? _markerEntity.visibility.mapVisible : false" (event "_markerEntity.visibility.evChanged"))
		(var worldVisible:bool = "_markerEntity.visibility ? _markerEntity.visibility.visible : false" (event "_markerEntity.visibility.evChanged"))

		(var markerYaw:number = "radToGrad(_markerEntity.mapPosition.yaw)" (event "evEnterFrame"))
		(var markerScale:number = "_itemScale / _mapScale")

		(macro SCOPE_IS_BATTLE_IN_PROGRESS "'isBattleInProgress'")
		(macro GET_BOT_CUSTOMIZATION_TAG_COMPONENT "_markerEntity") 

		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		(var minimapComponent:gfx = "minimapEntity.minimap")
		(var angleToRotate:number = "minimapComponent ? minimapComponent.rotationAngleDeg : 0" (event "minimapComponent.evRotationAngleDegChanged"))

		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))
		
		# Mod
		(macro TMap_GET_ALT_VISION)

		(var shipNamesDisplayModeComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.shipNamesDisplayEnabled).minimapOption")
		(var shipNamesDisplayMode:number = "shipNamesDisplayModeComponent.value" (event "shipNamesDisplayModeComponent.evValueChanged"))
		(macro TMap_GET_DISPLAY_MODE _varName="'isShipNameVisible'" _prefValue="shipNamesDisplayMode")

		(var avatarId:str = "_markerEntity.hasComponent(CC.avatar) ? toString(_markerEntity.avatar.id) : ''")
		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, TMap_COMPONENT_KEY_CONSUMABLE_RANGES)")
		(var dataEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))
		(var dataComponent:gfx = "dataEntity ? dataEntity.mods_DataComponent : null")
		(var consumableData:dict = "dataComponent ? dataComponent.data : {}" (event "dataComponent.evDataChanged"))
		(var consumableRanges:dict = "avatarId in consumableData ? consumableData[avatarId] : {}")
		#

		(macro SCOPE_HIGHLIGHT_MARKER_ON_MAP_MOUSE_OVER "_markerEntity")

		(var relationComponent:gfx = "_markerEntity ? _markerEntity.relation : null")
		(var isAlly:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ALLY" (event "relationComponent.evChanged"))
		(var isSelf:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.SELF" (event "relationComponent.evChanged"))

		# Mod
		(var isEnemy:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ENEMY" (event "relationComponent.evChanged"))

		# Show Dead
		(macro TT_GET_PREF_NUMBER _varName="'deadDisplayMode'" _pref="TMap_PREFS.SHOW_DEAD")
		(macro TMap_GET_DISPLAY_MODE _varName="'isDeadVisible'" _prefValue="deadDisplayMode")

		# Player Name
		(macro TT_GET_PREF_NUMBER _varName="'playerNameDisplayMode'" _pref="TMap_PREFS.PLAYER_NAME_DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isPlayerNameVisible'" _prefValue="playerNameDisplayMode")

		# Directional Line
		(macro TT_GET_PREF_NUMBER _varName="'dirEnemyShipDisplayMode'" _pref="TMap_PREFS.DIRECTION_SHIPS")
		(macro TMap_GET_DISPLAY_MODE _varName="'isDirEnemyShipVisible'" _prefValue="dirEnemyShipDisplayMode")
		(var isEnemyDirVisible:bool = "isDirEnemyShipVisible && !(isAlly || isSelf) ")

		# Detection Icon
		(macro TT_GET_PREF_BOOL _varName="'isDetectionVisible'" _pref="TMap_PREFS.DETECTION")

		# Nearby AA
		(macro TT_GET_PREF_BOOL _varName="'isNearbyAAVisible'" _pref="TMap_PREFS.NEARBY_AA.VISIBLE")

		(macro IS_ON_PLANE)
		#
	)

	# Mod

	# Consumables
	(block
		(style
			(position = "absolute")
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerConsumableRanges')
				(bind enabled "!(isPlayerAvatar) && isAlive && isAlly")
				(args _markerEntity="_markerEntity" _consumableRanges="consumableRanges" _userPrefsNum="_userPrefsNum")
			)
		)
	)

	# Enemy Consumables
	(block
		(style
			(position = "absolute")
		)
		(controller $Instance renderer='TMap_MapMarkerEnemyConsumableRanges'
			(bind enabled "!(isPlayerAvatar) && isAlive && !isAlly")
			(args _markerEntity="_markerEntity" _consumableRanges="consumableRanges" _userPrefsNum="_userPrefsNum")	
		)
	)

	# Non-Player Ranges
	(block
		(style
			(position = "absolute")
		)
		(controller $Instance renderer='TMap_MapMarkerNonPlayerRanges'
			(bind enabled "!(isPlayerAvatar) && isAlive")
			(args _markerEntity="_markerEntity" _isAlly="isAlly" _userPrefsNum="_userPrefsNum")	
		)
	)

	# Nearby AA
	(block
		(style
			(position = "absolute")
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerNearbyAntiAir')
				(bind enabled "!(isPlayerAvatar) && isAlive && !isAlly && isOnPlane && isNearbyAAVisible")
				(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
	)

	# RPF
	(block
		(style
			(position = "absolute")
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerRadioLocationSector')
				(bind enabled "isAlive && (isAlly || isSelf)")
				(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
	)

	# Detection
	(block
		(style
			(position = "absolute")
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerDetectionIcon')
				(bind enabled "!(isPlayerAvatar) && isAlive && isAlly && isDetectionVisible")
				(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			)
			
		)
	)
	#

	# Smoke Penalty
	(block
		(style
			(position = "absolute")
		)
		(block
			(controller $Instance (renderer='TMap_MapMarkerSmokePenaltyRange')
				(bind enabled "isPlayerAvatar && isAlive && !isOnPlane")
				(args _markerEntity="_markerEntity" _mapScale="_mapScale" _userPrefsNum="_userPrefsNum")
			)
		)
	)
	#

	(block
		(style
			(position = "absolute")
		)
		(controller $Instance (renderer = 'TMap_MapMarkerDirectionalLine')
			# Mod
			(bind enabled "(isPlayerAvatar || isTargetLocked || isEnemyDirVisible) && isAlive && mapVisible && isBattleInProgress")
			(args _isFullSize="isTargetLocked || isPlayerAvatar" _isSelf="isSelf" _isShip="true" _userPrefsNum="_userPrefsNum")
			#
			(exprs
				(style
					(bind rotation "markerYaw")
					(bind alpha "rangesAlpha")
				)
			)
		)
	)

	(block
		(style
			(position = "absolute")
		)
		(controller $Instance (renderer = 'TMap_MapMarkerRanges')
			(bind enabled "isPlayerAvatar && isAlive")
			(args entity="_markerEntity" mapScale="_mapScale" _userPrefsNum="_userPrefsNum")
		)
	)

	(block
		(style
			(position = "absolute")
		)

		(macro EFFECT_HIGHLIGHT_MARKER_ON_MOUSE_OVER)
		(element TMap_MapMarkerShipIcon
			_markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum"
			(style (bind rotation "tagPrefix ? 0 : markerYaw"))
			(macro BIND_FAIR_SCALE "markerScale")
		)
	)

	# Player Name
	(block
		(style
			(position = "absolute")
			(pivotY = 16)
			(bind rotation "-(angleToRotate)")
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerPlayerName')
				(bind enabled "!(isPlayerAvatar) && (isAlive || isDeadVisible) && isPlayerNameVisible")
				(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
		(macro BIND_FAIR_SCALE "markerScale")
	)
	#

	# Mod
	(block
		(style
			(position = "absolute")
			(pivotY = -8)
			(bind rotation "-(angleToRotate)")
			# Mod
			(align = "top|center")
			#
		)
		# Ship Name
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerShipName')
				(bind enabled "!(isPlayerAvatar) && (isAlive || isDeadVisible) && isShipNameVisible")
				(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
		# Last Spot
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerShipLastSpottedTimer')
				(bind enabled "!(isPlayerAvatar) && isAlive && !isAlly")
				(args _markerEntity="_markerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
		# Health
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerHealthItem')
				(bind enabled "!(isPlayerAvatar) && isAlive && (isAlly || isEnemy)")
				(args _markerEntity="_markerEntity" _isAlly="isAlly" _userPrefsNum="_userPrefsNum")
			)
		)
		#
		(macro BIND_FAIR_SCALE "markerScale")
	)
	#
)

# battle\minimap\markers\ship_marker.unbound
(def element TMap_MapMarkerDirectionalLine (_isFullSize:bool=false, _isSelf:bool=false, _isShip:bool=false, _userPrefsNum:gfx=null) layout=true
	(scope
		(var colorPrefKey:str = "_isShip ? 'DIRECTION_SHIPS_COLOR_INDEX' : 'DIRECTION_SQUADRONS_COLOR_INDEX'")
		(var scalePrefKey:str = "_isShip ? 'DIRECTION_SHIPS_SCALE' : 'DIRECTION_SQUADRONS_SCALE'")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndexPref'" _pref="TMap_PREFS[colorPrefKey]")
		(macro TT_GET_PREF_NUMBER _varName="'sizeScalePref'" _pref="TMap_PREFS[scalePrefKey]")

		(var colorIndex:number = "colorIndexPref < TMap_RANGE_COLORS.ALL.length ? colorIndexPref : 0")
		(var colorName:str = "TMap_RANGE_COLORS.ALL[colorIndex]")
		(var color:number = "TMap_RANGE_COLORS[colorName]")
		(var isDefaultColor:bool = "_isSelf || (colorIndex == TMap_PREFS.DIRECTION_SHIPS_COLOR_INDEX.default)")
		
		(macro TMap_GET_RGB _hexValue="color")
		(var ct:dict = "isDefaultColor	? {}
										: {redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:1.5,redOffset:red,greenOffset:green,blueOffset:blue,alphaOffset: 0}"
		)

		(var sizeScale:number = "_isFullSize ? 1.0 : sizeScalePref")
	)
	# Enclose the block so that the expr.style.alpha affects properly
	(block
		(style
			(position = "absolute")
			(backgroundImage = "'symbol:minimap_direction_line'")
			(bind scaleY "sizeScale")
			(bind scaleX "isDefaultColor ? 1.0 : 2.0")
		)
		(bind colorTransform "ct")
	)
)

# battle\minimap\markers\base_marker.unbound
(def element TMap_MapMarkerRanges (entity:gfx, mapScale:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var minimapRangesCollection:gfx = "$datahub.getCollection(CC.minimapRange)")
		(var minimapRanges:gfx = "minimapRangesCollection.getChildByPath('byEntity.' + entity.id + '.active.sorted')")
		(var itemCount:number = "minimapRanges ? minimapRanges.items.length : 0"  watch=false (event "minimapRanges.evAdded"))
	)
	# Mod
	(controller $Repeat renderer='TMap_MapMarkerItemRange'
		(bind count "itemCount")
		(bindcall removeChildAt "$event[1]" (event "minimapRanges.evRemoved"))
		(bindcall addChildAt "$event[1]" (event "minimapRanges.evAdded"))
		(args "entity" "mapScale" "minimapRanges" _userPrefsNum="_userPrefsNum")
	)
	#
)

# battle\minimap\markers\base_marker.unbound
(def element TMap_MapMarkerItemRange (ownerEntity:gfx, _mapScale:number, _minimapRanges:gfx, _userPrefsNum:gfx=null) layout = true
	(scope
		(var rangesTextScale:number = "_mapScale > 1 ? 1 / _mapScale : 1")

		(var rangeEntity:gfx = "_minimapRanges.items[$index]" (event "_minimapRanges.evUpdated"))
		(var parameterKey:str = "rangeEntity.minimapRange.parameterKey")
		(var isConsumable:bool = "rangeEntity.minimapRange.isConsumable")
		(var isActive:bool = "rangeEntity.minimapRange.isActive || isConsumable" (event "rangeEntity.minimapRange.evIsActiveChanged"))
		(var rangeSettings:dict = "TMap_MINIMAP_RANGES_SETTINGS[parameterKey]")

		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		(var angleToRotate:number = "minimapEntity.minimap.rotationAngleDeg" (event "minimapEntity.minimap.evRotationAngleDegChanged"))
		
		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))

		(var distanceDisplayEnabledComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.distanceDisplayEnabled).minimapOption")
		(var distanceDisplayEnabled:bool = "distanceDisplayEnabledComponent.value > 0" (event "distanceDisplayEnabledComponent.evValueChanged"))

		(var rangeOptionsEnabledComponent:gfx = "rangeSettings.optionName	? $datahub.getPrimaryEntity(CC.minimapOption, rangeSettings.optionName).minimapOption
																			: null")
		(var rangeOptionsEnabled:bool = "rangeOptionsEnabledComponent ? rangeOptionsEnabledComponent.value > 0 : rangeSettings.forceEnabled" (event "rangeOptionsEnabledComponent.evValueChanged"))

		# Mod
		(var prefName:str = "'prefName' in rangeSettings ? rangeSettings.prefName : 'FAKE'")
		(var prefs:dict = "TMap_PREFS[prefName]")

		(macro TT_GET_PREF_NUMBER	_varName="'globalDisplayMode'"		_pref="prefs.DISPLAY_MODE")
		(var useIndividualShipPref:bool = "globalDisplayMode == TMap_DISPLAY_MODES.ADAPTIVE")
		(var globalVisiblity:bool = "globalDisplayMode == TMap_DISPLAY_MODES.ENABLE ? true : false")
		(var isRangeVisible:bool = "useIndividualShipPref ? rangeOptionsEnabled : globalVisiblity")

		(var rangeEnabled:bool = "isRangeVisible || rangeSettings.forceEnabled")
		#

		(var range:number = "rangeEntity.circle.radius" (event "rangeEntity.circle.evRadiusChanged"))
		(var rangeRadius:number = "range" watch=false)
		(controller $Animation
			(bindcall play  duration=0.3
							easing="Easing.line"
							to="{ rangeRadius: range }"
							watch=false
							(bind trigger "range")
							(bind enabled "rangeEnabled")
			)
		)

		
		(var rangeCurrentValue:number = "rangeEntity.parameter.currentValue" (event "rangeEntity.parameter.evChanged"))
		(var rangeValue:str = "formatFloatingPoint(round(rangeCurrentValue * 10) / 10, 1)")
		(var position:gfx = "ownerEntity.mapPosition.position")

		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var posX:number = "position.x" (event "timer.evInfrequent"))
		(var posY:number = "position.y" (event "timer.evInfrequent"))

		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))

		(var offsetAngle:number = "RANGES_TEXT_ANGLE / _minimapRanges.items.length" watch=false)
		(var rangeRotation:number = "(distanceDisplayEnabled || altVision) 	? (offsetAngle * (0 - _minimapRanges.items.length / 2 + $index)) + atan2(0.5 - posY, 0.5 - posX) 
																			: 0")

		# Mod
		(macro TT_GET_PREF_BOOL	_varName="'isThicknessFixed'"		_pref="TMap_PREFS.RANGE_OUTLINE_FIX")

		(macro TT_GET_PREF_BOOL	_varName="'isCircleFill'"			_pref="prefs.FILL_CIRCLE")
		(macro TT_GET_PREF_NUMBER _varName="'alphaMultiplier'"		_pref="prefs.ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'"			_pref="prefs.COLOR_INDEX")
		(macro TT_GET_PREF_NUMBER _varName="'outlineType'"			_pref="prefs.LINE_TYPE")
		(macro TT_GET_PREF_NUMBER _varName="'lineThicknessPref'"	_pref="prefs.LINE_THICKNESS")

		(var lineThickness:number = "isThicknessFixed ? lineThicknessPref * 0.1 / rangeRadius : lineThicknessPref")

		(var isOutlineDisabled:bool = "outlineType == TMap_OUTLINE_TYPES.DISABLE")
		(var isSolid:bool = "outlineType == TMap_OUTLINE_TYPES.SOLID")

		(var lineAlpha:number = "isOutlineDisabled ? 0 : 1")

		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xBBBBBB")

		(var innerRadius:number = "isCircleFill ? 0 : MINIMAP_ASSETS_SIZE")
		(var spacing:number = "isSolid	? 0 
										: rangeSettings.spacing == 0	? 13
																		: rangeSettings.spacing"
		) # TODO: make it modifiable?
		(var dashLength:number = "isSolid	? 0 
											: rangeSettings.dashLength == 0	? 13
																			: rangeSettings.dashLength"
		) # TODO: make it modifiable?

		(var drawDotted:bool = "outlineType == TMap_OUTLINE_TYPES.DOT")
		#
	)
	(bind name "parameterKey")
	(bind visible "rangeEnabled && rangeRadius > 0")

	# Mod
	(style
		(hitTest = false)
	)
	#

	(block
		(style (bind alpha "rangesAlpha")) 
		(block
			(style (bind alpha "isActive ? 1 : 0.65")) 
			# Mod
			(macro TMap_RANGE_CIRCLE)
			#

			
			(block
				(style
					(alpha = "0")
					(filters
						(dropShadow
							(distance = 0)
							(angle = 90)
							(color = 0xFFFFFF)
							(alpha = 1.0)
							(blurX = 3.5)
							(blurY = 3.5)
							(strength = 1.2)
							(quality = 2)
						)
					)
				)
				# Mod
				(macro TMap_RANGE_CIRCLE)
				#

				(controller $Animation
					(bindcall play 	duration=0.4
									easing="Easing.line"
									keyframes="[{
										percent:50,
										from:{ alpha: 0 },
										to:{ alpha: 1 }
									},{
										percent:100,
										to:{ alpha: 0 }
									}]"
									(bind enabled "isActive")
									(event "rangeEntity.minimapRange.evIsActiveChanged")
					)
				)
			)

			(controller $Animation
				(bindcall play 	duration=0.6
								easing="Easing.line"
								from="{ alpha: 0.65 }"
								to="{ alpha: 1 }"
								reverse="!(isActive)"
								(event "rangeEntity.minimapRange.evIsActiveChanged")
				)
			)
		)
	)

	
	(block
		(style (bind rotation "radToGrad(rangeRotation)"))
		(bind visible "distanceDisplayEnabled || altVision")
		(block
			(style
				(position = "absolute")
				(bind left "rangeRadius * MINIMAP_ASSETS_SIZE")
			)
			(block
				(style (bind rotation "-radToGrad(rangeRotation) - angleToRotate"))
				(macro BIND_FAIR_SCALE "rangesTextScale")
				(tf
					(style
						(position = "absolute")
						(width = "38px") (height = "20px")
						(left = "-19px") (top = "-10px")
						(textAlign = "center")
						# Mod
						(bind textColor "color")
						#
					)
					(bind class "rangeSettings.boldText ? '$TextMinimapRangeBold' : '$TextMinimapRange'")
					(bind text "rangeValue")
				)
			)
		)
	)
)

# Custom
(def element TMap_MapMarkerSmokePenaltyRange(_markerEntity:gfx, _mapScale:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(event evPlayAnimation)

		(var rangesTextScale:number = "_mapScale > 1 ? 1 / _mapScale : 1")

		(macro TMap_GET_ALT_VISION)
		(var pref:dict = "TMap_PREFS.VISIBILITY_SMOKE")
		(macro TT_GET_PREF_BOOL	_varName="'isVisibleOnAlt'"			_pref="pref.VISIBLE_ON_ALT")
		(macro TT_GET_PREF_BOOL	_varName="'isVisibleInSmoke'"		_pref="pref.VISIBLE_IN_SMOKE")
		(var smokeIndication:gfx = "$datahub.getSingleComponent(CC.smokeIndication)")
		(var isInSmoke:bool = "smokeIndication ? smokeIndication.smokeInsideLifeTime > 0 : false" (event "smokeIndication.evSmokeTimerChanged"))

		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))

		(var distanceDisplayEnabledComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.distanceDisplayEnabled).minimapOption")
		(var distanceDisplayEnabled:bool = "distanceDisplayEnabledComponent.value > 0" (event "distanceDisplayEnabledComponent.evValueChanged"))

		(var smokePenaltyEntity:gfx = "$datahub.getPrimaryEntity(CC.parameter, '' + _markerEntity.id + '_visibilityInSmokeRangeGK')")
        (var smokePenaltyRange:number = "smokePenaltyEntity ? smokePenaltyEntity.parameter.currentValue : 0" (event "smokePenaltyEntity.parameter.evChanged"))

		(var isVisible:bool = "smokePenaltyRange > 0 && ((isVisibleOnAlt && altVision) || (isVisibleInSmoke && isInSmoke))")

		(var rangeValue:str = "formatFloatingPoint(round(smokePenaltyRange * 10) / 10, 1)")
		
		(var mapSize:number = "cameraComponent.visibilityRange / cameraComponent.visibilityRangePerc" watch=false)
		(var rangeRadius:number = "smokePenaltyRange / mapSize")

		(macro TT_GET_PREF_BOOL	_varName="'isThicknessFixed'"		_pref="TMap_PREFS.RANGE_OUTLINE_FIX")

		(macro TT_GET_PREF_BOOL	_varName="'isCircleFill'"			_pref="pref.FILL_CIRCLE")
		(macro TT_GET_PREF_NUMBER _varName="'alphaMultiplier'"		_pref="pref.ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'"			_pref="pref.COLOR_INDEX")
		(macro TT_GET_PREF_NUMBER _varName="'outlineType'"			_pref="pref.LINE_TYPE")
		(macro TT_GET_PREF_NUMBER _varName="'lineThicknessPref'"	_pref="pref.LINE_THICKNESS")

		(var lineThickness:number = "isThicknessFixed ? lineThicknessPref * 0.1 / smokePenaltyRange : lineThicknessPref")

		(var isOutlineDisabled:bool = "outlineType == TMap_OUTLINE_TYPES.DISABLE")
		(var isSolid:bool = "outlineType == TMap_OUTLINE_TYPES.SOLID")

		(var lineAlpha:number = "isOutlineDisabled ? 0 : rangesAlpha")

		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xBBBBBB")

		(var innerRadius:number = "isCircleFill ? 0 : MINIMAP_ASSETS_SIZE")
		(var spacing:number = "isSolid	? 0 
										: 13"
		)
		(var dashLength:number = "isSolid	? 0
											: 13"
		)

		(var drawDotted:bool = "outlineType == TMap_OUTLINE_TYPES.DOT")
		#
	)

	(dispatch evPlayAnimation args="{}" (bind trigger "isInSmoke"))

	(bind visible "isVisible")

	(block
		(macro TMap_RANGE_CIRCLE)

		(block
			(style
				(alpha = "0")
				(filters
					(dropShadow
						(distance = 0)
						(angle = 90)
						(color = 0xFFFFFF)
						(alpha = 1.0)
						(blurX = 3.5)
						(blurY = 3.5)
						(strength = 1.2)
						(quality = 2)
					)
				)
			)
			(macro TMap_RANGE_CIRCLE)

			(controller $Animation
				(bindcall play 	duration=0.6
								easing="Easing.line"
								keyframes="[{
									percent:50,
									from:{ alpha: 0 },
									to:{ alpha: 1 }
								},{
									percent:100,
									to:{ alpha: 0 }
								}]"
								(bind enabled "isInSmoke")
								(event "evPlayAnimation")
				)
			)
		)
	)

	(block
		(bind visible "distanceDisplayEnabled || altVision")
		(block
			(style
				(position = "absolute")
				(bind left "rangeRadius * MINIMAP_ASSETS_SIZE")
			)
			(block
				(macro BIND_FAIR_SCALE "rangesTextScale")
				(tf
					(style
						(position = "absolute")
						(width = "38px") (height = "20px")
						(left = "-19px") (top = "-10px")
						(textAlign = "center")
						# Mod
						(bind textColor "color")
						#
					)
					(class $TextMinimapRange)
					(bind text "rangeValue")
				)
			)
		)
	)
)

# Custom
(def element TMap_MapMarkerNonPlayerRanges (_markerEntity:gfx, _isAlly:bool, _userPrefsNum:gfx=null) layout=true
	(scope
		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))

		(var avatarId:str = "_markerEntity.avatar ? _markerEntity.avatar.id : ''")

		#Classic TTX
		(var ttxEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_ShipParamsInBattle, avatarId)")
		(var ttxEntity:gfx = "ttxEntityWatcher.entity" (event "ttxEntityWatcher.event"))
		(var classicTTX:gfx = "ttxEntity ? ttxEntity.mods_ShipParamsInBattle.shipTTX : null")

		#New TTX
		(var shipBattleInfoEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_ShipParamsInBattle, avatarId)")
		(var shipBattleInfoEntity:gfx = "shipBattleInfoEntityWatcher.entity" (event "shipBattleInfoEntityWatcher.event"))
		(var shipBattleInfo:gfx = "shipBattleInfoEntity ? shipBattleInfoEntity.shipBattleInfo : null")
		(var newTTX:gfx = "shipBattleInfo ? shipBattleInfo.shipTTX : null" (event "shipBattleInfo.evChanged"))

		# TTX
		(var isRealParams:bool = "shipBattleInfo ? shipBattleInfo.isRealParams : false" (event "shipBattleInfo.evChanged"))
		(var shipTTX:gfx = "isRealParams ? newTTX : classicTTX")

		(var prefPostfix:str = "_isAlly ? '_ALLY' : '_ENEMY'")
		# MG
		(var mgPref:dict = "TMap_PREFS['MAIN_ARMAMENT' + prefPostfix]")

		# SG
		(var sgPref:dict = "TMap_PREFS['SECONDARY' + prefPostfix]")
		(var shipId:number = "_markerEntity.avatar ? _markerEntity.avatar.ship.ref.ship.id : null" (event "_markerEntity.avatar.evShipRefChanged"))
		(var shipType:str = "_markerEntity.avatar ? _markerEntity.avatar.shipType : null" (event "_markerEntity.avatar.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))

		(var sgSkillId:number = "shipType in TMap_ATBA_SKILL_ID ? TMap_ATBA_SKILL_ID[shipType] : null")
		(var sgSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, sgSkillId, shipType, -1)")
		
		(var sgCrewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, sgSkillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isSGCorrectionNeeded:bool = "!(sgCrewSkillEntity || isRealParams)")
		# Fix when (the captain doesn't exist | captain doesn'thave atba skill | fake params)

		(var sgModifiers:dict = "sgSkillEntity ? sgSkillEntity.attributes.modifiers : null")
		(var sgRangeModifier:number = "isSGCorrectionNeeded && sgModifiers ? (1 + sgModifiers.GSMaxDist * 0.01) : 1.0") #value is negative and %


		# Torp
		(var torpPref:dict = "TMap_PREFS['TORPEDO' + prefPostfix]")
		(var torps:gfx = "shipTTX && shipTTX.torpedoes ? shipTTX.torpedoes : null")
		(var torp1:number = "torps && torps.torpedo ? torps.torpedo.maxDist.value : 0")
		(var torp2:number = "torps && torps.torpedoDeepwater ? torps.torpedoDeepwater.maxDist.value : 0")
		(var torp3:number = "torps && torps.torpedoAlt ? torps.torpedoAlt.maxDist.value : 0")
		(var subTorps:gfx = "shipTTX && shipTTX.torpedoGroups ? shipTTX.torpedoGroups : null")
		(var torp4:number = "subTorps && subTorps.torpedo ? subTorps.torpedo.maxDist.value : 0")
		(var torp5:number = "subTorps && subTorps.torpedoDeepwater ? subTorps.torpedoDeepwater.maxDist.value : 0")
		(var torp6:number = "subTorps && subTorps.torpedoAlt ? subTorps.torpedoAlt.maxDist.value : 0")
		(var torpMaxRange:number = "max(torp1, torp2, torp3, torp4, torp5, torp6)")

		# AS
		(var asPref:dict = "TMap_PREFS['AIRSUPPORT' + prefPostfix]")

		# Visibility Sea
		(var seaPref:dict = "TMap_PREFS['VISIBILITY_SEA' + prefPostfix]")

		(var concealSkillId:number = "shipType in TMap_CONCEALMENT_SKILL_ID ? TMap_CONCEALMENT_SKILL_ID[shipType] : null")
		(var concealSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, concealSkillId, shipType, -1)")
		
		(var concealCrewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, concealSkillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isConcealCorrectionNeeded:bool = "!(concealCrewSkillEntity || isRealParams)")
		# Fix when (the captain doesn't exist | captain doesn'thave conceal | fake params)

		(var concealModifiers:dict = "concealSkillEntity ? concealSkillEntity.attributes.modifiers : null")
		(var visibilityModifier:number = "isConcealCorrectionNeeded && concealModifiers ? (1 + concealModifiers.visibilityDistCoeff * 0.01) : 1.0") #value is negative and %

		# Visibility Air
		(var airPref:dict = "TMap_PREFS['VISIBILITY_AIR' + prefPostfix]")
	)
	(style
		(bind alpha "rangesAlpha")
	)

	# MG
	(controller $Instance renderer='TMap_MapMarkerItemNonPlayerRange'
		(bind enabled "shipTTX && shipTTX.artillery")
		(args _range="shipTTX.artillery.mgMaxDist.value" _pref="mgPref" _userPrefsNum="_userPrefsNum")
	)

	# ATBA
	(controller $Instance renderer='TMap_MapMarkerItemNonPlayerRange'
		(bind enabled "shipTTX && shipTTX.artillery")
		(args _range="shipTTX.artillery.atbaMaxDist.value * sgRangeModifier" _pref="sgPref" _userPrefsNum="_userPrefsNum")
	)

	# Torpedo
	(controller $Instance renderer='TMap_MapMarkerItemNonPlayerRange'
		(bind enabled "shipTTX && shipTTX.torpedoes")
		(args _range="torpMaxRange" _pref="torpPref" _userPrefsNum="_userPrefsNum")
	)

	# AS
	(controller $Instance renderer='TMap_MapMarkerItemNonPlayerRange'
		(bind enabled "shipTTX && shipTTX.airSupport")
		(args _range="shipTTX.airSupport.maxDist.value" _pref="asPref" _userPrefsNum="_userPrefsNum")
	)

	# Sea
	(controller $Instance renderer='TMap_MapMarkerItemNonPlayerRange'
		(bind enabled "shipTTX && shipTTX.visibility")
		(args _range="shipTTX.visibility.visibilityByShip.normal.value * visibilityModifier" _pref="seaPref" _userPrefsNum="_userPrefsNum")
	)

	# Air
	(controller $Instance renderer='TMap_MapMarkerItemNonPlayerRange'
		(bind enabled "shipTTX && shipTTX.visibility")
		(args _range="shipTTX.visibility.visibilityByPlane.normal.value * visibilityModifier" _pref="airPref" _userPrefsNum="_userPrefsNum")
	)
)

# Custom
(def element TMap_MapMarkerItemNonPlayerRange (_range:number, _pref:dict, _userPrefsNum:gfx=null) layout = true
	(scope
		(macro TMap_GET_ALT_VISION)
		(macro TT_GET_PREF_NUMBER	_varName="'displayMode'"		_pref="_pref.DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isVisible'" _prefValue="displayMode")

		(var mapSize:number = "cameraComponent.visibilityRange / cameraComponent.visibilityRangePerc" watch=false)

		(var rangeRadius:number = "_range / mapSize")

		(macro TT_GET_PREF_BOOL	_varName="'isThicknessFixed'"		_pref="TMap_PREFS.RANGE_OUTLINE_FIX")

		(macro TT_GET_PREF_BOOL	_varName="'isCircleFill'"			_pref="_pref.FILL_CIRCLE")
		(macro TT_GET_PREF_NUMBER _varName="'alphaMultiplier'"		_pref="_pref.ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'"			_pref="_pref.COLOR_INDEX")
		(macro TT_GET_PREF_NUMBER _varName="'outlineType'"			_pref="_pref.LINE_TYPE")
		(macro TT_GET_PREF_NUMBER _varName="'lineThicknessPref'"	_pref="_pref.LINE_THICKNESS")

		(var lineThickness:number = "isThicknessFixed ? lineThicknessPref * 0.1 / _range : lineThicknessPref")

		(var isOutlineDisabled:bool = "outlineType == TMap_OUTLINE_TYPES.DISABLE")
		(var isSolid:bool = "outlineType == TMap_OUTLINE_TYPES.SOLID")

		(var lineAlpha:number = "isOutlineDisabled ? 0 : 1")

		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xBBBBBB")

		(var innerRadius:number = "isCircleFill ? 0 : MINIMAP_ASSETS_SIZE")
		(var spacing:number = "isSolid	? 0 
										: 13"
		)
		(var dashLength:number = "isSolid	? 0
											: 13"
		)

		(var drawDotted:bool = "outlineType == TMap_OUTLINE_TYPES.DOT")
		#
	)
	(bind visible "isVisible")

	(macro TMap_RANGE_CIRCLE)
)

# battle\minimap\markers\ship_marker.unbound
(def element TMap_MapMarkerShipIcon (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.id")
		(macro GET_BOT_CUSTOMIZATION_TAG_COMPONENT "_markerEntity") 

		(var aircarrier:gfx = "$datahub.getSingleComponent(CC.aircarrier)")
		(var activeSquadron:number = "aircarrier ? aircarrier.activeSquadron : ActiveSquadron.NONE" (event "aircarrier.evStateChanged"))
		(var squadronCameraMode:bool = "activeSquadron != ActiveSquadron.NONE")

		(macro SCOPE_IS_BATTLE_IN_PROGRESS "'isBattleInProgress'")

		(var visibilityPostfix:str = "mapVisible && !(worldVisible) && isBattleInProgress ? '_invisible' : ''")

		(var markerColorTransform:dict =
			"	!isAlive						? TWO_TEAMS_COLOR_TRANSFORMS['white'] :
				!mapVisible && !worldVisible	? TWO_TEAMS_COLOR_TRANSFORMS['white'] :
				isSelf							? TWO_TEAMS_COLOR_TRANSFORMS['white'] :
				isInSameDivision				? TWO_TEAMS_COLOR_TRANSFORMS['division'] :
				tkStatus && isAlly				? TWO_TEAMS_COLOR_TRANSFORMS['teamkiller'] :
				isAlly							? TWO_TEAMS_COLOR_TRANSFORMS['ally'] :
				isMultyTeamEnabled				? MULTI_TEAMS_COLOR_TRANSFORMS[teamId]
												: TWO_TEAMS_COLOR_TRANSFORMS['enemy']
		"
		# Mod
		)
		# prevent vsc from freaking out
		#

		(var markerIcon:str = 
			"isAlive	? !mapVisible && !worldVisible	? shipType + '_last_visible'
														: isSelf	? squadronCameraMode	? 'self_alive_' + shipType
																							: 'self_alive'
																	: shipType + visibilityPostfix
						: isSelf	? squadronCameraMode	? 'self_dead_' + shipType
															: 'self_dead'
									: shipType + '_dead'")
	)
	(bind colorTransform "markerColorTransform")
	(bind name "worldVisible ? 'map_marker_ship_' + (_markerEntity.avatar ? _markerEntity.avatar.id : 0) : ''")
	
	(block
		(bind visible "!tagPrefix")
		(style (bind backgroundImage " shipType ? 'swf:../fla/minimap/minimap.swf:minimap_' + toLower(markerIcon) : ''"))
		
	)
	(block
		(style
			(marginLeft = "-(SHIP_ICON_SIZE.WIDTH*0.5)")
			(marginTop = "-(SHIP_ICON_SIZE.HEIGHT*0.5)")
		)
		(bind visible "tagPrefix")
		(style (bind backgroundImage " tagPrefix ? 'url:../battle_hud/markers/ship/map/icon_' + tagPrefix + '.png' : ''"))
		
	)
)

# battle\minimap\markers\ship_marker.unbound
(def element TMap_MapMarkerShipName (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.id")
		(var shipName:str = "avatarComponent ? avatarComponent.ship.ref.ship.nameUpper : ''")

		(var colorPresetName:str = "isInSameDivision	?	'division'	
														:	tkStatus && isAlly	?	'teamkiller' 
																				: toLower(SC.Battle.PLAYER_RELATION.VALUE_TO_NAME[relationComponent.value])")

		
		# Mod

		# Hide ship name when the ship name is always visible && timer is visible because I like this style. Do not complain.
		# Too much info causes clutters.
		#
		# If the visibility of ship names is set to adaptive mode, we need to display both the ship name and timer
		(macro TMap_GET_ALT_VISION)
		(var shipNamesDisplayModeComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.shipNamesDisplayEnabled).minimapOption")
		(var shipNamesDisplayMode:number = "shipNamesDisplayModeComponent.value" (event "shipNamesDisplayModeComponent.evValueChanged"))

		(macro TT_GET_PREF_BOOL _varName="'isLastSpottedTimerEnabled'" _pref="TMap_PREFS.LAST_SPOTTED_ON_ALT")

		(var isShipNameVisible:bool = "isLastSpottedTimerEnabled && altVision && shipNamesDisplayMode == TMap_DISPLAY_MODES.ENABLE && !mapVisible
										? false
										: true"
		)
		#
		
		(macro TT_GET_PREF_NUMBER _varName="'fontSizePref'" _pref="TMap_PREFS.MARKER_FONT_SIZE")

		# Mod
		(macro IS_SPECTATOR_MODE)
		(var isBot:bool = "avatarComponent ? avatarComponent.isBot : false")
		(var isLoadedInBattle:bool = "avatarComponent ? avatarComponent.isLoadedInBattle : true" (event "avatarComponent.evIsLoadedInBattleChanged"))
		(var isAFK:bool = "isAlive && !isSpectatorTrainingMode && !isSelf && !isBot && !isLoadedInBattle")

		(var relationColor:number = "isAFK	? FONT_CLASS_TO_COLOR['$FontColorOrange']
											: isMultyTeamEnabled && !isAlly	? MULTI_TEAMS_FONT_COLOR[teamId]
																			: TWO_TEAMS_FONT_COLOR[colorPresetName]"
		)
		(var fontColor:number = "isAlive ? relationColor : C_DEAD")
		#
	)

	(bind visible "isShipNameVisible")

	(style 
		(width = 100%)
		(align = "center")
		# Mod
		(marginBottom = 3px)
		#
	)

	(tf
		# Mod
		(class $TMap_MarkerText)
		(style
			(bind textColor "fontColor")
			(bind fontSize "fontSizePref")
			(macro TMap_MARKER_TEXT_DROPSHADOW)
		)
		#
		(bind text "shipName")
	)
)

# Custom
(def element TMap_MapMarkerShipLastSpottedTimer (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(event evShipBecomeInvisible)
		(event evPosChanged)

		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(macro TMap_GET_ALT_VISION)
		
		(var timeStamp:number = "timer.currentTime" (event "evShipBecomeInvisible"))
		(var invisibleTime:number = "timer.currentTime - timeStamp" (event "timer.evInfrequent"))
		(macro HUMAN_READABLE_COUNTDOWN_SCOPE "invisibleTime")

		(var mapVisible:bool = "_markerEntity && _markerEntity.hasComponent(CC.visibility) && _markerEntity.visibility.mapVisible" (event "_markerEntity.visibility.evChanged"))

		(var mapPos:gfx = "_markerEntity.mapPosition.position")
		(var lastKnownPosX:number = "mapPos.x" init=false watch=false (event "evShipBecomeInvisible"))
		(var lastKnownPosY:number = "mapPos.y" init=false watch=false (event "evShipBecomeInvisible"))
		(var currentPosX:number = "mapPos.x" init=false watch=false (event "timer.evInfrequent"))
		(var currentPosY:number = "mapPos.y" init=false watch=false (event "timer.evInfrequent"))

		(macro TT_GET_PREF_BOOL _varName="'isLastSpottedTimerEnabled'" _pref="TMap_PREFS.LAST_SPOTTED_ON_ALT")

		(var isTimerVisible:bool = "!mapVisible && altVision && isLastSpottedTimerEnabled")

		(macro TT_GET_PREF_NUMBER _varName="'fontSizePref'" _pref="TMap_PREFS.MARKER_FONT_SIZE")
		(var fontSize:number = "max(11, fontSizePref)")
	)

	(bind visible "isTimerVisible")

	(dispatch evPosChanged (bind enabled "!mapVisible && (lastKnownPosX != currentPosX)") (bind trigger "currentPosX"))
	(dispatch evPosChanged (bind enabled "!mapVisible && (lastKnownPosY != currentPosY)") (bind trigger "currentPosY"))
	(dispatch evShipBecomeInvisible (bind trigger "mapVisible") (event "evPosChanged"))

	# Mod
	(style
		(width = 100%)
		(align = "center")
		(marginBottom = 3px)
	)
	#
	(tf
		(class $TextDefaultBold9NM)
		(class $FontColorDefault)
		(class $FontEnableReadability)
		(style
			(bind fontSize "fontSize")
		)
		(bind text "countdownText")
	)
)

# Custom: based on MapMarkerShipName/TMap_MapMarkerShipName but without timer
(def element TMap_MapMarkerOwnerShipName (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.id")
		(var shipName:str = "avatarComponent ? avatarComponent.ship.ref.ship.nameUpper : ''")

		(var colorPresetName:str = "isInSameDivision	?	'division'	
														:	tkStatus && isAlly	?	'teamkiller' 
																				: toLower(SC.Battle.PLAYER_RELATION.VALUE_TO_NAME[relationComponent.value])")

		(macro TT_GET_PREF_NUMBER _varName="'fontSizePref'" _pref="TMap_PREFS.MARKER_FONT_SIZE")

		(var relationColor:number = "isMultyTeamEnabled && !isAlly	? MULTI_TEAMS_FONT_COLOR[teamId]
																	: TWO_TEAMS_FONT_COLOR[colorPresetName]"
		)
		(var fontColor:number = "isAlive ? relationColor : C_DEAD")
		#
	)

	(style (width = 100%) (align = "center"))
	(tf
		# Mod
		(class $TMap_MarkerText)
		(style
			(bind textColor "fontColor")
			(bind fontSize "fontSizePref")
			(macro TMap_MARKER_TEXT_DROPSHADOW)
		)
		(bind text "shipName")
		#
	)
)

# Custom
(def element TMap_MapMarkerPlayerName (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.id")
		(var playerName:str = "avatarComponent ? avatarComponent.name : ''")

		(var colorPresetName:str = "isInSameDivision	?	'division'	
														:	tkStatus && isAlly	?	'teamkiller' 
																				: toLower(SC.Battle.PLAYER_RELATION.VALUE_TO_NAME[relationComponent.value])")

		(macro TT_GET_PREF_NUMBER _varName="'fontSize'" _pref="TMap_PREFS.MARKER_FONT_SIZE")

		(var relationColor:number = "isMultyTeamEnabled && !isAlly	? MULTI_TEAMS_FONT_COLOR[teamId]
																	: TWO_TEAMS_FONT_COLOR[colorPresetName]"
		)
		(var fontColor:number = "isAlive ? relationColor : C_DEAD")
	)

	(style (width = 100%) (align = "center|bottom")(height = 5px))
	(tf
		# Mod
		(class $TMap_MarkerText)
		(style
			(bind textColor "fontColor")
			(bind fontSize "fontSize")
			(macro TMap_MARKER_TEXT_DROPSHADOW)
		)
		(bind text "playerName")
	)
)

# Custom
(def element TMap_MapMarkerRadioLocationSector (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro TMap_GET_ALT_VISION)

		(var relationComponent:gfx = "_markerEntity ? _markerEntity.relation : null")
		(var isAlly:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ALLY" (event "relationComponent.evChanged"))
		(var isSelf:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.SELF" (event "relationComponent.evChanged"))

		# RPF
		(var prefAlpha:dict = "isSelf ? TMap_PREFS.RPF_SELF_ALPHA : TMap_PREFS.RPF_ALLY_ALPHA")
		(var prefRed:dict = "isSelf ? TMap_PREFS.RPF_SELF_RED : TMap_PREFS.RPF_ALLY_RED")
		(var prefGreen:dict = "isSelf ? TMap_PREFS.RPF_SELF_GREEN : TMap_PREFS.RPF_ALLY_GREEN")
		(var prefBlue:dict = "isSelf ? TMap_PREFS.RPF_SELF_BLUE : TMap_PREFS.RPF_ALLY_BLUE")

		(macro TT_GET_PREF_NUMBER _varName="'alphaScale'"	_pref="prefAlpha")
		(macro TT_GET_PREF_NUMBER _varName="'redScale'"	_pref="prefRed")
		(macro TT_GET_PREF_NUMBER _varName="'greenScale'"	_pref="prefGreen")
		(macro TT_GET_PREF_NUMBER _varName="'blueScale'"	_pref="prefBlue")

		(macro TT_GET_PREF_NUMBER _varName="'rpfAllyDisplayMode'" _pref="TMap_PREFS.RPF_ALLY_DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isAllyRPFEnabeld'" _prefValue="rpfAllyDisplayMode")

		# Chat
		(var avatarId:str = "_markerEntity.avatar ? toString(_markerEntity.avatar.id) : ''")
		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, TMap_COMPONENT_KEY_RADIO_LOCATION)")
		(var dataEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))
		(var dataComponent:gfx = "dataEntity ? dataEntity.mods_DataComponent : null")
		(var rpfData:dict = "dataComponent ? dataComponent.data : {}" (event "dataComponent.evDataChanged"))
		(var rpfDirectionDeg:number = "avatarId in rpfData ? rpfData[avatarId] : TMap_RPF_INVALID_DIRECTION")

		# RPF Visibility
		(var isRPFVisible:bool = "rpfDirectionDeg != TMap_RPF_INVALID_DIRECTION && ( (isAlly && isAllyRPFEnabeld) || isSelf)")
	)

	(bind visible "isRPFVisible")

	(style
		(bind rotation "rpfDirectionDeg")
	)
	(controller $Sector
		(bind color "0xFFFFFF")
		(bind arc "TMap_RPF_SECTOR_WIDTH_DEG")
		(bind offset "-90")
		(bind radius "300")
	)
	(bind colorTransform "{ redMultiplier: redScale, greenMultiplier: greenScale, blueMultiplier: blueScale, alphaMultiplier: alphaScale}")
)

# Custom
(def element TMap_MapMarkerHealthItem(_markerEntity:gfx, _isAlly:bool, _userPrefsNum:gfx=null) layout=true
	(scope
		(var prefKey:str = "_isAlly ? 'HEALTH_ALLY' : 'HEALTH_ENEMY'")
		(macro TMap_GET_ALT_VISION)

		(macro TT_GET_PREF_NUMBER _varName="'healthDisplayMode'" _pref="TMap_PREFS[prefKey]")
		(macro TMap_GET_DISPLAY_MODE _varName="'isHealthVisible'" _prefValue="healthDisplayMode")

		(macro TT_GET_PREF_BOOL _varName="'isMaxHealthHidden'"	_pref="TMap_PREFS.HEALTH_MAX_HIDE")

		(var healthComponent:gfx = "_markerEntity.health ? _markerEntity.health : null")
		(var healthValue:number = "healthComponent ? healthComponent.value : 0" (event "healthComponent.evValueChanged"))
		(var healthMax:number = "healthComponent ? healthComponent.max : 0" (event "healthComponent.evMaxChanged"))
		(var healthRatio:number = "healthMax ? healthValue / healthMax : 1")
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))

		(var isMaxHPVisible:bool = "isMaxHealthHidden && (healthMax == healthValue) ? false : true")

		# (var dataComponent:gfx = "_markerEntity.dataComponent ? _markerEntity.dataComponent : null")
		# (var regenMaxValue:number = "dataComponent ? dataComponent.data.maxValue : 0" (event "dataComponent.evDataChanged"))
		# (var regenRatio:number = "healthMax ? regenMaxValue / healthMax : 0")

		(var relationStr:str = "_isAlly ? 'ally' : 'enemy'")

		(var markerColorTransform:dict = "TWO_TEAMS_COLOR_TRANSFORMS[relationStr]")
		(var regenBarColorTransform:dict = "{redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:1.0,redOffset:230,greenOffset:230,blueOffset:230,alphaOffset:0 }")

		(macro TT_GET_PREF_NUMBER _varName="'rendererType'" _pref="TMap_PREFS.HEALTH_TYPE")
		(var renderer:str = "rendererType == 0 ? 'TMap_MapMarkerHealthBar' : 'TMap_MapMarkerHealthValue' ")
	)

	(bind visible "isHealthVisible && isMaxHPVisible")

	(style
		(width = "100%")
		(hitTest = false)
	)

	(controller $Instance
		(bind renderer "renderer")
		(args
			_healthRatio = "healthRatio"
			_healthValue = "healthValue"
			_markerColorTransform = "markerColorTransform"
			_userPrefsNum = "_userPrefsNum"
		)
	)
)

# Custom
(def element TMap_MapMarkerHealthBar (_healthRatio:number, _markerColorTransform:dict, _userPrefsNum:gfx=null)
	(scope
		(macro TT_GET_PREF_NUMBER _varName="'healthBarScale'" _pref="TMap_PREFS.HEALTH_SCALE")
	)

	(style
		(width = "100%")
		(hitTest = false)
	)

	(block
		(style
			(bind width "20px * healthBarScale")
			(height = "3px")
			(position = "absolute")
			(align = "middle|center")
			(pivotX = 50%)
		)
		# BG
		(block
			(class $FullsizeAbsolute)
			(style
				(backgroundColor = 0xFF999999)
				(backgroundSize = "fill")
			)
		)
		# # Regen
		# (block
		# 	(class $FullsizeAbsolute)
		# 	(bind scaleX "regenRatio")

		# 	(style
		# 		(backgroundColor = "0xFFFFFFFF")
		# 		(backgroundSize = "fill")
		# 	)

		# 	(bind colorTransform "regenBarColorTransform")
		# )
		# HP
		(block
			(class $FullsizeAbsolute)
			(bind scaleX "_healthRatio")

			(style
				(backgroundColor = "0xFFFFFFFF")
				(backgroundSize = "fill")
			)

			(bind colorTransform "_markerColorTransform")
		)
	)
)

# Custom
(def element TMap_MapMarkerHealthValue (_healthValue:number, _markerColorTransform:dict, _userPrefsNum:gfx=null)
	(scope
		(macro TT_GET_PREF_NUMBER _varName="'fontSizePref'" _pref="TMap_PREFS.MARKER_FONT_SIZE")
	)
	(style
		(width = 100%)
		(align = "middle|center")
	)
	(tf
		(class $TMap_MarkerText)
		(style
			(bind fontSize "fontSizePref")
		)
		(bind text "_healthValue")
		(bind colorTransform "_markerColorTransform")
	)
)

# Custom
(def element TMap_MapMarkerNearbyAntiAir (_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		# Timer
		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")

		# Own Squadron
		(macro IS_ON_PLANE) # To get active sqd index
		(var ownSquadronEntity:gfx = "$datahub.getPrimaryEntity(CC.ownSquadron, activeSquadron)")
		(var ownSqdMapPosComponent:gfx = "ownSquadronEntity ? ownSquadronEntity.mapPosition : null")
		(var sqdPosX:number = "ownSqdMapPosComponent ? ownSqdMapPosComponent.position.x : 0" watch=false (event "timer.evInfrequent"))
		(var sqdPosY:number = "ownSqdMapPosComponent ? ownSqdMapPosComponent.position.y : 0" watch=false (event "timer.evInfrequent"))

		# TTX
		(var avatarId:number = "_markerEntity ? _markerEntity.avatar.id : 0")
		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_ShipParamsInBattle, avatarId)")
		(var paramEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))
		(var shipTTX:gfx = "paramEntity ? paramEntity.mods_ShipParamsInBattle.shipTTX : null")
		
		# AA
		(var airDefenseTTX:gfx = "shipTTX ? shipTTX.airDefense : null")
		(var aaRange:number = "airDefenseTTX ? airDefenseTTX.averageAura.maxDist.value : 0")
		(var warnRange:number = "aaRange + 2.5")
		(var warnRangeSqared:number = "pow(warnRange, 2)")
		(var isValidAA:bool = "aaRange > 0")

		# Ship Position
		(var shipPosComponent:gfx = "_markerEntity.hasComponent(CC.mapPosition) ? _markerEntity.mapPosition : null" (event "_markerEntity.evAdded"))
		(var shipPosX:number = "shipPosComponent ? shipPosComponent.position.x : 0" watch=false (event "timer.evInfrequent"))
		(var shipPosY:number = "shipPosComponent ? shipPosComponent.position.y : 0" watch=false (event "timer.evInfrequent"))

		# Map Size
		(var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var mapSize:number = "cameraComponent.visibilityRange / cameraComponent.visibilityRangePerc" watch=false)

		# Calc
		(var posDiffX:number = "(sqdPosX - shipPosX) * mapSize")
		(var posDiffY:number = "(sqdPosY - shipPosY) * mapSize")
		(var distanceToShipSquared:number = "pow(posDiffX, 2) + pow(posDiffY, 2)" watch=false (event "timer.evInfrequent"))

		(var isValidPos:bool = "ownSqdMapPosComponent && shipPosComponent")

		(var isNearby:bool = "isValidAA && isValidPos && (distanceToShipSquared < warnRangeSqared)")

		(macro TT_GET_PREF_BOOL	_varName="'isThicknessFixed'"		_pref="TMap_PREFS.RANGE_OUTLINE_FIX")

		(macro TT_GET_PREF_BOOL	_varName="'isCircleFill'" _pref="TMap_PREFS.NEARBY_AA.FILL_CIRCLE")
		(macro TT_GET_PREF_NUMBER _varName="'alphaMultiplier'" _pref="TMap_PREFS.NEARBY_AA.ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'" _pref="TMap_PREFS.NEARBY_AA.COLOR_INDEX")

		(macro TT_GET_PREF_NUMBER _varName="'outlineType'"			_pref="TMap_PREFS.NEARBY_AA.LINE_TYPE")
		(macro TT_GET_PREF_NUMBER _varName="'lineThicknessPref'"	_pref="TMap_PREFS.NEARBY_AA.LINE_THICKNESS")

		(var isOutlineDisabled:bool = "outlineType == TMap_OUTLINE_TYPES.DISABLE")
		(var isSolid:bool = "outlineType == TMap_OUTLINE_TYPES.SOLID")

		(var lineAlpha:number = "isOutlineDisabled ? 0 : 1")

		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xBBBBBB")

		(var innerRadius:number = "isCircleFill ? 0 : MINIMAP_ASSETS_SIZE")
		(var drawDotted:bool = "outlineType == TMap_OUTLINE_TYPES.DOT")
		
		(var spacing:number = "isSolid	? 0 
										: 13"
		)
		(var dashLength:number = "isSolid	? 0 
											: 13"
		)

		(var rangeRadius:number = "aaRange / mapSize")

		(var lineThickness:number = "isThicknessFixed ? lineThicknessPref * 0.1 / rangeRadius : lineThicknessPref")
	)

	(style
		(hitTest = false)
	)

	#(bind visible "isNearby")
	(alpha = "isNearby ? 1.0 : 0")

	(controller $Animation
		(bindcall play
			keyframes="[{
							percent:50,
							to:{ alpha: 2 }
						},{
							percent:100,
							to:{ alpha: 1 }
						}]"
			easing =	"Easing.line"
			duration =	"0.4"
			action =	"killAll"
			(bind enabled "isNearby")
			(bind trigger "isNearby")
		)
		(bindcall play
			to =		"{alpha: 0}"
			easing =	"Easing.quad_in"
			duration =	"0.25"
			action =	"killAll"
			(bind enabled "!isNearby")
			(bind trigger "isNearby")
		)
	)

	(macro TMap_RANGE_CIRCLE)
)

# Custom
(def element TMap_MapMarkerDetectionIcon(_markerEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'vehicle')
		(var isSpotted:bool = "vehicleComponent ? vehicleComponent.visibilityFlags : false" (event "vehicleComponent.evVisibilityFlagsChanged"))

		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'" _pref="TMap_PREFS.DETECTION_COLOR_INDEX")
		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xFF9933")

		(macro TT_GET_PREF_NUMBER _varName="'alpha'" _pref="TMap_PREFS.DETECTION_ALPHA")
	)

	(bind visible "isSpotted")
	(style
		(hitTest = false)
		(bind alpha "alpha")
	)
	
	(controller $Sector
		(bind color "color")
		(bind arc "360")
		(bind radius "5")
	)
)

# Custom
(def element TMap_MapMarkerConsumableRanges (_markerEntity:gfx, _consumableRanges:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var consData:array = "dataComponent ? dataComponent.data.consMonitor: []" (event "dataComponent.evChanged"))

		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))
	)
	(style
		(hitTest = false)
		(bind alpha "rangesAlpha")
	)
	# Mod
	(controller $Repeat renderer='TMap_MapMarkerConsumableItem'
		(bind enabled "consData.length > 0")
		(bind count "consData.length")
		(args _markerEntity="_markerEntity" _consumableRanges="_consumableRanges" _consumableMonitorData="consData[$index]" _userPrefsNum="_userPrefsNum")
	)
	#
)

# Custom
(def element TMap_MapMarkerConsumableItem(_markerEntity:gfx, _consumableRanges:dict, _consumableMonitorData:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(var consumableType:number = "'consumableType' in _consumableMonitorData ? _consumableMonitorData.consumableType : -1")
		(var consTypeName:str = "consumableType == 12	? 'radar'
														: consumableType == 10	? 'hydro'
																				: consumableType == 41	? 'subRadar'
																										: ''"
		)
		(var range:number = "consTypeName in _consumableRanges ? _consumableRanges[consTypeName].map : 0")
		(var state:number = "'state' in _consumableMonitorData ? _consumableMonitorData.state : -1")

		(var isValidConsumable:bool = "range > 0")
	)
	(style
		(hitTest = false)
	)
	(block
		(controller $Instance (renderer = 'TMap_MapMarkerConsumableItemRange')
			(bind enabled "isValidConsumable")
			(args
				_markerEntity	= "_markerEntity"
				_type			= "toUpper(consTypeName)"
				_range			= "range"
				_state			= "state"
				_userPrefsNum	= "_userPrefsNum"
			)
		)
	)
)

# Custom
(def element TMap_MapMarkerConsumableItemRange (_markerEntity:gfx, _type:str, _range:number, _state:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var isVisibleInWorld:bool = "_markerEntity && _markerEntity.hasComponent(CC.visibility) && _markerEntity.visibility.visible" (event "_markerEntity.visibility.evChanged"))

		(var isReady:bool = "_state == SC.Battle.CONSUMABLE_STATES.READY")
		# Fix for a bug where the consumable circle remains forever when activing consumable then immediately going out the rendering range
		(var isActive:bool = "_state == SC.Battle.CONSUMABLE_STATES.AT_WORK && isVisibleInWorld")
		(var isReload:bool = "_state == SC.Battle.CONSUMABLE_STATES.RELOAD")
		(var isEmpty:bool = "_state == SC.Battle.CONSUMABLE_STATES.NO_AMMO")
		(var isPreparation:bool = "_state == SC.Battle.CONSUMABLE_STATES.PREPARATION")

		(var prefKey:str = "_type + '_ALLY'")
		(var prefs:dict = "TMap_PREFS[prefKey]")

		(macro TT_GET_PREF_BOOL	_varName="'isThicknessFixed'"		_pref="TMap_PREFS.RANGE_OUTLINE_FIX")

		(macro TT_GET_PREF_BOOL	_varName="'isVisibleOnAlt'" _pref="prefs.VISIBLE_ON_ALT")
		(macro TT_GET_PREF_BOOL	_varName="'isVisibleOnActivation'" _pref="prefs.VISIBLE_ON_ACTIVATION")
		(macro TT_GET_PREF_BOOL	_varName="'isCircleFill'" _pref="prefs.FILL_CIRCLE")
		(macro TT_GET_PREF_NUMBER _varName="'alphaMultiplier'" _pref="prefs.ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'" _pref="prefs.COLOR_INDEX")

		(macro TT_GET_PREF_NUMBER _varName="'outlineType'"			_pref="prefs.LINE_TYPE")
		(macro TT_GET_PREF_NUMBER _varName="'lineThicknessPref'"	_pref="prefs.LINE_THICKNESS")


		(var isOutlineDisabled:bool = "outlineType == TMap_OUTLINE_TYPES.DISABLE")
		(var isSolid:bool = "outlineType == TMap_OUTLINE_TYPES.SOLID")

		(var lineAlpha:number = "isOutlineDisabled ? 0 : 1")

		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xBBBBBB")

		(var innerRadius:number = "isCircleFill ? 0 : MINIMAP_ASSETS_SIZE")
		(var drawDotted:bool = "outlineType == TMap_OUTLINE_TYPES.DOT")
		
		(var spacing:number = "isSolid	? 0 
										: 13"
		)
		(var dashLength:number = "isSolid	? 0 
											: 13"
		)
		
		(var rangeRadius:number = "_range")

		(var lineThicknessBase:number = "isThicknessFixed ? lineThicknessPref * 0.1 / rangeRadius : lineThicknessPref")
		(var lineThickness:number = "(isActive ? 1.5 : 1.0) * lineThicknessBase")

		(macro TMap_GET_ALT_VISION)

		(var isVisible:bool = "(isVisibleOnAlt && altVision) || (isVisibleOnActivation && isActive)")
		(var isValid:bool = "rangeRadius > 0")
	)

	(bind visible "isValid && isVisible")

	(style
		(hitTest = false)
	)

	(block
		(style
			(bind alpha "isActive ? 1 : 0.65")
		)
		(macro TMap_RANGE_CIRCLE)
		
		(block
			(style
				(alpha = "0")
				(filters
					(dropShadow
						(distance = 0)
						(angle = 90)
						(color = 0xFFFFFF)
						(alpha = 1.0)
						(blurX = 3.5)
						(blurY = 3.5)
						(strength = 1.2)
						(quality = 2)
					)
				)
			)
			# Mod
			(macro TMap_RANGE_CIRCLE)
			#

			(controller $Animation
				(bindcall play 	duration=0.4
								easing="Easing.line"
								keyframes="[{
									percent:50,
									from:{ alpha: 0 },
									to:{ alpha: 1 }
								},{
									percent:100,
									to:{ alpha: 0 }
								}]"
								(bind enabled "isActive")
								(bind trigger "isActive")
				)
			)
		)

		(controller $Animation
			(bindcall play 	duration=0.6
							easing="Easing.line"
							from="{ alpha: 0.65 }"
							to="{ alpha: 1 }"
							reverse="!(isActive)"
							(bind trigger "isActive")
			)
		)
	)
)

# Custom
(def element TMap_MapMarkerEnemyConsumableRanges (_markerEntity:gfx, _consumableRanges:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro TT_GET_PREF_NUMBER _varName="'radarDisplayMode'"		_pref="TMap_PREFS.RADAR_ENEMY.DISPLAY_MODE")
		(macro TT_GET_PREF_NUMBER _varName="'hydroDisplayMode'"		_pref="TMap_PREFS.HYDRO_ENEMY.DISPLAY_MODE")
		(macro TT_GET_PREF_NUMBER _varName="'subRadarDisplayMode'"	_pref="TMap_PREFS.SUBRADAR_ENEMY.DISPLAY_MODE")

		(var radarRange:number = "'radar' in _consumableRanges ? _consumableRanges.radar.map : 0")
		(var hydroRange:number = "'hydro' in _consumableRanges ? _consumableRanges.hydro.map : 0")
		(var subRadarRange:number = "'subRadar' in _consumableRanges ? _consumableRanges.subRadar.map : 0")
	)
	(style
		(hitTest = false)
	)
	# Radar
	(block
		(controller $Instance renderer='TMap_MapMarkerEnemyConsumableItemRange'
			(bind enabled "radarDisplayMode != TMap_DISPLAY_MODES.DISABLE && radarRange")
			(args _markerEntity="_markerEntity" _type="'RADAR'" _range="radarRange" _userPrefsNum="_userPrefsNum")
		)
	)
	# Hydro
	(block
		(controller $Instance renderer='TMap_MapMarkerEnemyConsumableItemRange'
			(bind enabled "hydroDisplayMode != TMap_DISPLAY_MODES.DISABLE && hydroRange")
			(args _markerEntity="_markerEntity" _type="'HYDRO'" _range="hydroRange" _userPrefsNum="_userPrefsNum")
		)
	)
	# SubRadar
	(block
		(controller $Instance renderer='TMap_MapMarkerEnemyConsumableItemRange'
			(bind enabled "subRadarDisplayMode != TMap_DISPLAY_MODES.DISABLE && subRadarRange")
			(args _markerEntity="_markerEntity" _type="'SUBRADAR'" _range="subRadarRange" _userPrefsNum="_userPrefsNum")
		)
	)
)

# Custom
(def element TMap_MapMarkerEnemyConsumableItemRange (_markerEntity:gfx, _type:str, _range:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var prefKey:str = "_type + '_ENEMY'")
		(var prefs:dict = "TMap_PREFS[prefKey]")

		(macro TT_GET_PREF_BOOL	_varName="'isThicknessFixed'"		_pref="TMap_PREFS.RANGE_OUTLINE_FIX")

		(macro TT_GET_PREF_BOOL	_varName="'isCircleFill'" _pref="prefs.FILL_CIRCLE")
		(macro TT_GET_PREF_NUMBER _varName="'alphaMultiplier'" _pref="prefs.ALPHA")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'" _pref="prefs.COLOR_INDEX")

		(macro TT_GET_PREF_NUMBER _varName="'outlineType'"			_pref="prefs.LINE_TYPE")
		(macro TT_GET_PREF_NUMBER _varName="'lineThicknessPref'"	_pref="prefs.LINE_THICKNESS")

		(macro TMap_GET_ALT_VISION)
		(macro TT_GET_PREF_NUMBER _varName="'displayMode'" _pref="prefs.DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isVisible'" _prefValue="displayMode")


		(var isOutlineDisabled:bool = "outlineType == TMap_OUTLINE_TYPES.DISABLE")
		(var isSolid:bool = "outlineType == TMap_OUTLINE_TYPES.SOLID")

		(var lineAlpha:number = "isOutlineDisabled ? 0 : 1")

		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "colorName in TMap_RANGE_COLORS ? TMap_RANGE_COLORS[colorName] : 0xBBBBBB")

		(var innerRadius:number = "isCircleFill ? 0 : MINIMAP_ASSETS_SIZE")
		(var drawDotted:bool = "outlineType == TMap_OUTLINE_TYPES.DOT")
		
		(var spacing:number = "isSolid	? 0 
										: 13"
		)
		(var dashLength:number = "isSolid	? 0 
											: 13"
		)

		(var rangeRadius:number = "_range")

		(var lineThickness:number = "isThicknessFixed ? lineThicknessPref * 0.1 / rangeRadius : lineThicknessPref")
	)

	(bind visible "isVisible")

	(style
		(hitTest = false)
	)

	(macro TMap_RANGE_CIRCLE)
)

# battle\minimap\markers\building_marker.unbound
(def element TMap_MapBuildingMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var markerScale:number = "_itemScale / _mapScale")

		(var buildingComponent:gfx = "_markerEntity.building")
		(var isSuppressed:bool = "buildingComponent.isSuppressed" (event "buildingComponent.evSuppressionChanged"))

		(var healthComponent:gfx = "_markerEntity.health" (event "_markerEntity.evAdded"))
		(var isAlive:bool = "healthComponent.isAlive" (event "healthComponent.evIsAliveChanged"))

		(var mapVisible:bool = "_markerEntity.visibility.mapVisible" (event "_markerEntity.visibility.evChanged"))

		(macro VAR_RELATION "_markerEntity")

		(var symbolName:str = "BUILDING_TYPE_SYMBOL_NAME[buildingComponent.type]")
		(var suppressedStr:str = "isSuppressed ? '_suppressed' : ''")
		(var relationStr:str = "'_' + (relation == RELATION_NAMES.OWN ? RELATION_NAMES.NEUTRAL : relation)")
		(var markerIcon:str =
			"!(mapVisible) 
				? 'symbol:minimap_' + symbolName + '_last_visible'
				: isAlive
					? 'symbol:minimap_' + symbolName + suppressedStr + relationStr
					: 'symbol:minimap_' + symbolName + '_dead'")

		
		(macro SCOPE_HIGHLIGHT_MARKER_ON_MAP_MOUSE_OVER "_markerEntity")
	)

	(macro BIND_FAIR_SCALE "markerScale")
	
	(block
		(macro EFFECT_HIGHLIGHT_MARKER_ON_MOUSE_OVER)
		(style
			(bind backgroundImage "markerIcon")
		)
	)
)

# battle\minimap\markers\capture_point_marker.unbound
(def element TMap_MapCapturePointMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var circleRadius:number = "_markerEntity.circle.radius" (event "_markerEntity.circle.evRadiusChanged"))
		(var circleInnerRadius:number = "_markerEntity.circle.innerRadius" (event "_markerEntity.circle.evInnerRadiusChanged"))
		(macro VAR_RELATION "_markerEntity")
		(macro SCOPE_HIGHLIGHT_MARKER_ON_MAP_MOUSE_OVER "_markerEntity")

		# Mod
		(macro TT_GET_PREF_BOOL _varName="'isContestedCapHighlighted'" _pref="TMap_PREFS.CONTESTED_CAPS")
		(var isBothInside:bool = "_markerEntity.capturePoint.bothInside" (event "_markerEntity.capturePoint.evBothInsideChanged"))
		(var capSettingKey:str = "toUpper(relation)")
		(var strokeSettingKey:str = "isBothInside && isContestedCapHighlighted ? 'CONTESTED' : capSettingKey")

		(var circleSetting:dict = "TMap_CAPTURE_POINTS_SETTINGS[capSettingKey]")
		(var strokeSetting:dict = "TMap_CAPTURE_POINTS_SETTINGS[strokeSettingKey]")
		#
	)

	(macro BIND_FAIR_SCALE "_itemScale / _mapScale")

	
	
	(block
		(style (position = "absolute"))
		(controller $Sector
			(bind arc "360")
			# Mod
			(bind colors "circleSetting.COLORS")
			(bind alphas "circleSetting.ALPHAS")
			(bind ratios "circleSetting.RATIOS")
			(bind radius "circleRadius * _scaleRatio")
			(bind innerRadius "circleInnerRadius * _scaleRatio")

			(bind lineThickness "strokeSetting.STROKE_WIDTH")
			(bind lineAlpha "0.6")
			(bind lineColor "strokeSetting.STROKE_COLOR")
			#
		)
	) 
	
	# Mod
	(element TMap_CapturePointIndicator "_markerEntity"
	#
		(style
			(hitTest = false)
			(marginLeft = "-50%") (marginTop = "-50%")
			(pivotX = "50%") (pivotY = "50%")
			(scaleX = "0.6") (scaleY = "0.6")
		)
		(macro EFFECT_HIGHLIGHT_MARKER_ON_MOUSE_OVER)
	)
)

# battle\markers\capture_point_marker.unbound
(def element TMap_CapturePointIndicator (_markerEntity:gfx, _isBattleStatsElement:bool=false) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'capturePoint')
		(macro GET_MARKER_ENTITY_COMPONENT 'progress')
		(macro GET_MARKER_ENTITY_COMPONENT 'relation')
		(macro VAR_RELATION "_markerEntity")

		(var pointType:number = "capturePointComponent ? capturePointComponent.type : 0")
		(var isLargeBase:bool = "isIn(pointType, [CONTROL_POINT_TYPE.MEGABASE, CONTROL_POINT_TYPE.BASE_WITH_POINTS])")
		(var isFlagPoint:bool = "isIn(pointType, [CONTROL_POINT_TYPE.BASE_WITH_POINTS, CONTROL_POINT_TYPE.MEGABASE, CONTROL_POINT_TYPE.BASE])")

		(var capturePointLabel:str = "capturePointComponent ? capturePointComponent.label : ''")
		(var isCapturePointActive:bool = "capturePointComponent ? capturePointComponent.active : 'false'" (event "capturePointComponent.evActiveChanged"))
		(var capturePointTimerName:str = "capturePointComponent ? capturePointComponent.timerName : ''" (event "_markerEntity.evAdded"))
		(var neutralProgress:number = "capturePointComponent ? capturePointComponent.neutralProgress : 0" (event "progressComponent.evChanged"))
		(var bothInside:bool = "capturePointComponent && capturePointComponent.bothInside" (event "capturePointComponent.evBothInsideChanged"))

		(var captureProgress:number = "progressComponent ? progressComponent.value : 0" (event "progressComponent.evChanged"))
		(var isCaptured:bool = "captureProgress == 0")

		(var timerEntity:gfx = "_isBattleStatsElement ? $datahub.getSingleEntity(CC.battleTimer) : null")
		(var currentTime:number = "timerEntity && timerEntity.battleTimer ? timerEntity.battleTimer.battleTime : 0" (event "timerEntity.battleTimer.evBattleTimeChanged"))
	
		(var linkedTimerTaskWatcher:gfx = "_isBattleStatsElement ? $datahub.getPrimWatcher(CC.task, capturePointTimerName) : null")
		(var linkedTimerTask:gfx = "linkedTimerTaskWatcher ? linkedTimerTaskWatcher.entity : null" (event "linkedTimerTaskWatcher.event"))
		(var timeoutComponent:gfx = "linkedTimerTask ? linkedTimerTask.timeout : null" (event "linkedTimerTask.evAdded") (event "linkedTimerTask.evRemoved"))
		(var linkedTimerValue:number = "timeoutComponent ? timeoutComponent.time : 0" (event "timeoutComponent.evTimeChanged") (event "timeoutComponent.evRunningChanged"))
		(var timeLeftToCapturePointActivation:number = "linkedTimerValue > currentTime ? linkedTimerValue - currentTime : 0")

		
		(var invaderRelation:number = "capturePointComponent ? capturePointComponent.invaderRelation : 0" (event "capturePointComponent.evInvaderChanged"))
		(var relationValue:number = "relationComponent ? relationComponent.value : SC.Battle.PLAYER_RELATION.SELF" (event "relationComponent.evChanged"))
		(var barRelation:number = "isCaptured ? relationValue : invaderRelation")
		(var isAlly:bool = "relationValue == SC.Battle.PLAYER_RELATION.ALLY")
		(var isEnemy:bool = "relationValue == SC.Battle.PLAYER_RELATION.ENEMY")
		(var isNeutral:bool = "relationValue == SC.Battle.PLAYER_RELATION.NEUTRAL")

		
		(var isCaptureInProgress:bool = "bothInside || captureProgress > 0 || neutralProgress" (event "progressComponent.evChanged") (event "capturePointComponent.evBothInsideChanged"))
		(var progressInvertion:number = "invaderRelation == SC.Battle.PLAYER_RELATION.ALLY ? 1 : -1")
		(var indicatorProgress:number = "isCaptureInProgress    ? captureProgress == 0  ? 360 
																						: 360 * captureProgress * progressInvertion
																: 0")

		
		(var iconPostfix:str = "isLargeBase ? '_expensive.png' : '.png'")
		(var capturedBarSymbol:str = "isCaptureInProgress   ?   isAlly  ? 'capture_base_bar_green' :
																isEnemy ? 'capture_base_bar_red'
																		: ''
															: ''")
		(var capturedBarPath:str = "capturedBarSymbol ? CAPTURE_POINT_ASSETS_PATH + capturedBarSymbol + iconPostfix : ''")

		(var invaderBarSymbol:str = "isCaptureInProgress	?	barRelation == SC.Battle.PLAYER_RELATION.ALLY	? 'capture_base_bar_green' :
																barRelation == SC.Battle.PLAYER_RELATION.ENEMY	? 'capture_base_bar_red'
																												: ''
															: ''")
		(var invaderBarPath:str = "invaderBarSymbol ? CAPTURE_POINT_ASSETS_PATH + invaderBarSymbol + iconPostfix : ''")

		(var indicatorSymbol:str = "isNeutral || isCaptureInProgress ? 'capture_base_bar_dark' : ''")
		(var indicatorPath:str = "indicatorSymbol ? CAPTURE_POINT_ASSETS_PATH + indicatorSymbol + iconPostfix : ''")

		(var capturedBgSymbol:str = "!(isCaptureInProgress) ? 	isAlly	? 'capture_base_captured_ally' :
									 							isEnemy	? 'capture_base_captured_enemy'
									 									: ''
															: ''")
		(var capturedBgPath:str = "capturedBgSymbol ? CAPTURE_POINT_ASSETS_PATH + capturedBgSymbol + iconPostfix : ''")

		(var labelTextColor:number = "	isAlly 	? CAPTURE_POINT_LABEL_COLORS.GREEN :
										isEnemy ? CAPTURE_POINT_LABEL_COLORS.RED
												: CAPTURE_POINT_LABEL_COLORS.WHITE")
	)

	
	
	

	(block
		(style
			(bind alpha "isCapturePointActive ? 1 : 0.5")
			(pivotX = "50%") (pivotY = "50%")
			(align = "center|middle")
		)

		(controller $Animation
			(bindcall play	duration="CAPTURE_POINT_ANIM_DURATION"
							from="{rotation: 45}"
							to="{rotation: 0}"
							(bind enabled "isCaptureInProgress")
							(bind trigger "indicatorPath")
			)

			(bindcall play	duration="CAPTURE_POINT_ANIM_DURATION"
							from="{rotation: -45}"
							to="{rotation: 0}"
							(bind enabled "!(isCaptureInProgress)")
							(bind trigger "indicatorPath")
			)
		)

		
		
		
		(block
			(style
				(bind backgroundImage "indicatorPath")
				(backgroundSize = "autosize")
				(align = "center|middle")
			)

			(block
				(style
					(bind backgroundImage "capturedBgPath")
					(backgroundSize = "autosize")
				)
			)

			
			
			
			(block
				(class $FullsizeAbsolute)
				(bind visible "!(isNeutral) && isCaptureInProgress")
				(style (bind backgroundImage "capturedBarPath"))
			)

			
			
			
			(block
				(class $FullsizeAbsolute)
				(style (align = "center|middle"))

				(block
					(controller $Sector
						(bind arc "indicatorProgress")
						(offset = "-90")
						(radius = "23")
					)
					(isMask = true)
				)

				(block
					(class $FullsizeAbsolute)
					(style (bind backgroundImage "invaderBarPath"))
				)
			)
		)

		
		
		
		(controller $FxInstance renderer='CapturePointIndicatorFX' lifetime="1"
			(bindcall create (bind trigger "isCaptureInProgress"))
			(args "indicatorPath ? indicatorPath : capturedBgPath")
		)
	)

	
	
	
	(block
		(bind visible "!_isBattleStatsElement || isCapturePointActive")
		(class $FullsizeAbsolute)
		(style (align = "center|middle"))

		(tf 
			(bind visible "!(isFlagPoint)")
			(class $WorldMarkerTextItemShadowFilter)
			(class $TextDefaultBold17NM)
			(style (bind textColor "labelTextColor"))
			(bind text "capturePointLabel")
		)

		(block
			(bind visible "isFlagPoint")
			(style
				(bind backgroundImage "CAPTURE_POINT_ASSETS_PATH + 'icon_base_' + relation + '_flag.png'")
				(backgroundSize = "autosize")
			)
		)
	)

	(block $enabled = "_isBattleStatsElement"
		(bind visible "!isCapturePointActive && timeLeftToCapturePointActivation > 0")
		(class $FullsizeAbsolute)
		(style
			(backgroundColor = "0x01000000")
			(align = "center|middle")
		)
		
		(controller $Tooltip (renderer = 'SimpleStatusTooltip')
			(args 
				_unifiedStatus="SC.Ui_styles.UNIFIED_STATUS.DEFAULT"
				_text="'IDS_TIME_TILL_CAPTURE_POINT_ACTIVATION'"
			)
			(align="bottom|center")
			(position="border")
			(offset=[0, 6])
			(screenBoundsOffset={left:10, top:10, right:10, bottom:10})
			(macro SIMPLE_TOOLTIP_ANIMATION)
		)

		(tf
			(class $TextDefaultBoldNM)
			(bind text "countdownFormat(timeLeftToCapturePointActivation, 0, true, true)")
		)
	)
)

# battle\minimap\markers\epicenter_marker.unbound
(def element TMap_MapEpicenterMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _isLoading:bool = false, _userPrefsNum:gfx=null) layout=true
	(scope
		(var points:gfx = "$datahub.getCollection(CC.capturePoint).child('epicenter').child(_markerEntity.epicenter.id)")
	)
	(controller $Repeat renderer='TMap_MapEpicenterCircle' 
		(bind count "points.items.length")
		(args _scaleRatio="_scaleRatio" _userPrefsNum="_userPrefsNum")
	)

	(macro BIND_FAIR_SCALE "_itemScale / _mapScale")
)

# battle\minimap\markers\scenario_marker.unbound
(def element TMap_MapScenarioObjectMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro GET_SCENARIO_OBJECT_VIEW "_markerEntity.scenarioObject" "_markerEntity")

		(event evShow)
		(event evHide)
	)

	(dispatch evShow on=addedToStage)
	(dispatch evHide (event "_markerEntity.scenarioObject.evHide"))

	(macro BIND_FAIR_SCALE "_itemScale / _mapScale")

	(style 
		(position = "absolute")
		(width = "0px")
		(height = "0px")
		(align = "center|middle")
	)

	(block
		(style
			(position = "absolute") (top = "-13px") (left = "-13px") (width = 25px) (height = 25px)
			(bind backgroundImage "'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_' + toLower(SC.Battle.SCENARIO_MARKER_VALUE.VALUE_TO_NAME[type]) + '.png'")
		)

		(controller $Animation
			(bindcall  play
				duration=0.3
				from={alpha: 0, scaleX: 0, scaleY: 0}
				to={alpha: 1, scaleX: 1, scaleY: 1}
				easing="Easing.quint_in"
				(event "evShow")
			)
			(bindcall  play
				duration=0.3
				from={alpha: 1, scaleX: 1, scaleY: 1}
				to={alpha: 0, scaleX: 0, scaleY: 0}
				easing="Easing.quint_in"
				(event "evHide")
			)
		)
	)
)

# battle\minimap\markers\epicenter_marker.unbound
(def element TMap_MapEpicenterCircle (_scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope

		(var collection:gfx = "$datahub.getCollection(CC.capturePoint)")
		(var entity:gfx = "collection.items[$index]")

		(var circleRadius:number = "entity.circle.radius * _scaleRatio" (event "entity.circle.evRadiusChanged"))
		(var circleInnerRadius:number = "entity.circle.innerRadius * _scaleRatio" (event "entity.circle.evInnerRadiusChanged"))

		(var captureProgress:number = "entity.progress.value" (event "entity.progress.evChanged"))
		(var invaderRelation:str = "entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'" (event "entity.capturePoint.evInvaderChanged"))
		(var isCaptureInProgress:bool = "entity.capturePoint.bothInside || (captureProgress != 0)" (event "entity.capturePoint.evBothInsideChanged"))

		(macro VAR_RELATION "entity")
	)

	(style (position = "absolute"))

	
	
	
	(block
		(style (position = "absolute"))		
		(controller $Sector
			(offset = "-90")
			(bind colors "EPICENTER_POINTS_SETTINGS[toUpper(relation)].COLORS")
			(bind alphas "EPICENTER_POINTS_SETTINGS[toUpper(relation)].ALPHAS")
			(bind ratios "EPICENTER_POINTS_SETTINGS[toUpper(relation)].RATIOS")
			(bind arc "360 * (1 - captureProgress) * (invaderRelation == 'ally' ? -1 : 1)")
			(bind radius "circleRadius")
			(bind innerRadius "circleInnerRadius")
		)
	)

	
	
	
	(block
		(style (position = "absolute"))
		(controller $Sector
			(arc = "360")
			(offset = "0")

			(bind radius "circleRadius")
			(bind colors "[0xFFFFFF]")
			(bind alphas "[0]")
			(bind ratios "[0]")

			(bind lineThickness "2")
			(bind lineAlpha "0.4")
			(bind lineColor "EPICENTER_POINTS_SETTINGS[toUpper(relation)].STROKE_COLOR")
		)
	)

	
	
	
	(block
		(style (position = "absolute"))
		(alpha = 0.3)
		
		(controller $Sector
			(offset = "-90")
			(bind color "EPICENTER_POINTS_SETTINGS[toUpper(invaderRelation)].STROKE_COLOR")
			(bind arc "360 * captureProgress * (invaderRelation == 'ally' ? 1 : -1)")
			(bind radius "circleRadius + 1")
			(bind innerRadius "circleInnerRadius + 1")
		)
	)
)

# battle\minimap\markers\plane_marker.unbound
(def element TMap_MapSquadronMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var markerYaw:number = "radToGrad(_markerEntity.mapPosition.yaw)" (event "evEnterFrame"))
		(var markerScale:number = "_itemScale / _mapScale")

		(var aircarrier:gfx = "$datahub.getSingleComponent(CC.aircarrier)")
		(var activeSquadron:number = "aircarrier.activeSquadron" (event "aircarrier.evStateChanged"))
		(var isControlledByPlayer:bool = "_markerEntity.ownSquadron && _markerEntity.ownSquadron.id == activeSquadron")

		(var planeTypeInt:number = "_markerEntity.plane.planeType")
		(var markerElement:gfx = "planeTypeInt == SC.Battle.PLANES_TYPES.AIRSHIP ? 'TMap_MapMarkerAirshipicon' : 'TMap_MapMarkerSquadronIcon'")
		(macro SCOPE_HIGHLIGHT_MARKER_ON_MAP_MOUSE_OVER "_markerEntity")

		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		(var minimapComponent:gfx = "minimapEntity.minimap")
		(var angleToRotate:number = "minimapComponent && !isControlledByPlayer ? minimapComponent.rotationAngleDeg : 0" (event "minimapComponent.evRotationAngleDegChanged"))
	)

	(style
		(bind rotation "-(angleToRotate)")
	)

	(controller $Instance (renderer = 'TMap_MapMarkerRanges') 
		(bind enabled "isControlledByPlayer")
		(args entity="_markerEntity" mapScale="_mapScale" _userPrefsNum="_userPrefsNum")
	)

	(block
		(macro BIND_FAIR_SCALE "markerScale")
		(macro EFFECT_HIGHLIGHT_MARKER_ON_MOUSE_OVER)
		(controller $Instance
			(bind renderer "markerElement")
			(args "_markerEntity" "markerYaw" _markerScale="markerScale" _userPrefsNum="_userPrefsNum")
			(bind enabled "_markerEntity != null")
		)
	)
)

# battle\minimap\markers\plane_marker.unbound
(def element TMap_MapMarkerAirshipicon (_markerEntity:gfx, _rotation:number, _markerScale:number=1.0, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'relation')
		(var relationStr:str = "toLower(SC.Battle.PLAYER_RELATION.VALUE_TO_NAME[relationComponent.value])")
		(var markerIcon:str = "'svg:../battle_hud/markers/convoy_airships/marker_' + relationStr + '.svg'")
	)
	(style
		(width = "24")
		(height = "24")
	)
	(block
		(style
			(width = 0) (height = 0)
			(align = "center|middle")
			(bind rotation "_rotation")
		)

		(block
			(style
				(bind backgroundImage "markerIcon")
				(backgroundSize = "autosize")
			)
		)
	)
)

# battle\minimap\markers\plane_marker.unbound
(def element TMap_MapMarkerSquadronIcon (_markerEntity:gfx, _rotation:number, _markerScale:number=1.0, _userPrefsNum:gfx=null) layout=true
	(scope
		(var rotation:number = "_rotation")

		(var planeTypeInt:number = "_markerEntity.plane.planeType")
		(var ammoType:number = "_markerEntity.plane.ammoType")
		(var ammoTypeName:str = "SC.Common.PLANE_AMMO_TYPES.VALUE_TO_NAME[ammoType]")
		(var customUIPostfix:str = "_markerEntity.plane.customUIPostfix")
		(var isModified:bool = "_markerEntity.plane.isModified")
		(var isConsumable:bool = "_markerEntity.plane.isConsumable && !_markerEntity.plane.isAirSupport")

		(var ammoPostfix:str = "ammoTypeName in SC.Common.PLANE_AMMO_TYPES.SHORT_NAMES && !isConsumable	? SC.Common.PLANE_AMMO_TYPES.SHORT_NAMES[ammoTypeName]
																										: ''"
		)
		(var planeCathegoryFolder:str = "	_markerEntity.plane.isAirSupport		? 'airsupport/' :
											_markerEntity.plane.isConsumable		? 'consumables/'
																				: 'controllable/'"
		)
		(var postfix:str = "isModified ? '_upgrade' : ''")
		(var planeIconPath:str = "planeCathegoryFolder + PLANE_TYPE_TO_STR[planeTypeInt] + ammoPostfix + customUIPostfix + postfix")
		
		(var ownerEntity:gfx = "_markerEntity.squadron.owner.ref")
		(var ownerAvatar:gfx = "ownerEntity.avatar")
		(var ownerDivision:gfx = "ownerEntity.divisionMember")

		(var healthComponent:gfx = "_markerEntity.health" (event "_markerEntity.evAdded"))
		(var isInSameDivision:bool = "ownerDivision && ownerDivision.isInSameDivision" (event "ownerDivision.evDivisionChanged"))

		(var relationComponent:gfx = "ownerEntity.relation ? ownerEntity.relation : _markerEntity.relation")
		(var isSelf:bool = "relationComponent ? relationComponent.value == SC.Battle.DIPLOMACY_RELATIONS.SELF : false")
		(var isAlly:bool = "relationComponent ? relationComponent.value == SC.Battle.DIPLOMACY_RELATIONS.ALLY : false")
		(var tkStatus:bool = "ownerAvatar.tkStatus && isAlly" (event "ownerAvatar.evTeamkillStatusChanged"))

		(var aircarrier:gfx = "$datahub.getSingleComponent(CC.aircarrier)")
		(var activeSquadron:number = "aircarrier.activeSquadron" (event "aircarrier.evStateChanged"))
		(var isControlledByPlayer:bool = "_markerEntity.ownSquadron && _markerEntity.ownSquadron.id == activeSquadron")
		(var isCameraAttachedToPlane:bool = "isSelf && isControlledByPlayer")

		(var markerPlaneIconPath:str = 
			"isSelf
				? isControlledByPlayer
					? 'swf:../fla/minimap/minimap.swf:minimap_self_alive'
					: planeIconPath + '_own'
				: isAlly
					? isInSameDivision
						? planeIconPath + '_division'
						: tkStatus 
							? planeIconPath + '_teamkiller'
							: planeIconPath + '_ally'
					: planeIconPath + '_enemy'"
		)
		(var markerIcon:str = "'url:../battle_hud/markers_minimap/plane/' + markerPlaneIconPath + '.png'")

		# Mod
		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		(var minimapComponent:gfx = "minimapEntity.minimap")
		(var angleToRotate:number = "minimapComponent ? minimapComponent.rotationAngleDeg : 0" (event "minimapComponent.evRotationAngleDegChanged"))

		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))
		(macro TMap_GET_ALT_VISION)
		(macro TT_GET_PREF_NUMBER _varName="'isDirectionLineEnabled'" _pref="TMap_PREFS.DIRECTION_SQUADRONS")
		(macro TMap_GET_DISPLAY_MODE _varName="'isDirectionLineVisible'" _prefValue="isDirectionLineEnabled")
		(var isInVisionRange:bool = "_markerEntity && _markerEntity.hasComponent(CC.screenPosition)" (event "_markerEntity.evAdded")(event "_markerEntity.evRemoved"))

		(macro TT_GET_PREF_NUMBER _varName="'playerNameDisplayMode'"	_pref="TMap_PREFS.PLANE_OWNER_NAME_DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isPlayerNameVisible'"	_prefValue="playerNameDisplayMode")

		(macro TT_GET_PREF_NUMBER _varName="'shipNameDisplayMode'"	_pref="TMap_PREFS.PLANE_OWNER_SHIP_DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isShipNameVisible'"		_prefValue="shipNameDisplayMode")

		(var isAirSupport:bool = "_markerEntity.plane.isAirSupport")

		(var visiblePrefKey:str = "isAirSupport ? 'PLANE_OWNER_AIRSUPPORTS' : 'PLANE_OWNER_MAIN_SQUADRONS' ")
		(macro TT_GET_PREF_BOOL _varName="'isNameVisiblePref'" _pref="TMap_PREFS[visiblePrefKey]")
		(var isNameVsibleType:bool = "isConsumable  ? false
													: isNameVisiblePref"
		)
		#
	)
	(style 
		(width = 0) (height = 0)
		(align = "center|middle")
		(bind rotation "isCameraAttachedToPlane ? rotation : 0")
	)

	# Mod

	# Direction Line
	(block
		(style
			(position = "absolute")
		)
		(controller $Instance (renderer = 'TMap_MapMarkerDirectionalLine')
			(bind enabled "isDirectionLineVisible && isInVisionRange && !(isSelf  || isAlly || isConsumable)")
			(args _isFullSize="false" _userPrefsNum="_userPrefsNum")
			(exprs
				(style
					(bind rotation "rotation + angleToRotate")
					(bind alpha "rangesAlpha")
				)
			)
		)
		(macro BIND_FAIR_SCALE "1 / _markerScale")
	)

	# Player Name
	(block
		(style
			(position = "absolute")
			(pivotY = 16)
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerPlayerName')
				(bind enabled "!isSelf && ownerEntity && isPlayerNameVisible && isNameVsibleType")
				(args _markerEntity="ownerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
	)

	# Ship Name
	(block
		(style
			(position = "absolute")
			(pivotY = -8)
		)
		(block
			(controller $Instance (renderer = 'TMap_MapMarkerOwnerShipName')
				(bind enabled "!isSelf && ownerEntity && isShipNameVisible && isNameVsibleType")
				(args _markerEntity="ownerEntity" _userPrefsNum="_userPrefsNum")
			)
		)
	)
	#
	#

	(block
		(style
			(bind backgroundImage "isCameraAttachedToPlane ? markerPlaneIconPath : markerIcon")
			
			(bind backgroundSize "isCameraAttachedToPlane ? repeat : autosize")
		)
	)
)

# battle\minimap\markers\torpedo_marker.unbound
(def element TMap_MapTorpedoMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		# FIX
		(var markerYaw:number = "radToGrad(_markerEntity.mapPosition.yaw) + 180.0" (event "evEnterFrame"))

		(macro TT_GET_PREF_BOOL _varName="'isVisible'" _pref="TMap_PREFS.TORPEDO_MARKER")
		#

		(var markerScale:number = "_itemScale / _mapScale")

		(macro GET_MARKER_ENTITY_COMPONENT 'torpedo')
		(macro GET_MARKER_ENTITY_COMPONENT 'distance')
		(macro VAR_RELATION "_markerEntity")

		(var type:str = "torpedoComponent.type" (event "torpedoComponent.evTypeChanged"))
		
		(var visibleAsNormal:bool = "isIn(type, SC.Battle.TORPEDO_MARKER_TYPE.GUIDED_TYPES)")

		(var markerIcon:str = "visibleAsNormal	?	'icon_torpedo_' + SC.Battle.TORPEDO_MARKER_TYPE.NORMAL + '_' + relation
												:	'icon_torpedo_' + type + '_' + relation")
	)

	# Mod
	(bind visible "isVisible")
	#

	# FIX
	(style
		(width = 0) (height = 0)
		(align = "center|middle")
		(bind rotation "markerYaw")
	)
	#

	(macro BIND_FAIR_SCALE "markerScale * 0.75")

	(block
		(style
			(bind backgroundImage "'url:../battle_hud/markers/torpedoes/' + markerIcon + '.png'")
			(backgroundSize = "autosize")
		)
	)
)

# battle\minimap\markers\camera_marker.unbound
(def element TMap_MapCameraMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _isLoading:bool = false, _userPrefsNum:gfx=null) layout = true
	(scope
		(var cameraYaw:number = "radToGrad(_markerEntity.camera.yaw)" (event "evEnterFrame"))
		(var isTacticalCam:bool = "_markerEntity.camera.isTactical" (event "_markerEntity.camera.evTacticalStateChanged"))

		(var visibilityRangeRadius:number = "_markerEntity.camera.visibilityRangePerc" (event "_markerEntity.camera.evVisibilityRangeChanged"))
		(var visibilityVectorRadius:number = "max(visibilityRangeRadius, 0.5)" (event "_markerEntity.camera.evVisibilityRangeChanged"))
		(var cameraFrustumAngle:number = "radToGrad(_markerEntity.camera.frustumAngle)" (event "_markerEntity.camera.evFrustumAngleChanged"))
	)

	(bind visible "!_isLoading")
	(controller $Animation
		(bindcall play  duration=0.15 
						delay=0 
						to={alpha: 0} 
						easing="Easing.cubic_in" 
						(bind enabled "isTacticalCam")
		)
		(bindcall play  duration=0.15
						delay=0 
						to={alpha: 1}
						easing="Easing.cubic_out" 
						(bind enabled "!(isTacticalCam)")
		)
	)

	(block 
		(block
			(isMask = true)
			(macro BIND_FAIR_SCALE "visibilityVectorRadius * 2")
			(style
				(position = "absolute")
				(backgroundImage = "'symbol:minimap_observe_mask'")
			)
		)
		(style 
			(position = "absolute")
			(width = "1px")
			(height = "1px")
			(backgroundImage = "'symbol:minimap_frustum_edge_vector'")
			(bind rotation "cameraYaw")
		)
		(alpha = "0.7")
	)


	(block
		(block
			(isMask = true)
			(macro BIND_FAIR_SCALE "visibilityRangeRadius * 2")
			(style
				(position = "absolute")
				(backgroundImage = "'symbol:minimap_observe_mask'")
			)
		)
		(bind alpha "0.08")
		(style
			(bind rotation "(cameraYaw - cameraFrustumAngle / 2)")
		)
		(controller $Sector
			(bind color "0x7dffff")
			(bind arc "cameraFrustumAngle")
			(bind offset "-90")
			(bind radius "300")
		)
	)
)

# battle\minimap\markers\aim_position_marker.unbound
(def element TMap_MapAimPositionMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _isLoading:number=false, _userPrefsNum:gfx=null) layout=true
	(scope
		(var isVisible:bool = "_isLoading ? false : _markerEntity.aimPosition.visible" (event "_markerEntity.aimPosition.evChanged"))
		(var position:gfx = "_markerEntity.mapPosition.position")
		(var posX:number = "position.x" (event "evEnterFrame"))
		(var posY:number = "position.y" (event "evEnterFrame"))
		(var yaw:number = "radToGrad(_markerEntity.mapPosition.yaw)" (event "evEnterFrame"))

		(var offset:number = "_markerEntity.aimPosition.offset" (event "evEnterFrame"))

		(var rangesAlphaComponent:gfx = "$datahub.getPrimaryEntity(CC.minimapOption, SC.Battle.MINIMAP_OPTION.rangesAlpha).minimapOption")
		(var rangesAlpha:number = "rangesAlphaComponent.value * 0.01" (event "rangesAlphaComponent.evValueChanged"))

		(var positionX:number = "posX * _scaleRatio" watch=false)
		(bind positionX "posX * _scaleRatio" watch=false init=false (bind trigger "_scaleRatio"))
		(controller $Animation
			(bindcall play  duration=0.07
							easing="Easing.line"
							to="{ positionX:position.x * _scaleRatio }"
							watch=false
							(bind trigger "posX")
							(bind enabled "isVisible")
			)
		)

		(var positionY:number = "posY * _scaleRatio" watch=false)
		(bind positionY "posY * _scaleRatio" watch=false init=false (bind trigger "_scaleRatio"))
		(controller $Animation
			(bindcall play  duration=0.07
							easing="Easing.line"
							to="{ positionY:position.y * _scaleRatio }"
							watch=false
							(bind trigger "posY")
							(bind enabled "isVisible")
			)
		)

		# Mod
		(macro TT_GET_PREF_NUMBER _varName="'markerType'"	_pref="TMap_PREFS.AIM_MARKER_TYPE")
		(var elemIndex:number = "markerType < TMap_AIM_POSITION_ELEMENTS.length ? markerType: 0")
		(var elem:str = "TMap_AIM_POSITION_ELEMENTS[elemIndex]")

		(macro TT_GET_PREF_NUMBER _varName="'colorIndex'"	_pref="TMap_PREFS.AIM_MARKER_COLOR_INDEX")
		(var colorName:str = "colorIndex < TMap_RANGE_COLORS.ALL.length ? TMap_RANGE_COLORS.ALL[colorIndex] : TMap_RANGE_COLORS.ALL[0]")
		(var color:number = "TMap_RANGE_COLORS[colorName]")

		(macro TMap_GET_RGB _hexValue="color")
		(var ct:dict = "{redMultiplier:0, greenMultiplier: 0, blueMultiplier: 0, redOffset: red, greenOffset: green, blueOffset: blue}")

		(macro TT_GET_PREF_NUMBER _varName="'scale'"	_pref="TMap_PREFS.AIM_MARKER_SCALE")
		#
	)
	(style
		(position = "absolute")
		(bind left "positionX")
		(bind top "positionY")
		# Mod
		(bind rotation "elemIndex == 0 ? yaw : 0")
		#
		(bind alpha "rangesAlpha")
	)

	(macro BIND_FAIR_SCALE "_mapScale")

	(bind visible "isVisible")
	(block
		(style
			(position = "absolute")
			(bind top "-offset")
			(bind scaleX "scale")
			(bind scaleY "scale")
		)
		(controller $Instance
			(bind renderer "elem")
		)
		(bind colorTransform "ct")
	)
)

(def element TMap_AimPositionDefault()
	(style
		(backgroundImage = "'symbol:minimap_aim_position'")
	)
)

(def element TMap_AimPositionCrossBase(_rotation:number)
	(.graphics
		(lineStyle "0.7" "0xeeeeee")
		(moveTo "-2" "-2")
		(lineTo "2" "2")
		(moveTo "2" "-2")
		(lineTo "-2" "2")
		# very counterintuitive but okay sqrt2 seemed good
	)
	(style
		(bind rotation "_rotation")
	)
	(cacheAsBitmap = true)
)

(def element TMap_AimPositionCross1()
	(element TMap_AimPositionCrossBase _rotation="45")
)

(def element TMap_AimPositionCross2()
	(element TMap_AimPositionCrossBase _rotation="0")
)

# battle\minimap\markers\interactive_zone_marker.unbound
(def element TMap_MapInteractiveZoneMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var markerScale:number = "_itemScale / _mapScale")

		(var type:number = "_markerEntity.interactiveZone.type")
		(var visualType:number = "_markerEntity.interactiveZone.visualType")
		(var isInversed:bool = "visualType == SC.Battle.INTERACTIVE_ZONE_VISUAL_TYPE.INVERSED")
		(var relation:number = "_markerEntity.relation.value" (event "_markerEntity.relation.evChanged"))
		(var circleSettings:dict = "type == INTERACTIVE_ZONE_TYPES.COLORED_BY_RELATION ? COLORED_BY_RELATION_INTERACTIVE_ZONES_SETTINGS[relation] : INTERACTIVE_ZONES_SETTINGS[type]")
		(var circleRadius:number = "_markerEntity.circle.radius" (event "_markerEntity.circle.evRadiusChanged"))

		(event evShow)
		(event evHide)
	)

	(dispatch evShow on=addedToStage)
	(dispatch evHide (event "_markerEntity.interactiveZone.evHide"))

	
	
	(block
		(macro BIND_FAIR_SCALE "circleRadius")
		(bind alpha "circleSettings.alpha")
		(style (position = "absolute"))
		(block
			(controller $Sector
				(bind arc "360")
				(bind color "isInversed ? C_ENEMY : circleSettings.color")
				(bind radius "MINIMAP_ASSETS_SIZE")
				(bind innerRadius "isInversed ? 3000 : 0")
			)

			(controller $Animation
				(bindcall  play
					duration=0.3
					from={alpha: 0}
					to={alpha: 1}
					easing="Easing.quint_in"
					(event "evShow")
				)
				(bindcall  play
					duration=0.3
					to={alpha: 0}
					easing="Easing.quint_in"
					(event "evHide")
				)
			)
		)
	) 
	

	
	
	(block
		(style (position = "absolute"))
		# TODO: Override these renderers too
		(controller $Instance (renderer = 'MapInteractiveZoneIndicator') 
			(bind enabled "type == INTERACTIVE_ZONE_TYPES.RESOURCE_ZONE")
			(args entity="_markerEntity")
			(exprs
				(macro BIND_FAIR_SCALE "markerScale")
			)
		)

		(controller $Instance (renderer = 'MapDropZoneIndicator') 
			(bind enabled "type == INTERACTIVE_ZONE_TYPES.DROP_ZONE")
			(args entity="_markerEntity")
			(exprs
				(macro BIND_FAIR_SCALE "markerScale")
			)
		)

		(controller $Instance (renderer = 'MapRescueZoneIndicator') 
			(bind enabled "type == INTERACTIVE_ZONE_TYPES.RESCUE_ZONE")
			(args entity="_markerEntity")
			(exprs
				(macro BIND_FAIR_SCALE "markerScale")
			)
		)

		(controller $Instance (renderer = 'MapOrbitalStrikeZoneIndicator') 
			(bind enabled "type == INTERACTIVE_ZONE_TYPES.ORBITAL_STRIKE_ZONE")
			(args entity="_markerEntity")
			(exprs
				(macro BIND_FAIR_SCALE "markerScale")
			)
		)

		(controller $Animation
			(bindcall  play
				duration=0.3
				from={alpha: 0, scaleX: 0, scaleY: 0}
				to={alpha: 1, scaleX: 1, scaleY: 1}
				easing="Easing.quint_in"
				(event "evShow")
			)
			(bindcall  play
				duration=0.3
				from={alpha: 1, scaleX: 1, scaleY: 1}
				to={alpha: 0, scaleX: 0, scaleY: 0}
				easing="Easing.quint_in"
				(event "evHide")
			)
		)
	)
	
)

# battle\minimap\markers\ward_fighters_marker.unbound
(def element TMap_MapWardFightersMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(var circleRadius:number = "_markerEntity.circle.radius" (event "_markerEntity.circle.evRadiusChanged"))

		(event evShow)
		(event evHide)
	)
	(dispatch evShow on=addedToStage)
	(dispatch evHide (event "_markerEntity.interactiveZone.evHide"))

	(macro BIND_FAIR_SCALE "circleRadius")

	(alpha = 0.18)

	
	
	(block
		(style (position = "absolute"))

		(block
			(controller $Sector
				(bind arc "360")
				(bind color "WARD_ZONES_RELATION_COLORS[_markerEntity.relation.value]")
				(bind radius "MINIMAP_ASSETS_SIZE")
			)

			(controller $Animation		
				(bindcall  play
					duration=0.3
					from={alpha: 0}
					to={alpha: 1}
					easing="Easing.quint_in"
					(event "evShow")
				)
				(bindcall  play
					duration=0.3
					to={alpha: 0}
					easing="Easing.quint_in"
					(event "evHide")
				)
			)
		)
	) 
	
)

# battle\minimap\markers\navpoint_marker.unbound
(def element TMap_MapNavpointMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	# TODO: Add drag?
	# This doesnt work: use CC.navpoint
	(scope		
		(var minimapPathComponent:gfx = "_markerEntity.minimapPath")
		(var minimapPath:array = "minimapPathComponent.minimapPath" (event "minimapPathComponent.evMinimapPathChanged"))
		
		(var vehicleEntity:gfx = "$datahub.getSingleEntity(CC.selfVehicle)")
		(var mapPositionComponent:gfx = "vehicleEntity.mapPosition")
		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
	)

	(mc 'lesta.libs.unbound2.AutopilotPathDrawer'
		(bindcall setSettings "_scaleRatio" "minimapPathComponent.color" init=true)
		(bindcall drawPathByCoords "minimapPath" init=true)
		(bindcall drawBowPoint "mapPositionComponent.position" watch=false (event "timer.evFrequent"))
	)
)

# battle\minimap\markers\minimap_bezier_path_marker.unbound
(def element TMap_MapPathMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	# TODO: override the renderers
	(scope
		(var minimapComponent:gfx = "$datahub.getSingleComponent(CC.minimap)")
		(var angleToRotate:number = "minimapComponent ? minimapComponent.rotationAngleDeg : 0" (event "minimapComponent.evRotationAngleDegChanged"))

		(var minimapPathComponent:gfx = "_markerEntity.minimapBezierPath")
		(var minimapPath:array = "minimapPathComponent.path" (event "minimapPathComponent.evPathChanged"))
		(var relation:number = "_markerEntity.relation.value" (event "_markerEntity.relation.evChanged"))
		(var missionIndex:number = "_markerEntity.scenarioMissionParticipant.index")
		(var missionProgress:number = "_markerEntity.progress.value" (event "_markerEntity.progress.evChanged"))
		(var posX:number = "_scaleRatio * minimapPath[0].x")
		(var posY:number = "_scaleRatio * minimapPath[0].y")

		(var isOvered:bool = "false")
		(bind isOvered "!isOvered" watch=false (event "minimapPathComponent.evBlink"))

		(var allyNumberPointsCollection:gfx = "$datahub.getCollection(CC.minimapBezierPath).child('byTeam').child(SC.Battle.PLAYER_RELATION.ALLY)")
		(var allyNumberPointsList:array = "allyNumberPointsCollection.items" (event "allyNumberPointsCollection.evAdded") (event "allyNumberPointsCollection.evRemoved"))	
		(var enemyNumberPointsCollection:gfx = "$datahub.getCollection(CC.minimapBezierPath).child('byTeam').child(SC.Battle.PLAYER_RELATION.ENEMY)")
		(var enemyNumberPointsList:array = "enemyNumberPointsCollection.items" (event "enemyNumberPointsCollection.evAdded") (event "enemyNumberPointsCollection.evRemoved"))	
		(var isNumberPointVisible:bool = "allyNumberPointsList.length > 1 || enemyNumberPointsList.length > 1")
	)

	(block
		(style (position = "absolute") (height = "1") (width = "1") (backgroundColor ="0x01000000")) 
		(controller $Instance renderer='MapPathLine'
			(bind enabled "missionProgress != 1")
			(args
				_entity = "_markerEntity"
				_isOvered = "isOvered"
				_scaleRatio = "_scaleRatio"
			)
		)
	)
	(block
		(bind visible "isNumberPointVisible")
		(style
			(position = "absolute")
			(bind left "posX")
			(bind top "posY")
			(width = "1px")
			(height = "1px")
			(align = "center|middle")
			(bind rotation "-angleToRotate")
		)
		(controller $Instance renderer='MapPathStartMarker'
			(bind enabled "missionProgress != 1")
			(args
				_missionIndex = "missionIndex"
				_relation = "relation"
				_isOvered = "isOvered"
				_isMinimap = "true"
			)
		)
	)
)

# battle\minimap\markers\hydrophone_zone_marker.unbound
(def element TMap_MapHydrophoneZoneMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'submarineHydrophoneZone')
		
		(var endRadius:number = "HYDROPHONE_ZONE_MINIMAP_RADIUS_END" watch=false)
		(var duration:number = "HYDROPHONE_ZONE_MINIMAP_ANIM_DURATION" watch=false)

		(var customRad:number = "endRadius" watch=false)
		(var customAlpha:number = "0")

		(var customRad_second:number = "endRadius" watch=false)
		(var customAlpha_second:number = "0")

		(controller $Animation
			(play
				duration = "duration"
				repeatCount=6
				from = "{ customRad: 0}"
				to = "{ customRad: endRadius}"
				easing = "Easing.line"
				watch=false
			)
			(play
				duration = "duration"
				repeatCount=6
				from = "{ customAlpha: 1}"
				to = "{ customAlpha: 0}"
				easing = "Easing.line"
				watch=false
			)
		)
		
		(controller $Animation
			(play
				duration = "duration"
				delay = "duration/2"
				repeatCount=5
				from = "{ customRad_second: 0}"
				to = "{ customRad_second: endRadius}"
				easing = "Easing.line"
				watch=false
			)
			(play
				duration = "duration"
				delay = "duration/2"
				repeatCount=5
				from = "{ customAlpha_second: 1}"
				to = "{ customAlpha_second: 0}"
				easing = "Easing.line"
				watch=false
			)
		)
	)
	(macro BIND_FAIR_SCALE "_itemScale / _mapScale")

	(controller $Animation
		(bindcall play	duration="0.15"
						from="{alpha: 1}"
						to="{alpha: 0}"
						action="kill"
						(event "submarineHydrophoneZoneComponent.evHide")
		)
	)

	(block
		(style (position = "absolute"))
		(alpha = 0)
		(bind alpha "customAlpha") 
		(controller $Sector
			(arc="360")
			(radius = 0)
			(bind radius "customRad")
			(bind colors "[0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF]")
			(alphas="[0, 0.5, 0]")
			(ratios="[175, 215, 255]")
		)
	)
	(block
		(style (position = "absolute"))
		(alpha = 0)
		(bind alpha "customAlpha_second") 
		(controller $Sector
			(arc="360")
			(radius = 0)
			(bind radius "customRad_second")
			(bind colors "[0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF]")
			(alphas="[0, 0.75, 0]")
			(ratios="[175, 215, 255]")
		)
	)	
)

# battle\minimap\markers\attention_marker.unbound
(def element TMap_MapAttentionMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	
	(macro BIND_FAIR_SCALE "_itemScale / _mapScale")

	(macro TMap_MapAttentionMarker _markerEntity="_markerEntity" _markerType='minimap')
)

# battle\markers\attention_marker.unbound
(def element WorldAttentionMarker (_markerEntity:gfx) layout=true
	(scope
		(var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var isTactical:bool = "cameraComponent.isTactical" (event "cameraComponent.evTacticalStateChanged"))
	)

	# Mod
	(macro TMap_WorldAttentionMarker _markerEntity="_markerEntity" _markerType='world')
	#
)

# battle\markers\shared\attention_marker_assets.unbound
# macro AttentionMarker
(def macro TMap_WorldAttentionMarker (_markerEntity:expression, _markerType:str) layout=true
	(scope
		(event evShow)
		(macro GET_MARKER_ENTITY_COMPONENT  'timeToLive')
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.minimapAttentionPoint.avatarId")
		(var relationValue:number = "relationComponent.value")
		(var isReversedAnim:bool = "relationComponent.value != SC.Battle.PLAYER_RELATION.SELF")
		(var fxAssetPostfix:str = "isReversedAnim ? '_in' : ''")
		(var fxAnimEasing:number = "isReversedAnim ? Easing.quad_out : Easing.quad_out")
		(var fxScale:number = "isReversedAnim ? 1.5 : 1")

		(var markerAnim:bool = "false")

		(var lifeTime:number = "timeToLiveComponent ? timeToLiveComponent.lifeTime : 1")
		(var deathTime:number = "timeToLiveComponent ? timeToLiveComponent.deathTime : 1")
		(var repeatCount:number = "lifeTime / (SHORT_ATTENTION_DURATION / 2)")

		(var dotAlpha:number = "0" watch=false)
		(var dotRadius:number = "MARKER_CONFIG_MAP[_markerType].dotSize" watch=false)
		(controller $Animation
			(bindcall play	duration="SHORT_ATTENTION_DURATION / CIRCLE_EFFECT_COUNT"
							from="{dotRadius: 0, dotAlpha: 0}"
							to="{dotRadius: MARKER_CONFIG_MAP[_markerType].dotSize, dotAlpha: 1}"
							action="append"
							(event "evShow")
			)
			(bindcall play	delay="lifeTime + deathTime - SHORT_ATTENTION_DURATION"
							duration="deathTime"
							to="{dotAlpha: 0}"
							action="append"
			)
		)

		# Mod
		(var altVision:bool = "cameraComponent.altVision" (event "cameraComponent.evAltVisionChanged"))

		(macro TT_GET_USERPREF)
		(macro TT_GET_PREF_BOOL _varName="'isMarkerVisible'"		_pref="TMap_PREFS.ATTENTION_MARKER")
		
		(macro TT_GET_PREF_NUMBER _varName="'nameDisplaymode'"		_pref="TMap_PREFS.ATTENTION_MARKER_NAME_DISPLAY_MODE")
		(macro TT_GET_PREF_NUMBER _varName="'distanceDisplaymode'"	_pref="TMap_PREFS.ATTENTION_MARKER_DISTANCE_DISPLAY_MODE")
		(macro TMap_GET_DISPLAY_MODE _varName="'isNameVisible'" _prefValue="nameDisplaymode")
		(macro TMap_GET_DISPLAY_MODE _varName="'isDistanceVisible'" _prefValue="distanceDisplaymode")

		(var markerRelationComponent:gfx = "_markerEntity.hasComponent(CC.relation) ? _markerEntity.relation : null" (event "_markerEntity.evAdded"))
		(var markerRelation:number = "markerRelationComponent ? markerRelationComponent.value : -1" (event "markerRelationComponent.evChanged"))
		(var isEnemySubPinger:bool = "isEnemy || markerRelation == SC.Battle.PLAYER_RELATION.ENEMY")

		(var isInfoVisible:bool = "isNameVisible || isDistanceVisible || isEnemySubPinger")

		(var markerColorTransform:dict = 
			"	isSelf				? TWO_TEAMS_COLOR_TRANSFORMS['white'] :
				tkStatus			? TWO_TEAMS_COLOR_TRANSFORMS['teamkiller'] :
				isInSameDivision	? TWO_TEAMS_COLOR_TRANSFORMS['division'] :
				isAlly				? TWO_TEAMS_COLOR_TRANSFORMS['ally'] :
				isEnemySubPinger	? TWO_TEAMS_COLOR_TRANSFORMS['enemy']
									: TWO_TEAMS_COLOR_TRANSFORMS['white']"
		)
		#
	)
	# Mod
	(bind visible "isMarkerVisible")
	#
	(dispatch evShow on='addedToStage')
	(macro AttentionCircleFX "dotRadius" "MARKER_CONFIG_MAP[_markerType].effectSize" "SHORT_ATTENTION_DURATION" "isReversedAnim")
	(block
		(bind colorTransform "markerColorTransform")
		# Mod
		(block
			(style
				(position = "absolute")
				(hcenter = 0px)
				(pivotY = 100%)
				(align = "bottom|center")
				(alpha = 0)
			)
			(controller $Animation
				(bindcall play	duration="0.15"
								from="{alpha: 0}"
								to="{alpha: 1}"
								action="killAll"
								reverse="!isInfoVisible"
								(bind trigger "isInfoVisible")
								(event "evShow")
				)
			)
			# Sub Pinger
			(block
				(bind visible "isEnemySubPinger")
				(style
					(backgroundImage = "'url:../service_kit/ship_classes/icon_enemy_submarine.png'")
					(width = "SHIP_ICON_SIZE.WIDTH")
					(height = "SHIP_ICON_SIZE.HEIGHT")
					(marginLeft = -5px)
				)
			)
			# Name
			(block
				(controller $Instance renderer='PlayerNameItem'
					(bind enabled "isNameVisible && !isEnemySubPinger")
					(args "entity")
				)
			)
			# Distance
			(block
				(controller $Instance renderer='DistanceItem'
					(bind enabled "isDistanceVisible")
					(args "_markerEntity")
				)
			)
			(block
				(style
					(width = 2px)
					(alpha = 0.5)
					(bind height "40px")
					(backgroundImage = "'url:../battle_hud/markers/submarine/fill_submarine_depth_info.png'")
					(backgroundSize = "fill")
					(scale9grid = [0, 0, 32, 64])
				)
			)
		)
		#
		(block
			(style (position = "absolute"))
			(bind alpha "dotAlpha")
			(controller $Sector
				(bind arc "360")
				(bind radius "dotRadius")
				(color = "0xFFFFFFFF")
			)
		)
	)
)

# battle\markers\shared\attention_marker_assets.unbound
# macro AttentionMarker
(def macro TMap_MapAttentionMarker (_markerEntity:expression, _markerType:str) layout=true
	(scope
		(event evShow)
		(macro GET_MARKER_ENTITY_COMPONENT  'timeToLive')
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.minimapAttentionPoint.avatarId")
		(var relationValue:number = "relationComponent.value")
		(var isReversedAnim:bool = "relationComponent.value != SC.Battle.PLAYER_RELATION.SELF")
		(var fxAssetPostfix:str = "isReversedAnim ? '_in' : ''")
		(var fxAnimEasing:number = "isReversedAnim ? Easing.quad_out : Easing.quad_out")
		(var fxScale:number = "isReversedAnim ? 1.5 : 1")

		(var markerAnim:bool = "false")

		(var lifeTime:number = "timeToLiveComponent ? timeToLiveComponent.lifeTime : 1")
		(var deathTime:number = "timeToLiveComponent ? timeToLiveComponent.deathTime : 1")
		(var repeatCount:number = "lifeTime / (SHORT_ATTENTION_DURATION / 2)")

		(var dotAlpha:number = "0" watch=false)
		(var dotRadius:number = "MARKER_CONFIG_MAP[_markerType].dotSize" watch=false)
		(controller $Animation
			(bindcall play	duration="SHORT_ATTENTION_DURATION / CIRCLE_EFFECT_COUNT"
							from="{dotRadius: 0, dotAlpha: 0}"
							to="{dotRadius: MARKER_CONFIG_MAP[_markerType].dotSize, dotAlpha: 1}"
							action="append"
							(event "evShow")
			)
			(bindcall play	delay="lifeTime + deathTime - SHORT_ATTENTION_DURATION"
							duration="deathTime"
							to="{dotAlpha: 0}"
							action="append"
			)
		)

		# Mod
		(var markerRelationComponent:gfx = "_markerEntity && _markerEntity.hasComponent(CC.relation) ? _markerEntity.relation : null" (event "_markerEntity.evAdded"))
		(var markerRelation:number = "markerRelationComponent ? markerRelationComponent.value : -1" (event "markerRelationComponent.evChanged"))
		(var isEnemyPinger:bool = "isEnemy || markerRelation == SC.Battle.PLAYER_RELATION.ENEMY")
		(var markerColorTransform:dict = 
			"	isSelf				? TWO_TEAMS_COLOR_TRANSFORMS['white'] :
				tkStatus			? TWO_TEAMS_COLOR_TRANSFORMS['teamkiller'] :
				isInSameDivision	? TWO_TEAMS_COLOR_TRANSFORMS['division'] :
				isAlly				? TWO_TEAMS_COLOR_TRANSFORMS['ally'] :
				isEnemyPinger		? TWO_TEAMS_COLOR_TRANSFORMS['enemy']
									: TWO_TEAMS_COLOR_TRANSFORMS['white']"
		)
		(macro GET_MARKER_ENTITY_COMPONENT  'mapPosition')
		(macro GET_MARKER_ENTITY_COMPONENT  'data')
		(var pingerYaw:number = "mapPositionComponent ? radToGrad(mapPositionComponent.yaw) : 0" (event "_markerEntity.evAdded")) # mapPos is added after mapAttention so we need this event
		(var movingYaw:number = "dataComponent ? radToGrad(dataComponent.data.vehicleYaw) : 0" (event "_markerEntity.evAdded"))

		(var isEnemyPingerOnMap:bool = " isEnemyPinger && _markerType == 'minimap' &&  dataComponent")
		(var isEnemyOilLeakOnMap:bool = "isEnemyPinger && _markerType == 'minimap' && !dataComponent")
		#
	)
	(dispatch evShow on='addedToStage')
	(macro AttentionCircleFX "dotRadius" "MARKER_CONFIG_MAP[_markerType].effectSize" "SHORT_ATTENTION_DURATION" "isReversedAnim")
	(block
		(bind colorTransform "markerColorTransform")
		(block
			# Mod
			(bind visible "!isEnemyPingerOnMap")
			#
			(style (position = "absolute"))
			(bind alpha "dotAlpha")
			(controller $Sector
				(bind arc "360")
				(bind radius "dotRadius")
				(color = "0xFFFFFFFF")
			)
		)
		# Mod
		(block
			(bind visible "isEnemyPingerOnMap")

			(block
				(bind visible "!isEnemyOilLeakOnMap")
				(style
					(position = "absolute")
					(backgroundImage = "'symbol:minimap_direction_line'")
					(bind rotation "pingerYaw")
					(bind alpha "2")
				)
			)
			(block
				(style
					(bind rotation "movingYaw")
					(backgroundImage = "'swf:../fla/minimap/minimap.swf:minimap_submarine_last_visible'")
					(scaleX = 1.3)
					(scaleY = 1.3)
				)
			)
		)
		#
	)
)

# battle\minimap\markers\minefield_marker.unbound
(def element TMap_MapMinefieldMarker (_markerEntity:gfx, _mapScale:number, _itemScale:number, _scaleRatio:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'circle')
		(var circleRadius:number = "circleComponent.radius" (event "circleComponent.evRadiusChanged"))

		(macro GET_MARKER_ENTITY_COMPONENT 'minefield')

		(event evShow)
		(event evHide)
	)
	(dispatch evShow on=addedToStage)
	(dispatch evHide (event "_markerEntity.interactiveZone.evHide"))

	(macro BIND_FAIR_SCALE "circleRadius")


	
	
	(block
		(style (position = "absolute"))
		(controller $Animation
			(bindcall  play
				duration=0.3
				from={alpha: 0}
				to={alpha: 1}
				easing="Easing.quint_in"
				(event "evShow")
			)
			(bindcall  play
				duration=0.3
				to={alpha: 0}
				easing="Easing.quint_in"
				(event "evHide")
			)
		)

		(block
			(controller $Sector
				(bind arc "360")
				(bind radius "MINIMAP_ASSETS_SIZE")
				(bind innerRadius "MINIMAP_ASSETS_SIZE")
				(bind lineThickness "8")
				(bind lineAlpha "0.75")
				(bind lineColor "MINEFIELD_RELATION_COLORS[_markerEntity.relation.value]")
				(bind dashLength "16")
				(bind spacing "58")
				(bind drawDotted "true")
			)
		)

		(block
			(style (alpha = 0.18))
			(controller $Sector
				(bind arc "360")
				(bind color "MINEFIELD_RELATION_COLORS[_markerEntity.relation.value]")
				(bind radius "MINIMAP_ASSETS_SIZE")
			)
		)
	)
	
)

##################################################
### Options
##################################################

# battle\minimap\minimap_options.unbound
(def constant TMap_MINIMAP_OPTIONS_SETTINGS {
	'visibilityRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'visibilityRangeStyle',
		prefName: 'VISIBILITY_SEA'
	},
	'visibilityPlaneRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'visibilityPlaneRangeStyle',
		prefName: 'VISIBILITY_AIR'
	},
	'visibilityByShipRangePingerEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'visibilityByShipRangePingerStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'atbaRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'atbaRangeStyle',
		prefName: 'SECONDARY'
	},
	'aaRangeMaxEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'aaRangeMaxStyle',
		prefName: 'ANTIAIR'
	},
	'sonarRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'sonarRlsRangeStyle',
		prefName: 'HYDRO_SELF'
	},
	'rlsRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'sonarRlsRangeStyle',
		prefName: 'RADAR_SELF'
	},
	'hydrophoneRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'sonarRlsRangeStyle',
		prefName: 'HYDROPHONE_SELF'
	},
	'submarineLocatorRangeEnabled':{
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'sonarRlsRangeStyle',
		prefName: 'SUBRADAR_SELF'
	},

	'shootMGRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootPhaserLaserRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootTARangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'TORPEDO'
	},
	'shootPulsePhaserRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootIonicPhaserRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootTorpedoPhotonRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'TORPEDO'
	},
	'shootPingerRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootChargeLaserRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootImpulseLaserRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootAxisLaserRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootWaveGunRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'MAIN_ARMAMENT'
	},
	'shootAirSupportRangeEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX",
		controlStyle: 'activeEquipmentStyle',
		prefName: 'AIRSUPPORT'
	},

	'distanceDisplayEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.CHECKBOX",
		hasTooltip: false,
		controlStyle: 'defaultStyle'
	},
	'shipNamesDisplayEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.CHECKBOX",
		hasTooltip: false,
		controlStyle: 'defaultStyle'
	},
	'minimapRotationEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.CHECKBOX",
		hasTooltip: false,
		controlStyle: 'defaultStyle'
	},

	'pointAttentionEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.CHECKBOX",
		hasTooltip: true,
		controlStyle: 'defaultStyle'
	},

	'mouseCommandsEnabled': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.CHECKBOX",
		hasTooltip: true,
		controlStyle: 'defaultStyle'
	},

	'rangesAlpha': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.SLIDER",
		minValue: 20, maxValue: 100,
		controlStyle: 'defaultStyle'
	},
	'waterAlpha': {
		controlType: "TMap_SETTINGS_CONTROL_TYPE.SLIDER",
		minValue: 0, maxValue: 100,
		controlStyle: 'defaultStyle'
	}
})

# battle\minimap\minimap_options.unbound
(def constant TMap_SETTINGS_CONTROL_TYPE {
	CHECKBOX: 'TMap_MinimapOptionsCheckBox',
	RANGE_CHECKBOX: 'TMap_MinimapOptionsRangeCheckBox',
	SLIDER: 'TMap_MinimapOptionsSlider'
})

# battle\minimap\minimap.unbound
(def element TMap_MinimapOptionsButton () layout=true
	(scope
		(event evHideInfotip)
		(event evOnButtonClicked)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var infotipVisible:bool = false)

		# Mod
		(macro TT_GET_USERPREF)

		(event evPrefInfotiopOpened)
		(event evPrefInfotiopClosed)
		(var isPrefInfotipOpen:bool = false watch=false)
		(bind isPrefInfotipOpen "true"  watch=false init=false (event "evPrefInfotiopOpened"))
		(bind isPrefInfotipOpen "false" watch=false init=false (event "evPrefInfotiopClosed"))
		#
	)
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(controller $Tooltip
		(renderer='TMap_MinimapOptionsTooltip')
		(args
			_userPrefsNum="_userPrefsNum"
		)
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:0}, to:{alpha:1}} on='rollOver')
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} on='rollOut')
		(bind enabled "!(infotipVisible)")
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	(controller $Tooltip
		(renderer='TMap_MinimapOptionsInfotip')
		(args
			_userPrefsNum="_userPrefsNum"
		)
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOnButtonClicked"))
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} (event "evHideInfotip"))
		(bind infotipVisible "true" init=false on='evShow')
		(bind infotipVisible "false" init=false on='evHide')
		# Mod
		(dispatch evHideInfotip args="{}" on='evClickOutside' (bind enabled "!isPrefInfotipOpen"))
		# To hide all the children
		(dispatch evMenuClosed  args="{}" on='evHide' dir="EventDirection.DOWN")
		#
		(priority=1)
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	(element ButtonSettingsSmall
		(style
			(position = "absolute") (right = "-20px") (top = "-18px")
		)
	)
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsTooltip (_userPrefsNum:gfx=null) layout=true
	(style (hitTest = false))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(style (width = "auto"))

		(element TMap_MinimapOptionsContent "true" _userPrefsNum="_userPrefsNum")

		(element TooltipSystemHorizontalDivider)
		(element TooltipSystemStatusLine
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
				_text = 'IDS_MINIMAP_OPTIONS_HINT'
		)
	)
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsInfotip (_userPrefsNum:gfx=null) layout=true
	(scope
		(event evPinPositionChanged)	
										
		
		(var pinParams:dict = "MINIMAP_INFOTIP_PIN_SETTINGS['bottom']" watch=false)
		(bind pinParams "MINIMAP_INFOTIP_PIN_SETTINGS[$event.pinPosition]" init=false (event "evPinPositionChanged"))

		(var offsetTop:number = "0" watch=false)
		(bind offsetTop "$event.pinPosition == 'top' ? 8 : 0" init=false (event "evPinPositionChanged"))
	)

	# Mod
	# backgroundColor is required to prevent the tooltip from disappearing when clicking on the non-config area.
	# I guess it's a bug/unintended behavior of the original code -_-
	(style (bind marginTop "offsetTop")(backgroundColor=0x01000000))
	#

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(style (width = "auto"))
		(element TMap_MinimapOptionsContent "false" _userPrefsNum="_userPrefsNum")
	)
	(element InfotipPins "pinParams" "!isHighContrast")
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsContent (_isReadOnly:bool, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro IS_SPECTATOR_MODE_SCOPE "'isSpectatorMode'")
		(var minimapOptions:gfx = "$datahub.getCollection(CC.minimapOption)")
	)
	(element TooltipSystemHeaderSubheaderText
			_headerText="'IDS_MINIMAP_OPTIONS_CAPTION'"
			_unifiedStatus="SC.Ui_styles.UNIFIED_STATUS.DEFAULT"
	)
	(element TooltipSystemHorizontalDivider)
	(hblock
		(block
			(controller $Instance renderer='TMap_ShipRelatedOptions'
				(bind enabled "!isSpectatorMode")
				# Mod
				(args _minimapOptions="minimapOptions" _isReadOnly="_isReadOnly" _userPrefsNum="_userPrefsNum")
				#
			)
		)
		(block
			(style (height = 100%))
			(controller $Instance renderer='TooltipSystemVerticalDivider'
				(bind enabled "!isSpectatorMode")
			)
		)
		(element TMap_MinimapRelatedOptions _minimapOptions="minimapOptions" _isReadOnly="_isReadOnly" _userPrefsNum="_userPrefsNum")
	)
)

# battle\minimap\minimap_options.unbound
(def element TMap_ShipRelatedOptions (_minimapOptions:gfx, _isReadOnly:bool, _userPrefsNum:gfx=null) layout=true
	(scope	
		(var shipParametersCollection:gfx = "_minimapOptions.getChildByPath('byCategory.'+ SC.Battle.MINIMAP_OPTION_CATEGORY.SHIP_PARAMETERS + '.sorted')")

		(var shipWeaponsCollection:gfx = "_minimapOptions.getChildByPath('byCategory.'+ SC.Battle.MINIMAP_OPTION_CATEGORY.SHIP_WEAPONS + '.sorted')" (event "_minimapOptions.evChildAdded") (event "_minimapOptions.evChildRemoved"))
		(var shipWeaponsCount:number = "shipWeaponsCollection && shipWeaponsCollection.items ? shipWeaponsCollection.items.length : 0" (event "shipWeaponsCollection.evAdded") (event "shipWeaponsCollection.evRemoved"))
	)
	(style (width = "OPTION_COLUMN_WIDTH"))

	(element TMap_MinimapOptionsSection "'IDS_MINIMAP_OPTIONS_CATEGORY_SHIP_PARAMETERS'" "shipParametersCollection" "_isReadOnly" _userPrefsNum="_userPrefsNum"
		(style
			(bind marginBottom "shipWeaponsCount > 0 ? SXS : 0")
		)
	)
	(element TMap_MinimapOptionsSection "''" "shipWeaponsCollection" "_isReadOnly" _userPrefsNum="_userPrefsNum")
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapRelatedOptions (_minimapOptions:gfx, _isReadOnly:bool, _userPrefsNum:gfx=null) layout=true
	(scope
		(var minimapAppearanceCollection:gfx = "_minimapOptions.getChildByPath('byCategory.'+ SC.Battle.MINIMAP_OPTION_CATEGORY.MINIMAP_APPEARANCE + '.sorted')")
		(var minimapActionsCollection:gfx = "_minimapOptions.getChildByPath('byCategory.'+ SC.Battle.MINIMAP_OPTION_CATEGORY.MINIMAP_ACTIONS + '.sorted')")
		(var minimapAlphasCollection:gfx = "_minimapOptions.getChildByPath('byCategory.'+ SC.Battle.MINIMAP_OPTION_CATEGORY.MINIMAP_ALPHAS + '.sorted')")
	)
	(style (width = "OPTION_COLUMN_WIDTH"))
	
	(element TMap_MinimapOptionsSection "'IDS_MINIMAP_OPTIONS_CATEGORY_MINIMAP_ACTIONS'" "minimapActionsCollection" "_isReadOnly" _userPrefsNum="_userPrefsNum")
	(element TooltipSystemHorizontalDivider)
	(element TMap_MinimapOptionsSection "'IDS_MINIMAP_OPTIONS_CATEGORY_MINIMAP_APPEARANCE'" "minimapAppearanceCollection" "_isReadOnly" _userPrefsNum="_userPrefsNum"
		(style (marginBottom = "M"))
	)
	(element TMap_MinimapOptionsSection "''" "minimapAlphasCollection" "_isReadOnly" _userPrefsNum="_userPrefsNum")
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsSection (_headerText:str, _optionCollection:gfx, _isReadOnly:bool, _userPrefsNum:gfx=null) layout=true
	(scope
		(var sectionItemsCount:number = "_optionCollection && _optionCollection.items ? _optionCollection.items.length : 0")
	)
	(style (width = 100%))

	(element TooltipSystemInnerHeaderText _headerText="_headerText" _unifiedStatus="SC.Ui_styles.UNIFIED_STATUS.DEFAULT"
		(bind visible "_headerText != ''")
		(style
			(marginBottom = "SXS")
		)
	)

	(block
		(style (width = 100%))
		(controller $Repeat renderer='TMap_MinimapOptionsItemAdapter'
			(bind count "sectionItemsCount")
			(bindcall removeChildAt "$event[1]" (event "_optionCollection.evRemoved"))
			(bindcall addChildAt "$event[1]" (event "_optionCollection.evAdded"))
			(args "_optionCollection.items[$index]" "_isReadOnly" _userPrefsNum="_userPrefsNum")
		)
	)
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsItemAdapter (_entity:gfx, _isReadOnly:bool, _userPrefsNum:gfx=null) layout=true
	(scope
		(var itemSetting:dict = "TMap_MINIMAP_OPTIONS_SETTINGS[_entity.minimapOption.key]")
	)

	(style
		(width = 100%)
		(bind marginTop "$index > 0 ? SXS : 0")
	)

	(controller $Instance (bind renderer "itemSetting.controlType")
		(args
			_entity="_entity"
			_itemSetting="itemSetting"
			_enabled="!_isReadOnly"
			_userPrefsNum="_userPrefsNum"
		)
	)
)

(def element TMap_MinimapOptionsCheckBox (_entity:gfx, _itemSetting:dict, _enabled:bool=true, _userPrefsNum:gfx=null) layout=true
	(scope
		(var minimapOption:gfx = "_entity.minimapOption")
		(var propValue:bool = "minimapOption.value > 0" (event "minimapOption.evValueChanged"))

		(macro MOUSE_HANDLER_SCOPE)

		(var clickMethods:array = "[ { type: 'direct.action', name: 'battle.saveMinimapOption', args: [ minimapOption.key, !propValue ] } ]")
	)

	(controller $Tooltip
		(bind enabled "_itemSetting.hasTooltip")
		(renderer = 'TooltipSystemSimpleTooltip')
		(args _tooltipText="tr('IDS_MINIMAP_OPTIONS_TOOLTIP_' + toUpper(minimapOption.key))")
		(align="top|right")
		(offset=[0, 20])
		(screenBoundsOffset={left:10, top:10, right:10, bottom:10})
		(macro SIMPLE_TOOLTIP_ANIMATION)
	)

	(style (flow = "horizontal") (width = "100%") (align = "middle"))

	(element CheckBoxNoLabel
		_selected = "propValue"
		_enabled = "_enabled"
		_rollOver = "rollOver"
		_interactive = "_enabled"
	)

	(tf
		(class $TextDefaultNM)
		(bind alpha "_enabled ? (rollOver && !(mouseDown) ? TA : TC) : TEXT_PREVIEW_ALPHA")
		(style
			(width = "100%")
			(marginLeft = "S")
			(marginTop = -3px)
		)
		(text = "'IDS_MINIMAP_OPTIONS_' + toUpper(minimapOption.key)")
	)

	(macro MOUSE_HANDLER
		_enabled = "_enabled"
		_methods = "clickMethods"
		_soundSet = "'default_checkbox'"
	)
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsSlider (_entity:gfx, _itemSetting:dict, _enabled:bool=true, _userPrefsNum:gfx=null) layout=true
	(scope
		(event evValueChanged)
		(var minimapOption:gfx = "_entity.minimapOption")
		(var propValue:number = "minimapOption.value" (event "minimapOption.evValueChanged"))
	)

	(bindcall externalCall 'direct.action' "['battle.saveMinimapOption', [minimapOption.key, $event.value]]" init=false watch=false (event "evValueChanged"))

	(style (width = "100%") (align = "middle"))

	(tf
		(class $TextDefaultNM)
		(bind alpha "_enabled ? TC : TEXT_PREVIEW_ALPHA")
		(text = "'IDS_MINIMAP_OPTIONS_' + toUpper(minimapOption.key)")
	)
	(hblock
		(style
			(marginTop = "S")
		)
		(element TMap_Slider
				_value="propValue"
				_min="_itemSetting.minValue"
				_max="_itemSetting.maxValue"
				_enabled="_enabled"
		)
		(tf
			(class $TextDefaultNM)
			(style
				(marginLeft = "S")
			)
			(bind alpha "_enabled ? TC : TEXT_PREVIEW_ALPHA")
			(bind text "propValue")
		)
	)
)

# shared\components_lib\sliders.unbound
(def element TMap_Slider (_value:number, _min:number, _max:number, _enabled:bool=true) layout=true
	(scope
		(event evShow)
		(event evValueChanged)
	)
	(dispatch evShow args="{}" on='addedToStage')

	(mc minimap_slider_default
		(bind value "_value" watch=false (event "evShow"))
		(bind minimum "_min")
		(bind maximum "_max")
		(bind enabled "_enabled")
		# Mod
		(snapping = "true")
		(snapInterval = "5")
		#
		(dispatch evValueChanged args="{value: $event.value}" dir="EventDirection.UP" on='valueChange')
	)
)

# battle\minimap\minimap_options.unbound
(def element TMap_MinimapOptionsRangeCheckBox (_entity:gfx, _itemSetting:dict, _enabled:bool=true, _userPrefsNum:gfx=null) layout=true
	(scope
		(var minimapOption:gfx = "_entity.minimapOption")
		(var propValue:bool = "minimapOption.value > 0" (event "minimapOption.evValueChanged"))

		(var textPropParameter:number = "_entity.parameter ? _entity.parameter.currentValue : 0" (event "_entity.parameter.evChanged"))
		(var textProp:str = "formatFloatingPoint(textPropParameter, 1)")

		(var itemVisual:dict = "MINIMAP_OPTIONS_STYLES[_itemSetting.controlStyle]")

		(macro MOUSE_HANDLER_SCOPE)

		# Mod
		(var hasPrefs:bool = "'prefName' in _itemSetting && _itemSetting.prefName in TMap_PREFS")
		(var prefName:str = "hasPrefs ? _itemSetting.prefName : 'FAKE'")
		(var prefs:dict = "TMap_PREFS[prefName]")

		(macro TT_GET_PREF_NUMBER _varName="'displayMode'" _pref="prefs.DISPLAY_MODE")
		(macro TT_GET_PREF_NUMBER _varName="'colorIndexPref'" _pref="prefs.COLOR_INDEX")

		(macro TT_GET_PREF_NUMBER _varName="'outlineType'" _pref="prefs.LINE_TYPE")
		(var defaultLine:number = "prefs.LINE_TYPE.default")
		(var dashStrokeClip:str = "TMap_OUTLINE_TYPES.DASH == defaultLine ? itemVisual.strokeClip : 'VisibilityRangeStroke'")
		(var dotStrokeClip:str = "TMap_OUTLINE_TYPES.DOT == defaultLine ? itemVisual.strokeClip : 'SonarRangeStroke'")

		(var colorIndex:number = "colorIndexPref < TMap_RANGE_COLORS.ALL.length ? colorIndexPref : 0")
		(var colorName:str = "TMap_RANGE_COLORS.ALL[colorIndex]")
		(var color:number = "TMap_RANGE_COLORS[colorName]")
		(macro TMap_GET_RGB _hexValue="color")
		(var ct:dict = "{redMultiplier:0,greenMultiplier:0,blueMultiplier:0,redOffset:red,greenOffset:green,blueOffset:blue}")

		(event evPrefInfotiopOpened)
		(event evPrefInfotiopClosed)

		(event evHideInfotip)
		(event evOpenInfotip)
		(event evOpenDisplayModeInfotip)
		(event evClickOption)
		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var infotipVisible:bool = false)

		(var isOverrideEnabled:bool = "hasPrefs && displayMode != TMap_DISPLAY_MODES.ADAPTIVE")

		(var prefValue:bool = "isOverrideEnabled ? TMap_DISPLAY_MODES.ENABLE == displayMode
												 : propValue")

		(var clickMethods:array = "isOverrideEnabled ? []
													 : [ { type: 'direct.action', name: 'battle.saveMinimapOption', args: [ minimapOption.key, !prefValue ] } ] "
		)

		(var allPrefs:array = "hasPrefs ? [prefs.DISPLAY_MODE, prefs.LINE_TYPE, prefs.LINE_THICKNESS, prefs.FILL_CIRCLE, prefs.ALPHA, prefs.COLOR_INDEX] : []")

		(event evItemChooserOpened)
		(event evItemChooserClosed)
		(var isChooserOpen:bool = "false" watch=false)
		(bind isChooserOpen "true" watch=false init=false (event "evItemChooserOpened"))
		(bind isChooserOpen "false" watch=false init=false (event "evItemChooserClosed"))
		#
	)

	(dispatch evHideInfotip args="{}" watch=false init=false (bind trigger "isMouseActive"))

	(dispatch evOpenDisplayModeInfotip args="{}" watch=false init=false (bind enabled "isOverrideEnabled") (event "evClickOption"))
	
	(style (flow = "horizontal") (width = "100%") (align = "middle|center"))

	(block
		(style
			(width = 20px)
			(height = 20px)
			(align = "middle|center")
			(marginLeft = "-S")
			(marginRight = "S")
		)
		(controller $Instance renderer='ImageButton'
			(bind enabled "hasPrefs && _enabled")
			(args
				_width = "24px"
				_height = "24px"
				_backgroundImage = 'url:../service_kit/buttons/icons/add.png'
				_dispatchedEv="'evOpenInfotip'"
			)
		)
		# Infotip
		(controller $Tooltip
			(renderer='TMap_CustomPrefsInfotip')
			(bind enabled "hasPrefs && _enabled")
			(args
				_prefs			= "allPrefs"
				_isEnabled		= "_enabled"
				_userPrefsNum	= "_userPrefsNum"
			)
			(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOpenInfotip"))
			(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} (event "evHideInfotip"))
			(dispatch evHideInfotip args="{}" on='evClickOutside' (bind enabled "!isChooserOpen"))
			(bind infotipVisible "true" init=false on='evShow')
			(bind infotipVisible "false" init=false on='evHide')

			(dispatch evPrefInfotiopOpened init=false dir="EventDirection.UP" args="{}" on='evShow')
			(dispatch evPrefInfotiopClosed init=false dir="EventDirection.UP" args="{}" on='evHide')

			(pinRight = 'TMap_CustomPinRight')

			(priority=1)
			(align="left|middle")
			(position="border")
			(offset=[0, 0])
			(screenBoundsOffset={left:5, top:5, right:5, bottom:5})
		)
		# Tooltip
		(controller $Tooltip
			(renderer='TMap_CustomPrefsInfotip')
			(bind enabled "hasPrefs && _enabled && !infotipVisible")
			(args
				_prefs			= "allPrefs"
				_isEnabled		= "false"
				_userPrefsNum	= "_userPrefsNum"
			)
			(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evRollOver"))
			(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} (event "evRollOut"))

			(pinRight = 'TMap_CustomPinRight')
			
			(priority=1)
			(align="left|middle")
			(position="border")
			(offset=[0, 0])
			(screenBoundsOffset={left:5, top:5, right:5, bottom:5})
		)
		# Only Display Mode
		(controller $Tooltip
			(renderer='TMap_CustomPrefsInfotip')
			(bind enabled "hasPrefs && _enabled")
			(args
				_prefs			= "[prefs.DISPLAY_MODE]"
				_isEnabled		= "_enabled"
				_userPrefsNum	= "_userPrefsNum"
			)
			(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOpenDisplayModeInfotip"))
			(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} (event "evHideInfotip"))
			(dispatch evHideInfotip args="{}" on='evClickOutside' (bind enabled "!isChooserOpen"))
			(bind infotipVisible "true" init=false on='evShow')
			(bind infotipVisible "false" init=false on='evHide')

			(dispatch evPrefInfotiopOpened init=false dir="EventDirection.UP" args="{}" on='evShow')
			(dispatch evPrefInfotiopClosed init=false dir="EventDirection.UP" args="{}" on='evHide')

			(pinRight = 'TMap_CustomPinRight')

			(priority=1)
			(align="left|middle")
			(position="border")
			(offset=[0, 0])
			(screenBoundsOffset={left:5, top:5, right:5, bottom:5})
		)
	)

	(hblock
		(style
			(width = 100%)
			(align = "middle|center")
		)

		(element CheckBoxNoLabel
			_selected = "prefValue"
			_enabled = "_enabled"
			_rollOver = "rollOver"
			_interactive = "_enabled"
		)

		(block
			(style (width = "64px") (marginTop = -3px) (align = "center"))
			(block
				(tf
					(class "itemVisual.textClass")
					(style
						(bind textColor "color")
					)
					(bind text "textProp + ' ' + tr('IDS_KILOMETER')")
				)
				(mc "dashStrokeClip"
					(bind visible "outlineType == TMap_OUTLINE_TYPES.DASH")
					(style (position = "absolute") (bottom = "-6px") (width = "100%") (alpha = "TC"))
					(bind colorTransform "ct")
				)
				(mc "dotStrokeClip"
					(bind visible "outlineType == TMap_OUTLINE_TYPES.DOT")
					(style (position = "absolute") (bottom = "-6px") (width = "100%") (alpha = "TC"))
					(bind colorTransform "ct")
				)
				(mc MGRangeStroke
					(bind visible "outlineType == TMap_OUTLINE_TYPES.SOLID")
					(style (position = "absolute") (bottom = "-6px") (width = "100%") (alpha = "TC"))
					(bind colorTransform "ct")
				)
			)
		)

		(tf
			(class $TextDefaultNM)
			(bind alpha "_enabled ? (rollOver && !(mouseDown) ? TA : TC) : TEXT_PREVIEW_ALPHA")
			(style
				(width = "100%")
				(marginLeft = "S")
				(marginTop = -3px)
			)
			(text = "'IDS_MINIMAP_OPTIONS_' + toUpper(minimapOption.key)")
		)

		(macro MOUSE_HANDLER
			_enabled = "_enabled"
			_methods = "clickMethods"
			_soundSet = "'default_checkbox'"
			_dispatchedEv = "'evClickOption'"
		)
	)
)

# Custom
(def element TMap_CustomPrefsInfotip(_prefs:array, _isEnabled:bool=false, _userPrefsNum:gfx=null)
	(style
		(bind hitTest "_isEnabled")
	)
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(style
			(width = "480px")
			(align = "middle|center")
		)

		(controller $Repeat renderer='TT_ConfigElement'
			(bind count "_prefs.length")
			(args
				_pref			= "_prefs[$index]"
				_isConfigurable	= "true"
				_userPrefsNum	= "_userPrefsNum"
			)
		)
	)
)

# Custom
(def element TMap_CustomPinRight ()
	(controller $Instance renderer = 'InfotipPin'
		(args "false")
		(exprs
			(name = 'pinRight')
			(style (position = "absolute") (right = -33px) (rotation = 90)
				(bind marginTop "0")
			)
		)
	)
	(style
		(hitTest = false)
	)
)