(def element ModuleStateViewer () layout=true
	(scope
		#camera and data component
		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(var dataComponent:gfx = "cameraEntity.dataComponent" (event "cameraEntity.evAdded") (event "cameraEntity.evRemoved"))
		(var entityIds:array = "dataComponent ? dataComponent.data : []" (event "dataComponent.evDataChanged"))
		#(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))
	)

	(block
		#(bind visible "altVision")
		(controller $Repeat renderer='MSV_ModuleViewer'
			(bind count "entityIds ? entityIds.length : 0" (event "dataComponent.evChanged"))
			(args "entityIds[$index]")
		)
	)
)

(def element MSV_ModuleViewer(_entityId:number) layout=true
	(scope
		(event evPositionUpdate)
		(var _markerEntity:gfx = "$datahub.getEntity(_entityId)")

		# data
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var data:dict = "dataComponent ? dataComponent.data : null" (event "dataComponent.evChanged"))
		(var state:number = "data ? data.state : -1")
		(var isInCritcal:bool = "isIn(state, [2, 3, 10])")

		# marker pos
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera.altVision" (event "camera.evAltVisionChanged"))

		(var isVisible:bool = "_markerEntity && (altVision || isInCritcal)")

		(macro GET_MARKER_ENTITY_COMPONENT 'screenPosition')
		(var posX:number = "screenPositionComponent ? screenPositionComponent.position.x : 0" (event "evPositionUpdate"))
		(var posY:number = "screenPositionComponent ? screenPositionComponent.position.y : 0" (event "evPositionUpdate"))
	)

	(dispatch evPositionUpdate args={} (bind enabled "isVisible") (event "evEnterFrame"))

	(style
		(bind left "posX")
		(bind top "posY")
		(position = "absolute")
		(align = "center|bottom")
	)

	(element MSV_ModuleItem "_entityId")
)

(def element MSV_ModuleItem(_entityId:number) layout=true
	(scope
		#entity
		(var _markerEntity:gfx = "$datahub.getEntity(_entityId)")

		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(macro GET_MARKER_ENTITY_COMPONENT 'distance')

		(var moduleData:dict = "dataComponent ? dataComponent.data : null" (event "dataComponent.evChanged"))
		#timer
		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")

		#camera
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera.altVision" (event "camera.evAltVisionChanged"))

		# vars
		(var type:number = "moduleData ? moduleData.type : -1")
		(var state:number = "moduleData ? moduleData.state : -1")
		(var critTimer:number = "moduleData ? moduleData.critTimer : 0")
		(var currentHPRaw:number = "moduleData ? moduleData.currentHP : -1")
		(var maxHPRaw:number = "moduleData ? moduleData.maxHP : -1")

		# crit
		(var critTimerEnabled:bool = "isIn(state, [2, 10])")
		(var critTimeLeft:number = "critTimer - timer.currentTime" (event "timer.evFrequent"))
		(var critTimeLeftStr:str = "critTimerEnabled ? countdownFormat(critTimeLeft) : ' '")

		# hp
		(var currentHP:number = "formatFloatingPoint(currentHPRaw, 0)")
		(var maxHP:number = "formatFloatingPoint(maxHPRaw, 0)")

		# dist
		(var distanceIndex:number = "distanceComponent ? distanceComponent.distanceIndex : -1" (event "distanceComponent.evDistanceIndexChanged"))
		(var closeToCamera:bool = "distanceIndex == DistanceType.NEAR")
		#0: Normal, 1: Damaged, 2: Critical, 3: Destroyed, 4: Detonated, 10: Idle
		#reload: yellow, crit: red, normal: green, destroyed: black
		(var stateColor:number = "  state == 0? SC.Ui_styles.SERVICE_COLORS.WHITE:
									state == 1? SC.Ui_styles.SERVICE_COLORS.GREEN:
									critTimerEnabled? 0xFFFF3300:
									state == 3? 0xFF646464:
									SC.Ui_styles.SERVICE_COLORS.ORANGE"
		)
		(var textItemVisibility:bool = "closeToCamera && altVision")
		(var imageItemVisibility:bool = "closeToCamera ? (altVision || critTimerEnabled) : (critTimerEnabled || state == 3)")
		(var bigIcon:bool = "(closeToCamera || altVision) ? true : false")
		#(var health:str = "toString(currentHP) + '/' + toString(maxHP)")
		#(var iconPath:str = "isInstalled ? modernization.iconPath : 'url:../consumables/ammo_ap.png'")
	)

	(block
		(style
			(width = 0) (height = 0)
			(align = "center|bottom")
		)

		(element MSV_ModuleViewerImageItem "type" "state" "bigIcon" "imageItemVisibility")
		#(element MSV_ModuleViewerTextItem "currentHP" "stateColor" "textItemVisibility")
		#(element MSV_ModuleViewerTextItem "critTimerStr" "stateColor" "textItemVisibility")
		(controller $Instance
			(bind renderer "'MSV_ModuleViewerTextItem'")
			(args "currentHP" "stateColor" "textItemVisibility")
			(bind enabled "closeToCamera")
		)
		(controller $Instance
			(bind renderer "'MSV_ModuleViewerTextItem'")
			(args "critTimeLeftStr" "stateColor" "textItemVisibility")
			(bind enabled "closeToCamera")
		)
	)
)

(def element MSV_ModuleViewerTextItem (_value:str, _color:number, _visible:bool) layout=true
	(class $WorldMarkerItemMargins)
	(tf
		(class $WorldMarkerTextItem)
		(style
			(bind noTranslate "false")
			(bind textColor "_color")
		)
		(bind visible "_visible")
		(bind text "_value")
	)
)

(def element MSV_ModuleViewerImageItem (_type:number, _state:number, _bigIcon:bool, _visible:bool) layout=true
	(scope
		(var type:str = "_type == 1 ? 'main_caliber' : 'torpedo_tube'")
		(var state:str = "isIn(_state, [2, 10]) ? 'crit' : 'dead'")
		(var iconPath:str = "	_bigIcon ? 'url:../battle_hud/indicators/modules/' + type + '_' + state + '.png'
										 : 'url:../battle_hud/markers/torpedoes/icon_torpedo_not_dangerous_enemy.png'")
		(var colorOffset:number = "_state == 0 ? 255 : 0")
		(var scale:number = "_bigIcon ? 0.4 : 1.0")
		(var size:number = "_bigIcon ? 60 : 5")
	)
	(block
		(style
			(bind backgroundImage "iconPath")
			(bind scaleX "scale")
			(bind scaleY "scale")
			(bind width "size")
			(bind height "size")
		)
		(bind visible "_visible")
		(bind colorTransform "{redOffset: colorOffset, greenOffset: colorOffset, blueOffset: colorOffset}")
	)
)