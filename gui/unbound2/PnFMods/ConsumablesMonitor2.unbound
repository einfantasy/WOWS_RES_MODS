(def element ShipNameItem (_markerEntity:gfx) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'avatar')
		(var shipName:str = "avatarComponent ? avatarComponent.ship.ref.ship.nameUpper : ''")
	)
	(style
		(align = "middle|center")
	)
	(element CM2_ConsumablesMonitorItem _markerEntity="_markerEntity")
	(element SimpleMarkerTextItem "shipName")
)

(def element BuildingNameItem (_markerEntity:gfx) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'building')
		(var buildingName:str = "buildingComponent 	? buildingComponent.name	? tr(buildingComponent.name)
																				: buildingComponent.typeIDS
													: ''")	
	)
	(style
		(align = "middle|center")
	)
	(element CM2_ConsumablesMonitorItem _markerEntity="_markerEntity")
	(element SimpleMarkerTextItem "toUpper(buildingName)")
)

(def element CM2_ConsumablesMonitorItem(_markerEntity:gfx) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var consData:array = "dataComponent ? dataComponent.data['consMonitor']: []" (event "dataComponent.evChanged"))
	)
	(hblock
		(controller $Repeat renderer='CM2_ConsumableItem'
			(bind enabled "consData.length > 0")
			(bind count "consData.length")
			(args "consData[$index]")
		)
	)
	(style
		(width = 0)
		(align = "middle|center")
	)
)

(def constant CM2_APPEAR_SETTINGS {
	DURATION	 : 0.5,
	OFFSET_Y_MAX : -30,
	OFFSET_Y_MIN : 0.0,
	ALPHA_MIN	 : 0.0,
	ALPHA_MAX	 : 1.0
})
(def constant CM2_DEFAULT_SETTINGS {
	OFFSET_Y	 : 0.0,
	ALPHA		 : 1.0
})
(def constant CM2_BLINK_SETTINGS {
	THRESHOLD	 : 15.0,
	DURATION	 : 1.0,
	ALPHA_MIN	 : 0.4,
	ALPHA_MAX	 : 1.0
})
(def constant CM2_STATE_COLORS {
	SC.Battle.CONSUMABLE_STATES.READY			: "SC.Ui_styles.SERVICE_COLORS.WHITE",
	SC.Battle.CONSUMABLE_STATES.SELECTED		: "SC.Ui_styles.SERVICE_COLORS.WHITE",
	SC.Battle.CONSUMABLE_STATES.AT_WORK			: "SC.Ui_styles.SERVICE_COLORS.GREEN",
	SC.Battle.CONSUMABLE_STATES.RELOAD			: "SC.Ui_styles.SERVICE_COLORS.ORANGE",
	SC.Battle.CONSUMABLE_STATES.NO_AMMO			: "SC.Ui_styles.SERVICE_COLORS.RED",
	SC.Battle.CONSUMABLE_STATES.PREPARATION		: "SC.Ui_styles.SERVICE_COLORS.ORANGE",
	SC.Battle.CONSUMABLE_STATES.REGENERATION	: "SC.Ui_styles.SERVICE_COLORS.ORANGE",
})

(def constant TT_CONSUMABLESMONITOR_INSTALLED true)

(def element CM2_ConsumableItem (_consData:dict) layout=true
	(scope
		(event evConsumableActivated)
		(event evConsumableEnding)
		(event evConsumableDeactivated)

		(var iconPath:str = "'url:../consumables/consumable_' + _consData.icon + '.png'")
		(var capacity:str = "_consData.capacity")
		(var state:number = "_consData.state")
		(var stateStr:str = "toString(state)")
		(var stateEndTime:number = "_consData.endTime")
		(bind stateEndTime "_consData.endTime" watch=false init=false (bind trigger "state"))
		#(trace "toString(_entity.avatar.name) + ': isActive: ' + toString(isActive) + ', isUnderThreshold: ' + (stateTime <= CM2_BLINK_SETTINGS.THRESHOLD) + ', ' + _consData.consumableType + ', ' + timer.currentTime" watch=false (bind trigger "isConsumableEnding"))
		# The ub scope updates dict values one by one
		# which triggers `isConsumableEnding` change event because it satisfies (isActive == true && previousStateTime <= animationThreshold)
		# It will immediately becomes false as the previousStateTime gets updated to the current value.
		# However the fired event still starts the animation, of course.
		(var canUse:bool = "_consData.canUse")
		(var lifeCycleType:number = "_consData.lifeCycleType")
		(var isTimeBased:bool = "lifeCycleType == SC.Battle.CONSUMABLE_LIFECYCLE_TYPE.TIME_BASED")
		
		(var isReady:bool = "state == SC.Battle.CONSUMABLE_STATES.READY")
		(var isActive:bool = "state == SC.Battle.CONSUMABLE_STATES.AT_WORK")
		(var isReload:bool = "state == SC.Battle.CONSUMABLE_STATES.RELOAD")
		(var isEmpty:bool = "state == SC.Battle.CONSUMABLE_STATES.NO_AMMO")
		(var isPreparation:bool = "state == SC.Battle.CONSUMABLE_STATES.PREPARATION")
		(var isRegenerating:bool = "state == SC.Battle.CONSUMABLE_STATES.REGENERATION")
		(var isDisabled:bool = "!canUse && isReady")
		(var isTimedState:bool = "state in SC.Battle.CONSUMABLE_STATES.WITH_TIME_STATES")
		
		(var stateColor:number = "stateStr in CM2_STATE_COLORS ? CM2_STATE_COLORS[stateStr] : SC.Ui_styles.SERVICE_COLORS.WHITE")

		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var stateTime:number = "stateEndTime - timer.currentTime" (event "timer.evFrequent"))

		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var isTactical:bool = "camera.isTactical" (event "camera.evTacticalStateChanged"))
		(var altVision:bool = "camera.altVision" (event "camera.evAltVisionChanged"))
		(var altVisionEnabled:bool = "altVision && !isTactical")

		(var floatDigits:number = "stateTime < 10 ? 1 : 0")
		(var stateText:str = "	isTimedState ? countdownFormat(stateTime, floatDigits)
											 : isReady  ? 'RDY'
											 			: ' ' "
		)
		(var isCapacityHidden:bool = "(isTimeBased && isActive) || (capacity == 'inf')")
		(var capacityPrefix:str = "isTimeBased ? '' : 'x'")
		(var capacityStr:str = "isCapacityHidden	? ' '
													: capacityPrefix + round(capacity)"
		)

		(var isConsumableEnding:bool = "isActive && (stateTime <= CM2_BLINK_SETTINGS.THRESHOLD)")

		(var animatedAlpha:number = "CM2_DEFAULT_SETTINGS.ALPHA" watch=false)
		(var animatedOffset:number = "CM2_DEFAULT_SETTINGS.OFFSET_Y" watch=false)
		(var isAnimationPlaying:bool = "false" watch=false)

		(controller $Animation
			(bindcall play
				id			= 'consumableEndingBlink'
				duration	= "CM2_BLINK_SETTINGS.DURATION"
				repeatCount	= -1
				easing		= "Easing.sine_in"
				from		= "{ animatedAlpha: CM2_BLINK_SETTINGS.ALPHA_MAX }"
				to			= "{ animatedAlpha: CM2_BLINK_SETTINGS.ALPHA_MIN }"
				action		= "append"
				(event "evConsumableEnding")
			)
			(bindcall stop id='consumableEndingBlink' init=false (event "evConsumableDeactivated"))

			(bindcall play
				id			= 'consumableActivating'
				duration	= "CM2_APPEAR_SETTINGS.DURATION"
				easing		= "Easing.cubic_out"
				from		= "{ animatedAlpha: CM2_APPEAR_SETTINGS.ALPHA_MIN, animatedOffset: CM2_APPEAR_SETTINGS.OFFSET_Y_MAX }"
				to			= "{ animatedAlpha: CM2_APPEAR_SETTINGS.ALPHA_MAX, animatedOffset: CM2_APPEAR_SETTINGS.OFFSET_Y_MIN }"
				action		= "kill"
				(event "evConsumableActivated")
			)
			(bindcall play
				id			= 'consumableDeactivating'
				duration	= "CM2_APPEAR_SETTINGS.DURATION"
				to			= "{ animatedAlpha: CM2_APPEAR_SETTINGS.ALPHA_MIN,	 animatedOffset: CM2_APPEAR_SETTINGS.OFFSET_Y_MAX }"
				easing		= "Easing.cubic_out"
				action		= "killAll"
				(event "evConsumableDeactivated")
			)
			(bind animatedAlpha		"CM2_DEFAULT_SETTINGS.ALPHA"	init=false on=evAnimEnded)
			(bind animatedOffset	"CM2_DEFAULT_SETTINGS.OFFSET_Y" init=false on=evAnimEnded)

			(bind isAnimationPlaying "true"				watch=false init=false on=evAnimStarted)
			(bind isAnimationPlaying "false"			watch=false init=false on=evAnimEnded)
		)

		(var colorValue:number = "	isDisabled	? 0.8 :
									isEmpty		? 0.5
										  		: 1.0")
		(var iconColorTransform:dict = "{ redMultiplier: colorValue, greenMultiplier: colorValue, blueMultiplier: colorValue, alphaMultiplier: animatedAlpha}")
	)

	(dispatch evConsumableActivated		watch=false init=false (bind enabled "isActive") (bind trigger "isActive"))
	(dispatch evConsumableDeactivated	watch=false init=false (bind enabled "!isActive") (bind trigger "isActive"))
	(dispatch evConsumableEnding		watch=false init=false (bind enabled "isConsumableEnding") (bind trigger "isConsumableEnding"))

	(hblock
		(block
			(bind visible "isAnimationPlaying || isActive || altVisionEnabled")
			(style
				(bind backgroundImage "iconPath")
				(backgroundSize = "fill")
				(width = 24px)
				(height = 24px)
				(bind visualOffsetY "animatedOffset")
			)
			(bind colorTransform "iconColorTransform")
		)
		(block
			(bind visible "altVisionEnabled")
			(style
				(width = 18px)
			)
			(element CM2_TextItem _value="stateText"	_color="stateColor")
			(element CM2_TextItem _value="capacityStr"	_color="stateColor")
		)
	)
)

(def element CM2_TextItem (_value:str, _color:number) layout=true
	(style
		(height = 12px)
		(align = "middle|center")
	)
	(tf
		(class $WorldMarkerTextItem)
		(style
			(bind textColor "_color")
		)
		(bind text "_value")
	)
)