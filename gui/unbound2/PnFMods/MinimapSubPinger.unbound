(def macro AttentionMarker (_markerEntity:expression, _markerType:str) layout=true
	(scope
		(event evShow)
		(macro GET_MARKER_ENTITY_COMPONENT  'timeToLive')
		(macro SHIP_MARKER_ICON_DATA "_markerEntity.minimapAttentionPoint.avatarId")
		(var relationValue:number = "relationComponent.value")
		(var isReversedAnim:bool = "relationComponent.value != SC.Battle.PLAYER_RELATION.SELF")
		(var fxAssetPostfix:str = "isReversedAnim ? '_in' : ''")
		(var fxAnimEasing:number = "isReversedAnim ? Easing.quad_out : Easing.quad_out")
		(var fxScale:number = "isReversedAnim ? 1.5 : 1")

		(var markerAnim:bool = "false")

		(var lifeTime:number = "timeToLiveComponent ? timeToLiveComponent.lifeTime : 1")
		(var deathTime:number = "timeToLiveComponent ? timeToLiveComponent.deathTime : 1")
		(var repeatCount:number = "lifeTime / (SHORT_ATTENTION_DURATION / 2)")

		(var dotAlpha:number = "0" watch=false)
		(var dotRadius:number = "MARKER_CONFIG_MAP[_markerType].dotSize" watch=false)
		(controller $Animation
			(bindcall play	duration="SHORT_ATTENTION_DURATION / CIRCLE_EFFECT_COUNT"
							from="{dotRadius: 0, dotAlpha: 0}"
							to="{dotRadius: MARKER_CONFIG_MAP[_markerType].dotSize, dotAlpha: 1}"
							action="append"
							(event "evShow")
			)
			(bindcall play	delay="lifeTime + deathTime - SHORT_ATTENTION_DURATION"
							duration="deathTime"
							to="{dotAlpha: 0}"
							action="append"
			)
		)

		#modded
		(event evMarkerUpdate)
		(var markerRelationComponent:gfx = "_markerEntity && _markerEntity.hasComponent(CC.relation) ? _markerEntity.relation : null" (event "_markerEntity.evAdded"))
		(var markerRelation:number = "markerRelationComponent ? markerRelationComponent.value : -1" (event "markerRelationComponent.evChanged"))
		(var _isEnemy:bool = "isEnemy || markerRelation == SC.Battle.PLAYER_RELATION.ENEMY")
		(var markerColorTransform:dict = 
			"	isSelf				? TWO_TEAMS_COLOR_TRANSFORMS['white'] :
				tkStatus			? TWO_TEAMS_COLOR_TRANSFORMS['teamkiller'] :
				isInSameDivision	? TWO_TEAMS_COLOR_TRANSFORMS['division'] :
				isAlly				? TWO_TEAMS_COLOR_TRANSFORMS['ally'] :
				_isEnemy			? TWO_TEAMS_COLOR_TRANSFORMS['enemy']
									: TWO_TEAMS_COLOR_TRANSFORMS['white']")
		(dispatch evMarkerUpdate args={} (event "evEnterFrame") (bind enabled "_isEnemy"))
		(macro GET_MARKER_ENTITY_COMPONENT  'mapPosition')
		(macro GET_MARKER_ENTITY_COMPONENT  'data')
		(var pingerYaw:number = "mapPositionComponent ? radToGrad(mapPositionComponent.yaw) : 0" (event "evMarkerUpdate"))
		(var movingYaw:number = "dataComponent ? radToGrad(dataComponent.data.vehicleYaw) : 0")

		(var isEnemyPingerOnMap:bool = "_isEnemy && _markerType == 'minimap'")
		#
	)
	(dispatch evShow on='addedToStage')
	(macro AttentionCircleFX "dotRadius" "MARKER_CONFIG_MAP[_markerType].effectSize" "SHORT_ATTENTION_DURATION" "isReversedAnim")
	(block
		(bind colorTransform "markerColorTransform")
		(block
			#mod
			(bind visible "!isEnemyPingerOnMap")
			#
			(style (position = "absolute"))
			(bind alpha "dotAlpha")
			(controller $Sector
				(bind arc "360")
				(bind radius "dotRadius")
				(color = "0xFFFFFFFF")
			)
		)
		#mod
		(block
			(bind visible "isEnemyPingerOnMap")

			(controller $Instance (renderer = 'MapMarkerDirectionalLine')
				(exprs
					(style
						(bind rotation "pingerYaw")
						(bind alpha "2")
					)
				)
			)
			(block
				(style
					(bind rotation "movingYaw")
					(backgroundImage = "'swf:../fla/minimap/minimap.swf:minimap_submarine_last_visible'")
					(scaleX = 1.3)
					(scaleY = 1.3)
				)
			)
		)
		#
	)
)